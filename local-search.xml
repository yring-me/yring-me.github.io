<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PE文件结构（十）</title>
    <link href="/2023/07/15/PE_9/"/>
    <url>/2023/07/15/PE_9/</url>
    
    <content type="html"><![CDATA[<p>IAT表、INT表、导入表</p><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>导出表是告诉其他PE文件可以如何找到自己提供的函数，它分为名字导出、序号导出，又各自对应几张表，分别是函数地址表AddressOfFunctions、函数序号表AddressOfNameOrdinals、函数名称表AddressOfNames。</p><p>重定位表里面则是记录所有需要修改地址的地址，也就是告诉操作系统哪里有地址需要修改。当一个PE文件无法按照预计ImageBase装载时发挥作用</p><h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><p>一个PE文件有导出表，自然就有导入表。前者是告诉别人如何用，后者就相当于告诉别人自己要用什么。它可以通过OptionalHeader数据目录项的第二项找到</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307142243765.png"></p><p>同理这个VirtualAddress也是一个RVA，需要转化为FOA后才能在文件中找到真正的导入表结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        DWORD   Characteristics;            <br>        DWORD   OriginalFirstThunk; <span class="hljs-comment">// 指向 导入名称表INT（ImportNameTable）的RVA</span><br>    &#125; DUMMYUNIONNAME;<br>    DWORD   TimeDateStamp;                  <br>    DWORD   ForwarderChain;                 <br>    DWORD   Name;                   <span class="hljs-comment">// 指向 DLL名称的地址 RVA</span><br>    DWORD   FirstThunk;             <span class="hljs-comment">// 指向 导入地址表IAT（ImportAddressTable）的RVA</span><br>&#125; IMAGE_IMPORT_DESCRIPTOR;<br><span class="hljs-keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;<br></code></pre></td></tr></table></figure><p>其中<code>OrginalFirstThunk</code>和<code>FirstThunk</code>各自再指向两张表，分别是INT表和IAT表，<code>name</code>则是要用到的dll的名字。在进一步解析IAT表和INT表之前，先做个实验。</p><p>随便使用调试器打开一个PE文件，在里面找一找一些使用了系统调用的函数</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307142331070.png"></p><p>比如这里，实际上这条指令就是<code>mov rax ds:[4083b0]</code>，在内存中转去4083B0这个地址，看看是什么</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307142334814.png"></p><p>也就是说4083B0这个地址存放的是7FFFE86C3190，借助于调试器很方便的知道这个地址就是MessageBoxA的函数地址，这条指令也就等价于把MessageBoxa的地址给rax，然后再调用此函数。</p><p>而我们在文件中去看看4083B0这个地址存放的是什么呢（这里要减去ImageBase得到83B0，同时RVA转换FOA，才能在文件中找到，此地址在文件中对应的地址为37B0</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307142341414.png"></p><p>37B0这个地址存放的则是一个86F6，很显然与运行时存放的值不一样。继续深究86F6又是什么，首先这是一个RVA，将其转换为FOA后，得到3AF6</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307142344785.png"></p><p>当在文件中转去3AF6时，就会意料中地发现居然就是MessageBoxA这个函数名字，虽然前面还带了E9 01两字节不知道什么东西。</p><p>也就是说在内存中4083B0存放的是MessageBoxA的地址，而文件中则对应存放的是MessageBoxA的名字的RVA。换句话说存放的东西不一样，但两者之间肯定有一定的联系。实际上，3AF6处就是IAT表中的一项。</p><p>目前可以明确的是IAT表运行前运行后确实会发生变化，这其实就跟PE文件加载过程有关了。</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307142354979.png"></p><p>在PE文件加载之前，INT表和IAT表指向同一块地方，换句话说INT表和IAT表在运行前是完全一样的但是独立的两张表，在多数情况下它们处于不同的地址处，但是存放相同的值。在PE文件加载之后，操作系统就会根据INT表去找那些函数地址，比如MesaageBoxA的地址，然后填入IAT表中。</p><p>这里不妨细说一下exe文件加载过程</p><ul><li>首先操作系统给exe文件分配4GB的虚拟空间，然后把exe本身的代码加载到ImageBase处，通常来说exe是首先加载的，往往都能预计加载到ImageBase处，因此不需要使用重定位表修改。</li><li>其次，操作系统往4GB空间中加载各种DLL文件，由于DLL文件往往会有冲突，不能按照预计ImageBase装载，因此需要使用DLL本身提供的重定位表修复自己的地址</li><li>待所有DLL都加载并修复完后，操作系统根据exe的INT表去找函数地址，找到一个地址就填入IAT表中，遍历完INT表也就遍历完IAT表，由此完成对IAT表的修改（这个找函数地址的过程，其实就是调用GetPrcoAddress这个函数，我们在此之前实现了差不多的）</li><li>此时INT表存储了函数名称或者序号，IAT表存储了对应的函数地址，想要使用DLL一个函数也就简单了。</li></ul><p>也就是说文件加载前后INT表不变，文件加载前IAT表和INT表相同，文件加载后IAT表发生变化</p><p>那么INT表是如何存储函数名称或者序号呢？</p><p>先来看看INT表表项结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_THUNK_DATA32</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        PBYTE  ForwarderString;<br>        PDWORD Function;<br>        DWORD Ordinal; <span class="hljs-comment">//序号</span><br>        PIMAGE_IMPORT_BY_NAME  AddressOfData;<span class="hljs-comment">//指向IMAGE_IMPORT_BY_NAME</span><br>    &#125; u1;<br>&#125; IMAGE_THUNK_DATA32;<br></code></pre></td></tr></table></figure><p>注意这是个联合体，也就是说这个结构宽度是4个字节，虽然看起来这个联合体存放了很多东西。但又最简单的方法判断，如果这4个字节最高位是1，那么剩下31位就代表函数序号；如果最高位不为1，那么剩下31为就代表一个RVA指向另一个结构<code>IMAGE_IMPORT_BY_NAME</code>，即<code>if(INT &amp; 0x80000000 == 0x80000000) :序号导出 else RVA = IMAGE_IMPORT_BY_NAME</code></p><p>这个IMAGE_IMPORT_BY_NAME结构也简单</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_IMPORT_BY_NAME</span> &#123;</span><br>    WORD    Hint;<span class="hljs-comment">//可能为空，编译器决定 如果不为空 是函数在导出表中的索引</span><br>    BYTE    Name[<span class="hljs-number">1</span>];    <span class="hljs-comment">//函数名称，以0结尾</span><br>&#125; IMAGE_IMPORT_BY_NAME<br></code></pre></td></tr></table></figure><p>第二个成员就指向名字的第一个字节。</p><p>IAT表和INT表在加载前是完全一样的，其结构也是一样的，它们的成员都会指向相同的序号或者IMAGE_IMPORT_BY_NAME结构</p><h2 id="代码遍历"><a href="#代码遍历" class="headerlink" title="代码遍历"></a>代码遍历</h2><p>NOTE：我使用的PE文件是64位的，在处理上会略有所不同。会在代码中标出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Size</span><span class="hljs-params">(FILE* fp)</span>&#123;<br>    <span class="hljs-type">int</span> size = <span class="hljs-number">0</span>;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    size = ftell(fp);<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><br>DWORD <span class="hljs-title function_">RVA_TO_FOA</span><span class="hljs-params">(DWORD RVA,<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>   PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FileHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    FileHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br>    <br>    <span class="hljs-keyword">if</span> (RVA &lt; OptionalHeader-&gt;SizeOfHeaders)<br>&#123;<br><span class="hljs-keyword">return</span> RVA;<br>&#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;FileHeader-&gt;NumberOfSections<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(RVA &gt;= SectionHeader-&gt;VirtualAddress &amp;&amp; RVA &lt; (SectionHeader+<span class="hljs-number">1</span>)-&gt;VirtualAddress)&#123;<br>            DWORD offset = RVA - SectionHeader-&gt;VirtualAddress;<br>            <span class="hljs-keyword">return</span> SectionHeader-&gt;PointerToRawData + offset;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            SectionHeader +=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>     <span class="hljs-comment">//最后一个节区</span><br>    DWORD offset = RVA - SectionHeader-&gt;VirtualAddress;<br>    <span class="hljs-keyword">return</span> SectionHeader-&gt;PointerToRawData + offset;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Import_INFO</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>     <span class="hljs-comment">//如果是查看32位的PE文件 这里改为PIMAGE_OPTIONAL_HEADER6432</span><br>PIMAGE_OPTIONAL_HEADER64 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br><br>DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>FILEHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>                     <span class="hljs-comment">//如果是查看32位的PE文件 这里改为PIMAGE_OPTIONAL_HEADER6432</span><br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER64)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br><br>PIMAGE_IMPORT_BY_NAME ImportByName=<span class="hljs-literal">NULL</span>;<br>PIMAGE_IMPORT_DESCRIPTOR Import_Table = (PIMAGE_IMPORT_DESCRIPTOR)(Buffer + RVA_TO_FOA(OptionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress,Buffer));<br><span class="hljs-comment">//用于确定导入表的结束</span><br><span class="hljs-type">char</span> ZERO[<span class="hljs-keyword">sizeof</span>(IMAGE_IMPORT_DESCRIPTOR)] = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; <span class="hljs-built_in">memcmp</span>(ZERO,Import_Table,<span class="hljs-keyword">sizeof</span>(IMAGE_IMPORT_DESCRIPTOR));i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----------第 %d 个导入表----------\n&quot;</span>,i);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Time Date Stamp:%X\n&quot;</span>,Import_Table-&gt;TimeDateStamp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Dll name:%s\n&quot;</span>,(Buffer + RVA_TO_FOA(Import_Table-&gt;Name,Buffer)));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INT RVA:%X\n&quot;</span>,Import_Table-&gt;OriginalFirstThunk);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IAT RVA:%X\n&quot;</span>,Import_Table-&gt;FirstThunk);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******INT TABLE******\n&quot;</span>);<br>         <span class="hljs-comment">//如果是查看32位的PE文件 这里改为DWORD*</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span>* INT_Address = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)(Buffer + RVA_TO_FOA(Import_Table-&gt;OriginalFirstThunk,Buffer));<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; *INT_Address ;j++)&#123;<br><span class="hljs-comment">//最高位是1 则是序号导出 ////如果是查看32位的PE文件 这里改为0x80000000</span><br><span class="hljs-keyword">if</span>(((*INT_Address) &amp; <span class="hljs-number">0x8000000000000000</span>))&#123;         <span class="hljs-comment">// 这里改为0x7fffffff   </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d个函数序号为:%d\n&quot;</span>,j,(*INT_Address) &amp; <span class="hljs-number">0x7fffffffffffffff</span>);<br>&#125;<br><span class="hljs-comment">//否则是偏移指向另一个结构</span><br><span class="hljs-keyword">else</span>&#123;<br>ImportByName = (PIMAGE_IMPORT_BY_NAME)(Buffer + RVA_TO_FOA(*(INT_Address),Buffer));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d个函数名字为:%s\n&quot;</span>,j,ImportByName-&gt;Name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INT_ADDRESS:%X \n&quot;</span>,*INT_Address);<br>&#125;<br><br>INT_Address++;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******IAT TABLE******\n&quot;</span>);<br>        <span class="hljs-comment">//如果是查看32位的PE文件 这里改为DWORD*</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span>* IAT_Address = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>*)(Buffer + RVA_TO_FOA(Import_Table-&gt;FirstThunk,Buffer));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; *IAT_Address ;j++)&#123;<br><span class="hljs-comment">//最高位是1 则是序号导出 这里改为0x80000000</span><br><span class="hljs-keyword">if</span>((*IAT_Address) &amp; <span class="hljs-number">0x8000000000000000</span>)&#123;           <span class="hljs-comment">// 这里改为0x7fffffff  </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d个函数序号为:%d\n&quot;</span>,j,(*IAT_Address) &amp; <span class="hljs-number">0x7fffffffffffffff</span>);<br>&#125;<br><span class="hljs-comment">//否则是偏移指向另一个结构</span><br><span class="hljs-keyword">else</span>&#123;<br>ImportByName = (PIMAGE_IMPORT_BY_NAME)(Buffer + RVA_TO_FOA(*IAT_Address,Buffer));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d个函数名字为:%s\n&quot;</span>,j,ImportByName-&gt;Name);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IAT_ADDRESS:%X \n&quot;</span>,*IAT_Address);<br>&#125;<br>IAT_Address++;<br>&#125;<br><br>Import_Table++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------\n&quot;</span>);<br>&#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* buffer;<br>    <span class="hljs-type">char</span>* new_buffer;<br><br>    FILE* fp1 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">errno_t</span> err_1 = fopen_s(&amp;fp1, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\Func.dll&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br><br>    <span class="hljs-comment">//将文件读取到程序中</span><br>    <span class="hljs-type">int</span> size = Size(fp1);<br>    buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<br>    fread(buffer,size,<span class="hljs-number">1</span>,fp1);<br><br>Import_INFO(buffer);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>PE加载前，INT表和IAT表存放了相同的值指向同一处地方，或为函数序号、或为函数名称。</p><p>PE加载后，操作系统根据INT表找到各个DLL中每个函数的具体地址，将其填入IAT中。</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307142354979.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构（九）</title>
    <link href="/2023/07/12/PE_8/"/>
    <url>/2023/07/12/PE_8/</url>
    
    <content type="html"><![CDATA[<p>PE文件练习</p><p>移动导出表、重定位表、手动修复重定位表</p><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>导出表是告诉其他PE文件本身可以提供什么函数，并且提供名字索引和序号索引两种方式找到一个函数地址。导出表下又指向了三张新表，分别是函数地址表，序号表，名称表。</p><p>重定位表是在PE文件无法按照预计ImageBase装载时，提供所有需要修改地址的一张表。因为编译器在编译文件时会按照预计ImageBase计算所有地址，以硬编码方式生成，那么在ImageBase无法正确装载时，这些硬编码地址就需要更改，重定位表就负责提供这些硬编码地址。</p><p>现在就尝试去移动这两张表，并根据重定位表原理手动修复一下。</p><h2 id="移动导出表"><a href="#移动导出表" class="headerlink" title="移动导出表"></a>移动导出表</h2><p>先来看看导出表的结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span><br>        DWORD   Characteristics;<span class="hljs-comment">//没用</span><br>        DWORD   TimeDateStamp;<span class="hljs-comment">//时间戳</span><br>        WORD    MajorVersion;<span class="hljs-comment">//没用</span><br>        WORD    MinorVersion;<span class="hljs-comment">//没用</span><br>        DWORD   Name;<span class="hljs-comment">//指向导出表文件名 RVA --&gt;FOA+FileBuff=char *name;</span><br>        DWORD   Base;<span class="hljs-comment">//导出函数起始序号</span><br>        DWORD   NumberOfFunctions;<span class="hljs-comment">//导出函数个数</span><br>        DWORD   NumberOfNames;<span class="hljs-comment">//以名称导出函数个数</span><br>        DWORD   AddressOfFunctions;<span class="hljs-comment">//导出函数地址表 RVA--&gt;FOA +FileBuff         </span><br>DWORD   AddressOfNames;    <span class="hljs-comment">//导出函数名称表     // RVA from base of image</span><br>        DWORD   AddressOfNameOrdinals; <span class="hljs-comment">//导出函数序号表 // RVA from base of image</span><br>&#125; IMAGE_EXPORT_DIRECTORY, * PIMAGE_EXPORT_DIRECTORY;<br></code></pre></td></tr></table></figure><p>其中 AddressOfFunctions、AddressOfNames、AddressOfNameOrdinals对应三张表的地址。</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307072016159.png"></p><p>我们目标就是把这三张表移动一个新的节区，再把导出表结构放到这三张表后面。</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307120055868.png"></p><p>可以分为以下几个步骤来移动</p><blockquote><p>1.创建一个新的节区</p><p>2.将函数地址表，即AddressOfFunctions对应的表移到新节区开头，并将原AddressOfFunctions进行修正</p><p>3.将函数序号表，即AddressOfNameOrdinals对应的表接续移到新节区，并将原AddressOfNameOrdinals进行修正</p><p>4.将函数名称表，即AddressOfNames对应的表接续移到新节区，并将原AddressOfNames进行修正</p><p>5.将函数名称表对应的所有名字接续移到新节区，并把函数名称表里地址进行修正</p><p>6.将整个导出表接续移到新节区，并把原来的Directory目录项进行修正</p></blockquote><p>NOTE：</p><p>1.需要主要各种地址之间的转化，是RVA还是FOA</p><p>2.需要主要各种指针类型之间的转化，这在指针运算中十分重要</p><p>3.可以尝试使用新移动后的dll，验证是否成功移动</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码中会有详细注释，仅给出移动导出表函数实现，其余函数已在其余文章中有实现，不再重复给出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">char</span>* <span class="hljs-title function_">Move_ExportTable</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER64 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER New_SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>FILEHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER64)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br>New_SectionHeader=(PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER +IMAGE_SIZEOF_SECTION_HEADER*(FILEHeader-&gt;NumberOfSections<span class="hljs-number">-1</span>) + FILEHeader-&gt;SizeOfOptionalHeader);<br><br>DWORD Export_DATA_RVA = OptionalHeader-&gt;DataDirectory[<span class="hljs-number">0</span>].VirtualAddress;<br>DWORD Export_DATA_FOA = RVA_TO_FOA(Export_DATA_RVA, Buffer);<br>PIMAGE_EXPORT_DIRECTORY Export_Table = (PIMAGE_EXPORT_DIRECTORY)(Export_DATA_FOA + Buffer);<br><br>    <span class="hljs-comment">//用来记录在新节区中偏移，就是已经复制了多少个字节</span><br>    DWORD index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span>* New_Sec = New_SectionHeader-&gt;PointerToRawData + Buffer;<br><br>    <span class="hljs-comment">//定位到函数地址表，使用char*类型指针即可，因为不需要对其具体求值，只需要按字节复制</span><br>    <span class="hljs-type">char</span>* AddressOfFunctions = Buffer + RVA_TO_FOA(Export_Table-&gt;AddressOfFunctions,Buffer);<br>    <span class="hljs-comment">//复制函数地址表，每个地址表表项都占4个字节</span><br>    <span class="hljs-built_in">memcpy</span>(New_Sec, AddressOfFunctions, Export_Table-&gt;NumberOfFunctions * <span class="hljs-number">4</span>);<br>    <span class="hljs-comment">//修正导出表AddressOfFunctions地址，使其指向新函数地址表 注意是RVA 这里就是新节区起始RVA</span><br>    Export_Table-&gt;AddressOfFunctions = New_SectionHeader-&gt;VirtualAddress + index;<br>    <span class="hljs-comment">//记录已经copy多少字节</span><br>    index += Export_Table-&gt;NumberOfFunctions * <span class="hljs-number">4</span>;<br>    <br>    <span class="hljs-comment">//定位到序号表，同理使用char*类型指针</span><br>    <span class="hljs-type">char</span>* AddressOfOrdinals = Buffer + RVA_TO_FOA(Export_Table-&gt;AddressOfNameOrdinals,Buffer);<br><br>    <span class="hljs-comment">//复制序号表</span><br>    <span class="hljs-built_in">memcpy</span>(New_Sec + index, AddressOfOrdinals, Export_Table-&gt;NumberOfNames * <span class="hljs-number">2</span>);<br>    <span class="hljs-comment">//修正导出表AddressOfNameOrdinals，使其指向新序号表，也是RVA</span><br>    Export_Table-&gt;AddressOfNameOrdinals = New_SectionHeader-&gt;VirtualAddress + index;<br>    <span class="hljs-comment">//记录目前总共已经copy多少字节</span><br>    index += Export_Table-&gt;NumberOfNames * <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//名称表实现稍显复杂，因为还需要copy名称表对应的名字</span><br>    <span class="hljs-comment">//定位到名称表</span><br>    <span class="hljs-type">char</span>* AddressOfNames = Buffer + RVA_TO_FOA(Export_Table-&gt;AddressOfNames,Buffer);<br>    <span class="hljs-comment">//新节中 名称表起始地址</span><br>    <span class="hljs-type">char</span>* AddressOfNames_FIX = New_Sec + index;<br>    <span class="hljs-comment">//修复导出表AddressOfNames，使其指向新名称表</span><br>    Export_Table-&gt;AddressOfNames = New_SectionHeader-&gt;VirtualAddress + index;<br>    <br>    <span class="hljs-comment">//指向后面的空白区，开始复制名字</span><br>    index += Export_Table-&gt;NumberOfNames * <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; Export_Table-&gt;NumberOfNames;i++)&#123;<br>        <span class="hljs-comment">//复制名字//AddressOfNames在定义时使用的char*类型，这里取值需要转为DWORD*型</span><br>        <span class="hljs-type">char</span>* name = Buffer + RVA_TO_FOA(*((DWORD*)AddressOfNames + i),Buffer);<br>        <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(name);<br>        <span class="hljs-comment">//+1是因为要把字符串后面的0也复制过去，当然不复制也是可以的，因为创建新节区时就已经全部初始为0</span><br>        <span class="hljs-built_in">memcpy</span>(New_Sec + index,name,len+<span class="hljs-number">1</span>);<br><span class="hljs-comment">//这里时修复名称表表项的地址，在根据原表项找到并复制名字后就要把表项给修正为新复制的地址，这里就是FOA转RVA了</span><br>        *((DWORD*)AddressOfNames_FIX + i) = FOA_TO_RVA((New_Sec + index) - Buffer,Buffer);<br>        <span class="hljs-comment">//这里必须加1，因为字符串结束地址一定为0</span><br>        index += len + <span class="hljs-number">1</span>;<br>    &#125;<br>    <br><span class="hljs-comment">//这里开始复制导出表数据</span><br>    <span class="hljs-type">int</span> Size_Of_Exportable = <span class="hljs-keyword">sizeof</span>(IMAGE_EXPORT_DIRECTORY);<br>    <span class="hljs-built_in">memcpy</span>(New_Sec + index,Export_Table,Size_Of_Exportable);<br>    <span class="hljs-comment">//这里就是修复原目录项</span><br>    OptionalHeader-&gt;DataDirectory[<span class="hljs-number">0</span>].VirtualAddress = New_SectionHeader-&gt;VirtualAddress + index;<br>    <br>    Export_Table_INFO(Buffer);<br>    <span class="hljs-keyword">return</span> Buffer;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="移动重定位表"><a href="#移动重定位表" class="headerlink" title="移动重定位表"></a>移动重定位表</h2><p>重定位表结构比导出表结构简单许多，只需要把目录项的VirtualAddress指向新节区，并把重定位表数据copy到新节区即可</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307120116122.png"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">char</span>* <span class="hljs-title function_">Move_RelocTable</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER64 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER New_SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>FILEHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER64)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br>New_SectionHeader=(PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER +IMAGE_SIZEOF_SECTION_HEADER*(FILEHeader-&gt;NumberOfSections<span class="hljs-number">-1</span>) + FILEHeader-&gt;SizeOfOptionalHeader);<br><br><span class="hljs-comment">//定位到重定位表</span><br>    DWORD Reloc_RVA = OptionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress;<br>    DWORD Reloc_FOA = RVA_TO_FOA(Reloc_RVA,Buffer); <br>    PIMAGE_BASE_RELOCATION Reloc_Table = (PIMAGE_BASE_RELOCATION)(Buffer + Reloc_FOA);<br><span class="hljs-comment">//记录新节区偏移</span><br>    DWORD index = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//结束标志</span><br>    <span class="hljs-keyword">while</span>(Reloc_Table-&gt;VirtualAddress &amp;&amp; Reloc_Table-&gt;SizeOfBlock)&#123;<br>        <span class="hljs-comment">//直接复制即可</span><br>        <span class="hljs-built_in">memcpy</span>(New_SectionHeader-&gt;PointerToRawData + Buffer + index,Reloc_Table,Reloc_Table-&gt;SizeOfBlock);<br>        <span class="hljs-comment">//记录复制了多少字节</span><br>        index += Reloc_Table-&gt;SizeOfBlock;<br>        <span class="hljs-comment">//继续复制下张重定位表</span><br>        Reloc_Table = (PIMAGE_BASE_RELOCATION) (((byte*)(Reloc_Table) + Reloc_Table-&gt;SizeOfBlock));<br>    &#125;<br><span class="hljs-comment">//修正目录项的VirtualAddress</span><br>    OptionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress = New_SectionHeader-&gt;VirtualAddress;<br><br>    <span class="hljs-keyword">return</span> Buffer;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="修复重定位表"><a href="#修复重定位表" class="headerlink" title="修复重定位表"></a>修复重定位表</h2><p>前面提及，重定位表是在PE文件无法按照语句ImageBase装载时发挥作用，那么我们就可以手动来改一改PE文件的ImageBase然后自己来修复那些地址。</p><p>比如说一个重定位表的VisualAddress是0x1000，它其中一个数据项有效值是0x12，那么就说明RVA0x1012处有一个需要修复的地址，需要根据实际ImageBase来重新计算。</p><p>那么我们这里修改了ImageBase，就相当于模拟了无法按照ImageBase来装载，我们就得按照重定位表去找那些需要修改的地址，来重新计算。比如我们给ImageBase增加0x100000，那么所有的那些需要修改的地址都一起增加0x100000</p><p>NOTE：重定位表是记录需要修改地址的表，其本身是不需要修改的。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>INCREATEMENT是我定义的一个宏，作为ImageBase修改的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span> <span class="hljs-title function_">Reloc_Fix</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER64 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>FILEHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER64)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br><br>    <span class="hljs-comment">//定位到重定位表</span><br>DWORD Reloc_RVA = OptionalHeader-&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress;<br>    DWORD Reloc_FOA = RVA_TO_FOA(Reloc_RVA,Buffer);<br>    PIMAGE_BASE_RELOCATION Reloc_Table = (PIMAGE_BASE_RELOCATION)(Buffer + Reloc_FOA);<br>    <span class="hljs-comment">//手动更改ImageBase</span><br>    OptionalHeader-&gt;ImageBase =OptionalHeader-&gt;ImageBase + INCREATIMENT;<br><br>    <span class="hljs-keyword">while</span>(Reloc_Table-&gt;VirtualAddress &amp;&amp; Reloc_Table-&gt;SizeOfBlock)&#123;<br>        <span class="hljs-comment">//定位到重定位表的数据项</span><br>        WORD* Reloc_Add = (WORD*)((<span class="hljs-type">char</span>*)Reloc_Table + <span class="hljs-number">8</span>);<br>        <span class="hljs-comment">//数据项项数</span><br>        DWORD RealSize =( Reloc_Table-&gt;SizeOfBlock - <span class="hljs-number">8</span>) / <span class="hljs-number">2</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; RealSize ; i++)&#123;<br>            <span class="hljs-comment">//数据项低12位是偏移</span><br>            DWORD Offset = (*(Reloc_Add + i) )&amp; <span class="hljs-number">0x0fff</span>;<br>            <span class="hljs-comment">//VirtualAddress是基址，与数据项低12位一起组成地址</span><br>            DWORD Base = Reloc_Table-&gt;VirtualAddress;<br>            <span class="hljs-comment">//找到需要修改的地址</span><br>            DWORD* Addr = (DWORD*)(RVA_TO_FOA(Base + Offset,Buffer) + Buffer);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Beferoe: %x &quot;</span>,*Addr);<br>            <span class="hljs-comment">//进行重定位，也就是根据ImageBase进行修复</span><br>            *FuncAddr =*Addr + INCREATIMENT;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;After: %x\n&quot;</span>,*Addr);<br>        &#125;<br><span class="hljs-comment">//继续下一个重定位表</span><br>        Reloc_Table =(PIMAGE_BASE_RELOCATION) ((<span class="hljs-type">char</span>*)Reloc_Table + Reloc_Table-&gt;SizeOfBlock);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构（八）</title>
    <link href="/2023/07/09/PE_7/"/>
    <url>/2023/07/09/PE_7/</url>
    
    <content type="html"><![CDATA[<p>重定位表</p><span id="more"></span><h2 id="程序装载过程"><a href="#程序装载过程" class="headerlink" title="程序装载过程"></a>程序装载过程</h2><p>当我们双击一个exe的时候，操作系统会自动为这个exe分配4GB独立的虚拟空间，其中高2G作为运行操作系统内核任务，低2G才运行用户的代码。在拥有这个4GB空间后，操作系统就会把这个exe从文件状态拉伸然后复制到低2G空间中</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307082336465.png"></p><p>而后则是copy系统DLL到高2G中。最后则是将eip置为EntryPoint，就可以运行整个exe了。</p><p>然而这里面有一个问题，就是每个PE文件都会优先按照其自身DLL的ImageBase来装载，那么就无法避免ImageBase冲突的状况。一旦发生ImageBase冲突就需要另找一个地方来装载。可若仅仅只是换一个地方来装载，又会带来另一个问题——地址改变。</p><p>在编译一个文件的时候，编译器往往会把一些全局变量或者函数调用的地址给写死，也就是按照预计的ImageBase来计算地址</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307082351108.png"></p><p>比如图中所有的红下划线都对应一个地址，他们都是按照预计的ImageBase来加载计算的，但是如果没有按照ImageBase加载，那么这个地址就一定会有问题。</p><p>解决办法就是记录这些地址，在实际运行的时候根据ImageBase来修正这些地址，那么就需要一张表来记录这些需要修正的地址。这张表就叫做重定位表。</p><h2 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h2><h3 id="找到重定位表"><a href="#找到重定位表" class="headerlink" title="找到重定位表"></a>找到重定位表</h3><p>重定位表地址位于OptionalHeader的第六项，这个地址也是RVA，将其转化为FOA后就可以找到重定位表</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307082358679.png"></p><h3 id="重定位表结构"><a href="#重定位表结构" class="headerlink" title="重定位表结构"></a>重定位表结构</h3><p>重定位表与其他表都有不同，它的结构体只有两个成员，一个记录基地址，一个记录块大小，每个结构体后都跟有许多个两字节数据，然后许多个这样的块紧密连在一起形成一个重定位表。可能你会问基地址是什么？块大小是什么？数据又是什么？下面就来解释每个成员的意义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_BASE_RELOCATION</span>&#123;</span><br>DWORD VirtualAddress;<br>DWORD SizeOfBlock;<br>    <span class="hljs-comment">//一堆数据...（如果是最后一个这种结构，就只有RVA和SizeOfBlock，且都为0）</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307090001337.png"></p><p>可以这么理解：一个重定位表中可能会有多个“块”，每个块的结构都是</p><ul><li>4字节VirtualAddress</li><li>接着4字节SizeOfBlock</li><li>最后是一堆数据，称其为具体项</li><li>每个块的大小为SizeOfBlock（字节）。</li></ul><p>最后一个块的RVA和SizeOfBlock都是0x00000000，表示重定位表结束</p><p>在一个exe中，需要重定位的地址可能有很多个，每个地址都是4字节，如果全部都完完全全按照4字节来存储，显然会占据很多空间。但是稍微观察一下会发现，许多需要重定位的地址都比较相近，比如上面所举的例子。</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307082351108.png"></p><p>在图中需要重定位的地址就是 <code>6DF03</code>,<code>6DF0B</code>,<code>6DF1A</code>等等（注意是需要重定位的地址，操作码是不需要改变的），它们都是<code>6D</code>开头，就会很自然诞生一种想法就是以<code>6D000</code>为基地址，在基地址上加一个偏移来找到具体的需要重定位的地址。那么这个基地址就是<code>VirtualAddres</code>，偏移则记录在结构体后的数据中，也就是那些个01数据。</p><p>现在来思考这样一个问题，那些记录偏移的01数据都是两字节的，也就是16位，能够记录 $2^{16} &#x3D; 65536$ 个数据，然而在内存中这些模块间对齐粒度都是64KB即0x1000，也就是所有的基地址都是以0x1000来对齐的。16位的偏移显然超过了这个基地址，只需要用到12位就足以表示一个基地址的所有偏移了。因此16位的偏移数据会多出4位，于是就规定这16位里面高4位为有效位，只有当高四位等于3的时候才说明这个地址需要重定位，低12位则记录偏移。</p><p>因此一个需要重定位的地址就应该这样计算 <code>if 具体项高4位 == 3 ：地址 = VirtualAddress + 具体项低12位</code></p><p>成员SizeOfBlock意义就比较明确了，就是整个块的大小，包括VirtualAddress 的四字节，本身SizeOfBlock的四字节，以及下面的所有具体项的两字节。所以有多少个具体项就应该这样计算：<code>(SizeOfBlock - 8)/2</code>，注意这里的单位都是字节</p><h2 id="代码遍历重定位表"><a href="#代码遍历重定位表" class="headerlink" title="代码遍历重定位表"></a>代码遍历重定位表</h2><p>代码中有注释</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><br>DWORD <span class="hljs-title function_">Size</span><span class="hljs-params">(FILE* fp)</span>&#123;<br>    DWORD size = <span class="hljs-number">0</span>;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    size = ftell(fp);<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><br>DWORD <span class="hljs-title function_">RVA_TO_FOA</span><span class="hljs-params">(DWORD RVA,<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FileHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    FileHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br>    <span class="hljs-keyword">if</span> (RVA &lt; OptionalHeader-&gt;SizeOfHeaders)<br>    &#123;<br>        <span class="hljs-keyword">return</span> RVA;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;FileHeader-&gt;NumberOfSections<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(RVA &gt;= SectionHeader-&gt;VirtualAddress &amp;&amp; RVA &lt; (SectionHeader+<span class="hljs-number">1</span>)-&gt;VirtualAddress)&#123;<br>            DWORD offset = RVA - SectionHeader-&gt;VirtualAddress;<br>            <span class="hljs-keyword">return</span> SectionHeader-&gt;PointerToRawData + offset;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            SectionHeader +=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>        <span class="hljs-comment">//最后一个节区</span><br>    SectionHeader +=<span class="hljs-number">1</span>;<br>    DWORD offset = RVA - SectionHeader-&gt;VirtualAddress;<br>    <span class="hljs-keyword">return</span> SectionHeader-&gt;PointerToRawData + offset;<br>&#125;<br><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Relocation_INFO</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FileHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER32 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    FileHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER32)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br>    <span class="hljs-comment">//在目录项中找到重定位表地址</span><br>    DWORD Relocation_Table_RVA = OptionalHeader&gt;DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress;<br>    <span class="hljs-keyword">if</span> (!Relocation_Table_RVA)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This exe has not Relocation Table\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>&#125;<br><br>    <span class="hljs-comment">//将重定位表地址转化FOA</span><br>    DWORD Relocation_Table_FOA = RVA_TO_FOA(Relocation_Table_RVA,Buffer);<br><br>    <span class="hljs-comment">//找到第一个重定位表块</span><br>    PIMAGE_BASE_RELOCATION Relocation_Table = (PIMAGE_BASE_RELOCATION)(Buffer + Relocation_Table_FOA);<br><br>    <span class="hljs-comment">//遍历所有重定位表</span><br>    <span class="hljs-keyword">while</span>(Relocation_Table-&gt;VirtualAddress &amp;&amp; Relocation_Table-&gt;SizeOfBlock)&#123;<br>      <span class="hljs-comment">//先转为byte*，加8字节，然后转为Word*，这里就是代表每一个具体项</span><br>        WORD* Reloc = (WORD*)((byte*)Relocation_Table + <span class="hljs-number">8</span>);<br>        <span class="hljs-comment">//算出有多少个据具体项</span><br>        DWORD AddSize =  (Relocation_Table-&gt;SizeOfBlock - <span class="hljs-number">8</span>) / <span class="hljs-number">2</span>;<br><br>        <span class="hljs-comment">//这里是计算需要重定位地址属于哪一个块，可加可不加</span><br>        <span class="hljs-comment">//********************************Section****************************************</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; FileHeader-&gt;NumberOfSections;i++)&#123;<br>            <span class="hljs-keyword">if</span> (Relocation_Table-&gt;VirtualAddress &gt;= SectionHeader-&gt;VirtualAddress &amp;&amp; Relocation_Table-&gt;VirtualAddress &lt; (SectionHeader-&gt;VirtualAddress + SectionHeader-&gt;Misc.VirtualSize))&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=====%s=====\n&quot;</span>,SectionHeader-&gt;Name);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                SectionHeader += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//********************************Section****************************************</span><br>        <br>        <span class="hljs-comment">//这里就是遍历所有具体项</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; AddSize; i++)&#123;<br>            <span class="hljs-comment">//高4位是否为3</span><br>            <span class="hljs-keyword">if</span>((*(Reloc + i) &gt;&gt; <span class="hljs-number">12</span> ) == <span class="hljs-number">3</span>)&#123;<br>                <span class="hljs-comment">//计算需要重定位地址的RVA</span><br>                DWORD RVA = Relocation_Table-&gt;VirtualAddress + (*(Reloc + i) &amp; <span class="hljs-number">0xfff</span>);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RVA_Address:%X FOA_Address:%X\n&quot;</span>,RVA,RVA_TO_FOA(RVA,Buffer));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//根据SizeOfBlock找到下一个重定位表块，同样也是需要先转为byte*再计算</span><br>        Relocation_Table = (PIMAGE_BASE_RELOCATION) (((byte*)(Relocation_Table) + Relocation_Table-&gt;SizeOfBlock));<br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* buffer;<br><br>    FILE* fp = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">errno_t</span> err_1 = fopen_s(&amp;fp, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\PE_Info.exe&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <br>    <span class="hljs-comment">//将文件读取到程序中</span><br>    <span class="hljs-type">int</span> size = Size(fp);<br>    buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<br>    fread(buffer,size,<span class="hljs-number">1</span>,fp);<br><br>    Relocation_INFO(buffer);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里贴上我的代码运行部分截图</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307090031836.png"></p><p>与前面的进行对比，会发现RVA_Address加上实际ImageBase 0x10000后就是需要重定位的地址啦。</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307082351108.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构（七）</title>
    <link href="/2023/07/07/PE_6/"/>
    <url>/2023/07/07/PE_6/</url>
    
    <content type="html"><![CDATA[<p>导出表</p><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>目前我们已经完成对PE基本结构的解析，了解PE各个头的主要成员，并基于对这些头的理解，对PE文件进行一些改动。如果完成之前的练习，相信你一定对PE文件头的组成已经有了深刻的认识，而且对于C语言指针的理解也一定深入一个层次（：</p><p>然而PE文件最为复杂结构还没有真正现身，即重定位表、导入表、导出表，这三张表比之前所有的加起来都还要复杂，它们也是PE文件能够正常运行的关键所在，接下来就慢慢深入探究吧</p><h2 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h2><p>在学习这几张表之前还需要一些个知识的铺垫</p><h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>当我们在写程序的时候，总会面临代码复用的问题，常见的解决办法是将相关函数进行一个封装单独放在一个文件里面，然后再在主工程里面使用一个头文件include进来</p><p>![](C:\Users\yongrin\Desktop\截屏2023-07-06 14.42.05.png)</p><p>那么这个时候会一个问题，就是别人也想用这个代码，或者其他工程也想用这些代码怎么办呢，可能会想说那我直接复制一份不就好了嘛。但显然这样不够优雅，有没有一种方式可以打包这些代码，然后其他程序直接使用呢？</p><p>答案当然是可以的，就是把这些代码打包成一个lib文件，具体操作可以看<a href="https://blog.csdn.net/nnKevi/article/details/122552542">这篇文章</a>。这里是使用DevC++创建的lib文件，当然也可以使用其他编译工具，但是我觉得DevC++是比较方便的。</p><p>这样就可以很方便的复用代码，并且别人也可以使用啦</p><h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>那静态链接可以如此方便的复用代码，有没有什么问题呢？比如说发现在lib文件里有一个函数写错了，这时候就不得不重新编译一个lib文件，然后对使用的此lib的程序都需要重新编译，这个在大的工程里面的还是代价还是很大的。</p><p>因为静态链接就相当于把lib文件里的函数一股脑全部怼进工程里面，与自己复制代码得到的程序没什么两样，编译完成后里面的函数就不会发生变化。这也是称其为静态链接的原因，也是因为不会发生变化，所以整个程序都需要重新编译。</p><p>那么有没有一种做法可以在不更改工程的同时，对其使用到的函数进行修正呢？动态链接就是解决此问题的，可以参考<a href="https://blog.csdn.net/L_Mu2000/article/details/115418810">这篇文章</a>制作一个动态链接库并导出其中函数使用。</p><h3 id="IMAGE-DATA-DIRECTORY"><a href="#IMAGE-DATA-DIRECTORY" class="headerlink" title="IMAGE_DATA_DIRECTORY"></a>IMAGE_DATA_DIRECTORY</h3><p>可选头的最后一个成员是一个结构体数组，这个数组存储了各种表的的地址，包括导出表、导入表、重定位表等。每一个结构体都是相同的，包含两个成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DATA_DIRECTORY</span> &#123;</span><br>DWORD　VirtualAddress; <span class="hljs-comment">//相对虚拟地址</span><br>DWORD　Size;　　　　　 <span class="hljs-comment">//大小</span><br>&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;<br></code></pre></td></tr></table></figure><p>第一个成员就是该表的地址，第二个成员就该表的大小，但实际上每一张表都有自己统计大小的方法，这个Size字段没有用处，可以被任意修改。</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307071826259.jpg"></p><p>可以使用以下代码遍历整个结构体数组，并得到每一个表的RVA</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Size</span><span class="hljs-params">(FILE* fp)</span>&#123;<br>    <span class="hljs-type">int</span> size = <span class="hljs-number">0</span>;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    size = ftell(fp);<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Data_Directoy</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer)</span><br>&#123;<br>PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS32 NTHeader = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//这里用了PIMAGE_NT_HEADERS32 对应于32位文件，必须使用</span><br>PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER32 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    FILEHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER32)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br><br><br>    DWORD* Data_Directory = (DWORD*)OptionalHeader-&gt;DataDirectory;<br>    <span class="hljs-type">int</span> number = OptionalHeader-&gt;NumberOfRvaAndSizes;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;EXPORT Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IMPORT Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RESOURCE Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;EXCEPTION Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">4</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SECURITY Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BASERELOC Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DEBUG Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">7</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;COPYRIGHT Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;GLOBALPTR Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">9</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TLS Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">10</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LOAD_CONFIG Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i ==<span class="hljs-number">11</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BOUND_IMPORT Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">12</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IAT Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">13</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DELAY_IMPORT Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">14</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;COM_DESCRIPTOR Directory:\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">15</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Reserved Directory:\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RVA: %X\nSize: %X\n=====================&quot;</span>, *(Data_Directory + <span class="hljs-number">2</span> * i), *(Data_Directory + <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* buffer;<br><br>    FILE* fp = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">errno_t</span> err_1 = fopen_s(&amp;fp, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\PE_info.exe&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <br>    <span class="hljs-comment">//将文件读取到程序中</span><br>    <span class="hljs-type">int</span> size = Size(fp);<br>    buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<br>    fread(buffer,size,<span class="hljs-number">1</span>,fp);<br><br>    Data_Directoy(buffer);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h2><h3 id="什么是导出表"><a href="#什么是导出表" class="headerlink" title="什么是导出表"></a>什么是导出表</h3><p>一个exe中，可能会动态链接一些库，那么这些库就得告诉别的exe有什么函数可以供其使用，要告知别的exe这些函数相关信息，比如名字、地址等等，因此就需要一张表来记录这些信息，就相当于是一个指南，告诉别人我能提供什么函数，你可以怎样找到这些函数。IMAGE_DATA_DIRECTORY的第一个成员指向的就是导出表。</p><p>然而要注意的是，并不是DLL才有导出表，exe同样也可以有导出表，它也能提供函数给别的exe使用</p><h3 id="导出表结构"><a href="#导出表结构" class="headerlink" title="导出表结构"></a>导出表结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span><br>        DWORD   Characteristics;<span class="hljs-comment">//没用</span><br>        DWORD   TimeDateStamp;<span class="hljs-comment">//时间戳</span><br>        WORD    MajorVersion;<span class="hljs-comment">//没用</span><br>        WORD    MinorVersion;<span class="hljs-comment">//没用</span><br>        DWORD   Name;<span class="hljs-comment">//指向导出表文件名 RVA --&gt;FOA+FileBuff=char *name;</span><br>        DWORD   Base;<span class="hljs-comment">//导出函数起始序号</span><br>        DWORD   NumberOfFunctions;<span class="hljs-comment">//导出函数个数</span><br>        DWORD   NumberOfNames;<span class="hljs-comment">//以名称导出函数个数</span><br>        DWORD   AddressOfFunctions;<span class="hljs-comment">//导出函数地址表 RVA--&gt;FOA +FileBuff         </span><br>DWORD   AddressOfNames;    <span class="hljs-comment">//导出函数名称表     // RVA from base of image</span><br>        DWORD   AddressOfNameOrdinals; <span class="hljs-comment">//导出函数序号表 // RVA from base of image</span><br>&#125; IMAGE_EXPORT_DIRECTORY, * PIMAGE_EXPORT_DIRECTORY;<br></code></pre></td></tr></table></figure><ul><li><p>Name 存储指向自己文件名字的地址，是一个RVA</p></li><li><p>Base</p><p>在创造dll的过程中，我们可以使用def文件来手动决定导出函数序号</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307072055509.png"></p><p>其中里面最小的那个序号就是Base。这里面的序号也可以是随意的无序的，序号后面，也可以再加一个NONAME，那么这个函数在导出的时候就不会有名字，只能通过序号来使用它。</p></li><li><p>NumberOfFunctions 导出函数个数，是指所有函数的个数，包括使用无名函数导出的</p></li><li><p>NumberOfNames 以名字导出函数个数</p></li><li><p>AddressOfFunctions：存储一个RVA地址，指向一张存有所有函数地址的表，个数由NumberOfFunctions决定，以下称为地址表</p></li><li><p>AddressOfNames：存储一个RVA地址，指向一张存有所有函数名字地址的表，个数由NumberOfNames 决定，以下称为名称地址表</p></li><li><p>AddressOfNameOrdinals：存储一个地址，指向一张存有所有函数序号的表，个数与AddressOfNames相同，以下称为序号表</p></li></ul><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307072016159.png"></p><p>NOTE：</p><ul><li><p>NumberOfFunctions计算方式。之前提及，在使用def导出函数序号时，我们可以随意决定函数序号，而NumberOfFunctions就依赖这些序号计算。具体地，它会用<strong>最大的序号 - 最小的序号 + 1</strong>这个公式来计算。也就是说，NumberOfFunctions并不一定就是实际导出函数个数</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307072233229.jpg"></p></li><li><p>地址表与名称地址表大小不一定。通常情况下地址表会大于名称地址表，因为地址表是由所有函数地址，名称表只是以名字导出的函数。但也是也可以让两个函数名字指向同一个函数，这种情况下名称地址表就有可能大于地址表</p></li><li><p>在导出函数的时候可以通过使用def文件的方式更改dll函数导出序号，但是def里的序号与序号表里序号并不是一样的，而是序号表的序号 &#x3D; def的序号 + base</p></li><li><p>使用名字找一个函数流程。现在要找一个名为“ADD”的函数，其流程如下</p><ul><li>遍历名称地址表，从中一个一个比对，找到对应的函数，得到名称地址表的索引</li><li>使用相同索引在序号表里得到序号</li><li>以得到的序号为索引，在地址表里得到函数地址</li></ul></li><li><p>使用序号找一个函数流程。现在要找一个序号10的函数，其流程如下</p><ul><li>直接用序号减base得到索引</li><li>使用索引在地址表里得到函数地址</li></ul></li></ul><h3 id="遍历导出表"><a href="#遍历导出表" class="headerlink" title="遍历导出表"></a>遍历导出表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span> <span class="hljs-title function_">Export_Table</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER64 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    NTHeader = (PIMAGE_NT_HEADERS)(Buffer + DosHeader-&gt;e_lfanew);<br>    FILEHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER64)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br><br>    DWORD Export_Table_RVA = OptionalHeader-&gt;DataDirectory[<span class="hljs-number">0</span>].VirtualAddress;<br><br>    <span class="hljs-keyword">if</span>(Export_Table_RVA == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This PE File Has Not Export Table!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    DWORD Export_Table_FOA = RVA_TO_FOA(Export_Table_RVA,Buffer);<br>    PIMAGE_EXPORT_DIRECTORY _Export_Table = (PIMAGE_EXPORT_DIRECTORY)(Buffer + Export_Table_FOA);<br><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Characteristics: %#x\n&quot;</span>, _Export_Table-&gt;Characteristics);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TimeDateStamp: %#x\n&quot;</span>, _Export_Table-&gt;TimeDateStamp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MajorVersion: %#x\n&quot;</span>, _Export_Table-&gt;MajorVersion);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MinorVersion: %#x\n&quot;</span>, _Export_Table-&gt;MinorVersion);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Name: %s\n&quot;</span>, (Buffer + RVA_TO_FOA(_Export_Table-&gt;Name, Buffer)));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base: %#x\n&quot;</span>, _Export_Table-&gt;Base);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NumberOfFunctions: %#x\n&quot;</span>, _Export_Table-&gt;NumberOfFunctions);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NumberOfNames: %#x\n&quot;</span>, _Export_Table-&gt;NumberOfNames);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;AddressOfFunctions: %#x\n&quot;</span>, _Export_Table-&gt;AddressOfFunctions);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;AddressOfNames: %#x\n&quot;</span>, _Export_Table-&gt;AddressOfNames);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;AddressOfNameOrdinals: %#x\n&quot;</span>, _Export_Table-&gt;AddressOfNameOrdinals);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;==========函数地址表 AddressOfFuncitons==========\n&quot;</span>);<br>    DWORD* AddressOfFuncitons = (DWORD*)(Buffer + RVA_TO_FOA(_Export_Table-&gt;AddressOfFunctions,Buffer));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _Export_Table-&gt;NumberOfFunctions;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下标：%d 函数地址：%x\n&quot;</span>, i , *(AddressOfFuncitons + i));<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;==========序号表 AddressOfOrdinals==========\n&quot;</span>);<br>    WORD* AddressOfOrdinals = (WORD*)(Buffer +  RVA_TO_FOA(_Export_Table-&gt;AddressOfNameOrdinals,Buffer));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _Export_Table-&gt;NumberOfNames; i++)<br>    &#123;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下标：%d 序号：%x\n&quot;</span>, i , *(AddressOfOrdinals + i));<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;==========函数名称表 AddressOfNames==========\n&quot;</span>);<br>    DWORD* AddressOfNames = (DWORD*)(Buffer + RVA_TO_FOA(_Export_Table-&gt;AddressOfNames,Buffer));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _Export_Table-&gt;NumberOfNames;i++)&#123;<br>        <span class="hljs-type">char</span>* nameaddres = Buffer + RVA_TO_FOA(*(AddressOfNames + i),Buffer);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下标：%d 函数名称：%s\n&quot;</span>, i ,nameaddres);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="根据函数名称找函数"><a href="#根据函数名称找函数" class="headerlink" title="根据函数名称找函数"></a>根据函数名称找函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">GetFuncAddrByName</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer,<span class="hljs-type">char</span>* name)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER64 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    NTHeader = (PIMAGE_NT_HEADERS)(Buffer + DosHeader-&gt;e_lfanew);<br>    FILEHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER64)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br><br>    DWORD Export_Table_RVA = OptionalHeader-&gt;DataDirectory[<span class="hljs-number">0</span>].VirtualAddress;<br><br>    <span class="hljs-keyword">if</span>(Export_Table_RVA == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This PE File Has Not Export Table!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    DWORD Export_Table_FOA = RVA_TO_FOA(Export_Table_RVA,Buffer);<br>    PIMAGE_EXPORT_DIRECTORY _Export_Table = (PIMAGE_EXPORT_DIRECTORY)(Buffer + Export_Table_FOA);<br>    <br>    <span class="hljs-comment">//函数地址表</span><br>    DWORD* AddressOfFuncitons = (DWORD*)(Buffer + RVA_TO_FOA(_Export_Table-&gt;AddressOfFunctions,Buffer));<br>    <span class="hljs-comment">//序号表</span><br>    WORD* AddressOfOrdinals = (WORD*)(Buffer +  RVA_TO_FOA(_Export_Table-&gt;AddressOfNameOrdinals,Buffer));<br>    <span class="hljs-comment">//函数名称表</span><br>    DWORD* AddressOfNames = (DWORD*)(Buffer + RVA_TO_FOA(_Export_Table-&gt;AddressOfNames,Buffer));<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _Export_Table-&gt;NumberOfNames;i++)&#123;<br>        <span class="hljs-type">char</span>* nameaddr = Buffer + RVA_TO_FOA(*(AddressOfNames + i),Buffer);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(name,nameaddr))&#123;<br>            <span class="hljs-type">int</span> ordinal = *(AddressOfOrdinals + i);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s found: %x\n&quot;</span>,name,*(AddressOfFuncitons + ordinal));<br>                <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Func Not Found\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="根据函数序号找函数"><a href="#根据函数序号找函数" class="headerlink" title="根据函数序号找函数"></a>根据函数序号找函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span> <span class="hljs-title function_">GetFuncAddrByOrd</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer,<span class="hljs-type">int</span> Ord)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER64 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    NTHeader = (PIMAGE_NT_HEADERS)(Buffer + DosHeader-&gt;e_lfanew);<br>    FILEHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER64)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br><br>    DWORD Export_Table_RVA = OptionalHeader-&gt;DataDirectory[<span class="hljs-number">0</span>].VirtualAddress;<br><br>    <span class="hljs-keyword">if</span>(Export_Table_RVA == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This PE File Has Not Export Table!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    DWORD Export_Table_FOA = RVA_TO_FOA(Export_Table_RVA,Buffer);<br>    PIMAGE_EXPORT_DIRECTORY _Export_Table = (PIMAGE_EXPORT_DIRECTORY)(Buffer + Export_Table_FOA);<br>    <br>    <span class="hljs-comment">//函数地址表</span><br>    DWORD* AddressOfFuncitons = (DWORD*)(Buffer + RVA_TO_FOA(_Export_Table-&gt;AddressOfFunctions,Buffer));<br>    <span class="hljs-type">int</span> base = _Export_Table-&gt;Base;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;base: %d\n&quot;</span>,base);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d found: %x\n&quot;</span>,Ord,*(AddressOfFuncitons + Ord-base));<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br>DWORD <span class="hljs-title function_">Size</span><span class="hljs-params">(FILE* fp)</span>&#123;<br>    DWORD size = <span class="hljs-number">0</span>;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    size = ftell(fp);<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><br>DWORD <span class="hljs-title function_">RVA_TO_FOA</span><span class="hljs-params">(DWORD RVA,<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>   PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FileHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    FileHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br>    <br>    <span class="hljs-keyword">if</span> (RVA &lt; OptionalHeader-&gt;SizeOfHeaders)<br>&#123;<br><span class="hljs-keyword">return</span> RVA;<br>&#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;FileHeader-&gt;NumberOfSections<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(RVA &gt;= SectionHeader-&gt;VirtualAddress &amp;&amp; RVA &lt; (SectionHeader+<span class="hljs-number">1</span>)-&gt;VirtualAddress)&#123;<br>            DWORD offset = RVA - SectionHeader-&gt;VirtualAddress;<br>            <span class="hljs-keyword">return</span> SectionHeader-&gt;PointerToRawData + offset;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            SectionHeader +=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>     <span class="hljs-comment">//最后一个节区</span><br>    SectionHeader +=<span class="hljs-number">1</span>;<br>    DWORD offset = RVA - SectionHeader-&gt;VirtualAddress;<br>    <span class="hljs-keyword">return</span> SectionHeader-&gt;PointerToRawData + offset;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">GetFuncAddrByName</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer,<span class="hljs-type">char</span>* name)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER64 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    NTHeader = (PIMAGE_NT_HEADERS)(Buffer + DosHeader-&gt;e_lfanew);<br>    FILEHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER64)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br><br>    DWORD Export_Table_RVA = OptionalHeader-&gt;DataDirectory[<span class="hljs-number">0</span>].VirtualAddress;<br><br>    <span class="hljs-keyword">if</span>(Export_Table_RVA == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This PE File Has Not Export Table!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    DWORD Export_Table_FOA = RVA_TO_FOA(Export_Table_RVA,Buffer);<br>    PIMAGE_EXPORT_DIRECTORY _Export_Table = (PIMAGE_EXPORT_DIRECTORY)(Buffer + Export_Table_FOA);<br>    <br>    <span class="hljs-comment">//函数地址表</span><br>    DWORD* AddressOfFuncitons = (DWORD*)(Buffer + RVA_TO_FOA(_Export_Table-&gt;AddressOfFunctions,Buffer));<br>    <span class="hljs-comment">//序号表</span><br>    WORD* AddressOfOrdinals = (WORD*)(Buffer +  RVA_TO_FOA(_Export_Table-&gt;AddressOfNameOrdinals,Buffer));<br>    <span class="hljs-comment">//函数名称表</span><br>    DWORD* AddressOfNames = (DWORD*)(Buffer + RVA_TO_FOA(_Export_Table-&gt;AddressOfNames,Buffer));<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _Export_Table-&gt;NumberOfNames;i++)&#123;<br>        <span class="hljs-type">char</span>* nameaddr = Buffer + RVA_TO_FOA(*(AddressOfNames + i),Buffer);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(name,nameaddr))&#123;<br>            <span class="hljs-type">int</span> ordinal = *(AddressOfOrdinals + i);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s found: %x\n&quot;</span>,name,*(AddressOfFuncitons + ordinal));<br>                <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Func Not Found\n&quot;</span>);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">GetFuncAddrByOrd</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer,<span class="hljs-type">int</span> Ord)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER64 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    NTHeader = (PIMAGE_NT_HEADERS)(Buffer + DosHeader-&gt;e_lfanew);<br>    FILEHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER64)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br><br>    DWORD Export_Table_RVA = OptionalHeader-&gt;DataDirectory[<span class="hljs-number">0</span>].VirtualAddress;<br><br>    <span class="hljs-keyword">if</span>(Export_Table_RVA == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This PE File Has Not Export Table!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    DWORD Export_Table_FOA = RVA_TO_FOA(Export_Table_RVA,Buffer);<br>    PIMAGE_EXPORT_DIRECTORY _Export_Table = (PIMAGE_EXPORT_DIRECTORY)(Buffer + Export_Table_FOA);<br>    <br>    <span class="hljs-comment">//函数地址表</span><br>    DWORD* AddressOfFuncitons = (DWORD*)(Buffer + RVA_TO_FOA(_Export_Table-&gt;AddressOfFunctions,Buffer));<br>    <span class="hljs-type">int</span> base = _Export_Table-&gt;Base;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;base: %d\n&quot;</span>,base);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d found: %x\n&quot;</span>,Ord,*(AddressOfFuncitons + Ord-base));<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Export_Table</span><span class="hljs-params">(<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER64 OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    NTHeader = (PIMAGE_NT_HEADERS)(Buffer + DosHeader-&gt;e_lfanew);<br>    FILEHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER64)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br><br>    DWORD Export_Table_RVA = OptionalHeader-&gt;DataDirectory[<span class="hljs-number">0</span>].VirtualAddress;<br><br>    <span class="hljs-keyword">if</span>(Export_Table_RVA == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This PE File Has Not Export Table!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    DWORD Export_Table_FOA = RVA_TO_FOA(Export_Table_RVA,Buffer);<br>    PIMAGE_EXPORT_DIRECTORY _Export_Table = (PIMAGE_EXPORT_DIRECTORY)(Buffer + Export_Table_FOA);<br><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Characteristics: %#x\n&quot;</span>, _Export_Table-&gt;Characteristics);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TimeDateStamp: %#x\n&quot;</span>, _Export_Table-&gt;TimeDateStamp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MajorVersion: %#x\n&quot;</span>, _Export_Table-&gt;MajorVersion);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MinorVersion: %#x\n&quot;</span>, _Export_Table-&gt;MinorVersion);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Name: %s\n&quot;</span>, (Buffer + RVA_TO_FOA(_Export_Table-&gt;Name, Buffer)));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Base: %#x\n&quot;</span>, _Export_Table-&gt;Base);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NumberOfFunctions: %#x\n&quot;</span>, _Export_Table-&gt;NumberOfFunctions);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NumberOfNames: %#x\n&quot;</span>, _Export_Table-&gt;NumberOfNames);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;AddressOfFunctions: %#x\n&quot;</span>, _Export_Table-&gt;AddressOfFunctions);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;AddressOfNames: %#x\n&quot;</span>, _Export_Table-&gt;AddressOfNames);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;AddressOfNameOrdinals: %#x\n&quot;</span>, _Export_Table-&gt;AddressOfNameOrdinals);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;==========函数地址表 AddressOfFuncitons==========\n&quot;</span>);<br>    DWORD* AddressOfFuncitons = (DWORD*)(Buffer + RVA_TO_FOA(_Export_Table-&gt;AddressOfFunctions,Buffer));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _Export_Table-&gt;NumberOfFunctions;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下标：%d 函数地址：%x\n&quot;</span>, i , *(AddressOfFuncitons + i));<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;==========序号表 AddressOfOrdinals==========\n&quot;</span>);<br>    WORD* AddressOfOrdinals = (WORD*)(Buffer +  RVA_TO_FOA(_Export_Table-&gt;AddressOfNameOrdinals,Buffer));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _Export_Table-&gt;NumberOfNames; i++)<br>    &#123;<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下标：%d 序号：%x\n&quot;</span>, i , *(AddressOfOrdinals + i));<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;==========函数名称表 AddressOfNames==========\n&quot;</span>);<br>    DWORD* AddressOfNames = (DWORD*)(Buffer + RVA_TO_FOA(_Export_Table-&gt;AddressOfNames,Buffer));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; _Export_Table-&gt;NumberOfNames;i++)&#123;<br>        <span class="hljs-type">char</span>* nameaddres = Buffer + RVA_TO_FOA(*(AddressOfNames + i),Buffer);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下标：%d 函数名称：%s\n&quot;</span>, i ,nameaddres);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* buffer;<br><br>    FILE* fp1 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">errno_t</span> err_1 = fopen_s(&amp;fp1, <span class="hljs-string">&quot;C:\\Program Files\\Microsoft SQL Server Compact Edition\\v4.0\\sqlceme40.dll&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br><br>    DWORD size = Size(fp1);<br>    buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<br>    fread(buffer,size,<span class="hljs-number">1</span>,fp1);<br><br>    <span class="hljs-type">char</span>* func_name = <span class="hljs-string">&quot;DllRelease&quot;</span>;<br>    <span class="hljs-type">int</span> func_ord  = <span class="hljs-number">2</span>;<br>    Export_Table(buffer);<br>    GetFuncAddrByName(buffer,func_name);<br>    GetFuncAddrByOrd(buffer,func_ord);<br>&#125;<br></code></pre></td></tr></table></figure><p>NOTE：</p><ul><li>可以自己制作简单dll实验，也可以使用其他软件的dll</li><li>实际上，<code>GetFuncByName</code> 和 <code>GetFuncByOrd</code> 就相当于实现了之前调用dll时使用的一个系统函数 <code>GetProcAddress</code></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>导出表位于<code>IMAGE_DATA_DIRECTORY</code>的第一项，主要有以下几个成员</p><blockquote><p>​    DWORD   Base;&#x2F;&#x2F;导出函数起始序号<br>​    DWORD   NumberOfFunctions;       &#x2F;&#x2F;导出函数个数<br>​    DWORD   NumberOfNames；        &#x2F;&#x2F;以名称导出函数个数<br>​    DWORD   AddressOfFunctions;      &#x2F;&#x2F;导出函数地址表<br>​DWORD   AddressOfNames;      &#x2F;&#x2F;导出函数名称表<br>​    DWORD   AddressOfNameOrdinals; &#x2F;&#x2F;导出函数序号表 </p></blockquote><ul><li><p>Base 是导出序号里面最小的那个</p></li><li><p>NumberOfFuncitons &#x3D; 最大导出序号 - 最小导出序号 + 1</p></li><li><p>NumberOfNames &#x3D; 以名字导出函数个数</p></li><li><p>AddressOfFunctions，AddressOfNames，AddressOfNameOrdinals均是RVA，各自再指向一张表</p><ul><li><p>AddressOfFunctions 指向所有函数地址表，这里面函数地址也是RVA，</p></li><li><p>AddressOfNames 指向函数名称表，里面存储的是函数名字地址的RVA</p></li><li><p>AddressOfNameOrdinals 指向函数序号</p></li><li></li><li><p>AddressOfFunctions  数量 &#x3D; NumberOfFuncitons </p></li><li><p>AddressOfNames  数量 &#x3D; AddressOfNameOrdinals  数量 &#x3D; NumberOfNames</p></li></ul></li><li><p>使用名字找一个函数流程，其流程如下</p><ul><li>遍历名称地址表，从中一个一个比对，找到对应的函数，得到名称地址表的索引</li><li>使用相同索引在序号表里得到序号</li><li>以得到的序号为索引，在地址表里得到函数地址</li></ul></li><li><p>使用序号找一个函数流程，其流程如下</p><ul><li>直接用序号减base得到索引</li><li>使用索引在地址表里得到函数地址</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构（六）</title>
    <link href="/2023/07/04/PE_5/"/>
    <url>/2023/07/04/PE_5/</url>
    
    <content type="html"><![CDATA[<p>PE练习，扩大节、合并节</p><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>此前已经在一个节的空白区增加shellcode，而后又通过新增一个节的方式增加shellcode，实际上也可以通过对节进行合并、扩大操作来满足其他需求</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1.扩大最后一个节</p><p>2.合并所有节</p><h3 id="要求解决的问题"><a href="#要求解决的问题" class="headerlink" title="要求解决的问题"></a>要求解决的问题</h3><h4 id="扩大最后一个节"><a href="#扩大最后一个节" class="headerlink" title="扩大最后一个节"></a>扩大最后一个节</h4><p>Q1：为什么是扩大最后一个节</p><p>A1：如果扩大中间的节，那么后面的节的地址就会全部变化，所有地址就全都无法正常使用，而扩大最后一个节则不会影响已有地址</p><p>Q2：扩大多少合适</p><p>A2：最好也是文件对齐FileAlignmentr和内存对齐SectionAlignment的倍数，这样可以减少很多麻烦，就可以直接在原文件状态下扩大，而不需要再考虑对齐。</p><p>Q3：需要修改什么值</p><p>A3：跟大小有关的值都需要修改，OptionalHeader里的SizeOfImage，最后一个节目录项的Misc、SizeOfRawData、</p><h4 id="合并所有节"><a href="#合并所有节" class="headerlink" title="合并所有节"></a>合并所有节</h4><p>Q1：应该在哪种状态下合并</p><p>A1：只能在内存状态下合并，因为合并所有节后，只有一个节目录项，只能通过这个去找节区。如果在文件状态下合并，那么后面的节区都不能正确放到它们该处的位置上。而后直接将内存状态保存为文件状态，也就是说这时候文件状态就已经是内存对齐的了。</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307012317292.png"></p><p>Q2：需要修改哪些值</p><p>A2：FileHeader里的NumberOfSections改为1；因为文件状态就是内存状态所以第一个节目录项的Misc、PointerToRawData需要按照内存状态下改变。属性值也需要修改，因为是合并所有节，那么就应该具有所有节的属性</p><p>Q3：文件大小该如何确定</p><p>A3：可以很方便的使用OptionalHeader里的SizeOfImage减去第一个节表开始地方，剩下就都是合并节后的大小了，还需要将第一个节目录项的SizeOfRawData改为这个大小。</p><p>note：最后需要其他节目录项清零；fwrite的时候size要选为SizeOfImageHeader；实际上在Windows看来并不存在这些节的划分，只是人为通过不同的属性来划分，每一个节干特定的事，因此只需要把所有节属性都加上去，程序就一定可以正常运行，这是合并节可行的底层逻辑。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> EnlargeSize 0x1000</span><br>DWORD <span class="hljs-title function_">Size</span><span class="hljs-params">(FILE* fp)</span>&#123;<br>    DWORD size = <span class="hljs-number">0</span>;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    size = ftell(fp);<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">FileToImage</span><span class="hljs-params">(<span class="hljs-type">char</span>* filebuffer)</span>&#123;<br><br>    <span class="hljs-comment">//定义一些指针</span><br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FileHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">char</span>* TemBuffer = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//简单判断有效性</span><br>    <span class="hljs-keyword">if</span> (!filebuffer)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid buffer!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (*(PWORD)filebuffer != IMAGE_DOS_SIGNATURE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;not a PE file!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>    <span class="hljs-comment">//开始赋值相应指针</span><br>    DosHeader = (PIMAGE_DOS_HEADER)filebuffer;<br>NTHeader = (PIMAGE_NT_HEADERS)  (filebuffer + DosHeader-&gt;e_lfanew);<br>FileHeader = (PIMAGE_FILE_HEADER)(filebuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(filebuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(filebuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br>    <span class="hljs-comment">//申请内存中大小</span><br>TemBuffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(OptionalHeader-&gt;SizeOfImage);<br><br>    <span class="hljs-comment">//初始化并复制头部数据</span><br>    <span class="hljs-built_in">memset</span>(TemBuffer,<span class="hljs-number">0</span>,OptionalHeader-&gt;SizeOfImage);<br>    <span class="hljs-built_in">memcpy</span>(TemBuffer,DosHeader,OptionalHeader-&gt;SizeOfHeaders);<br><br>    <span class="hljs-comment">//开始复制节区数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;FileHeader-&gt;NumberOfSections;i++)&#123;<br>        <span class="hljs-built_in">memcpy</span>((TemBuffer + SectionHeader-&gt;VirtualAddress),(filebuffer + SectionHeader-&gt;PointerToRawData),SectionHeader-&gt;SizeOfRawData);<br><span class="hljs-comment">//更新为下一个节区的结构体</span><br><span class="hljs-comment">// SectionHeader = (PIMAGE_SECTION_HEADER)(filebuffer + DosHeader-&gt;e_lfanew + 4 + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader + 40 * (i + 1));</span><br>SectionHeader +=<span class="hljs-number">1</span>;<br>&#125;<br><br>    <span class="hljs-keyword">return</span> TemBuffer;<br>&#125;<br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">Enlage</span><span class="hljs-params">(<span class="hljs-type">char</span>* buffer)</span>&#123;<br><span class="hljs-comment">//原buffer的头部信息</span><br>PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FileHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>DosHeader = (PIMAGE_DOS_HEADER)buffer;<br>NTHeader = (PIMAGE_NT_HEADERS) (buffer + DosHeader-&gt;e_lfanew);<br>FileHeader = (PIMAGE_FILE_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br><br><span class="hljs-comment">// char* ImageBuffer = FileToImage(buffer);</span><br><br><span class="hljs-type">char</span>* NewBuffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(OptionalHeader-&gt;SizeOfImage + EnlargeSize);<br><span class="hljs-built_in">memset</span>(NewBuffer,<span class="hljs-number">0</span>,OptionalHeader-&gt;SizeOfImage + EnlargeSize);<br><span class="hljs-built_in">memcpy</span>(NewBuffer,buffer,OptionalHeader-&gt;SizeOfImage);<br><br>DosHeader = (PIMAGE_DOS_HEADER)NewBuffer;<br>NTHeader = (PIMAGE_NT_HEADERS) (NewBuffer + DosHeader-&gt;e_lfanew);<br>FileHeader = (PIMAGE_FILE_HEADER)(NewBuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(NewBuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(NewBuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br><br>PIMAGE_SECTION_HEADER LastSectionHeader = SectionHeader + FileHeader-&gt;NumberOfSections <span class="hljs-number">-1</span>;<br>DWORD LastSize = LastSectionHeader-&gt;Misc.VirtualSize &gt; LastSectionHeader-&gt;SizeOfRawData?LastSectionHeader-&gt;Misc.VirtualSize : LastSectionHeader-&gt;SizeOfRawData;<br><br>LastSectionHeader-&gt;Misc.VirtualSize = LastSize + EnlargeSize;<br>LastSectionHeader-&gt;SizeOfRawData = LastSize + EnlargeSize;<br>OptionalHeader-&gt;SizeOfImage += EnlargeSize;<br><br><span class="hljs-keyword">return</span> NewBuffer;<br><br>&#125;<br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">Merge</span><span class="hljs-params">(<span class="hljs-type">char</span>* buffer,DWORD &amp;size)</span>&#123;<br><br><span class="hljs-type">char</span>* ImageBuffer = FileToImage(buffer);<br><br>PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FileHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER NextSectionHeader =<span class="hljs-literal">NULL</span>;<br><br>DosHeader = (PIMAGE_DOS_HEADER)ImageBuffer;<br>NTHeader = (PIMAGE_NT_HEADERS) (ImageBuffer + DosHeader-&gt;e_lfanew);<br>FileHeader = (PIMAGE_FILE_HEADER)(ImageBuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(ImageBuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(ImageBuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br><br>SectionHeader-&gt;Misc.VirtualSize = OptionalHeader-&gt;SizeOfImage - SectionHeader-&gt;VirtualAddress;<br>SectionHeader-&gt;SizeOfRawData = OptionalHeader-&gt;SizeOfImage - SectionHeader-&gt;VirtualAddress;<br>SectionHeader-&gt;PointerToRawData = SectionHeader-&gt;VirtualAddress;<br>NextSectionHeader = SectionHeader;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;FileHeader-&gt;NumberOfSections;i++)&#123;<br>NextSectionHeader += <span class="hljs-number">1</span>;<br>SectionHeader-&gt;Characteristics |= NextSectionHeader-&gt;Characteristics; <br>&#125;<br><br>FileHeader-&gt;NumberOfSections = <span class="hljs-number">1</span>;<br><br><span class="hljs-built_in">memset</span>(NextSectionHeader,<span class="hljs-number">0</span>,IMAGE_SIZEOF_SECTION_HEADER * (FileHeader-&gt;NumberOfSections <span class="hljs-number">-1</span>));<br>size = OptionalHeader-&gt;SizeOfImage;<br><span class="hljs-keyword">return</span> ImageBuffer;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">char</span>* buffer;<br><br>    FILE* fp1 = <span class="hljs-literal">NULL</span>;<br>FILE* fp2 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">errno_t</span> err_1 = fopen_s(&amp;fp1, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\PE_info.exe&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-type">errno_t</span> err_2 = fopen_s(&amp;fp2, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\PE_info_changed.exe&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br><br>    DWORD size = Size(fp1);<br>    buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<br>    fread(buffer,size,<span class="hljs-number">1</span>,fp1);<br><br><span class="hljs-type">char</span>* newbuffer;<br><span class="hljs-comment">// newbuffer = Enlage(buffer);</span><br>newbuffer = Merge(buffer,size);<br><br>fwrite(newbuffer,size,<span class="hljs-number">1</span>,fp2);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构（五）</title>
    <link href="/2023/07/04/PE_4/"/>
    <url>/2023/07/04/PE_4/</url>
    
    <content type="html"><![CDATA[<p>PE练习，新增一个节并添加shellcode</p><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>前面已经手动在原代码区空白地方增加了shellcode，并且完成代码实现。但是往往要添加的shellcode不仅仅只有这么一点，那么就会面临代码空白区不够的地方，这时就可以考虑新增一个节，并在新增节里面添加shellcode</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1.新增一个节后，源文件可以正常运行</p><p>2.新增一个节后，添加原来的shellcode</p><h3 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题"></a>要解决的问题</h3><p>Q1：如何新增一个节</p><p>A1：应当立即想到的是要修改FileHeader里的NumberOfSections成员，将其加1</p><p>Q2：如何设置新增节各个成员的属性</p><p>A2：在新增节成员属性之前，需要考虑这样一个问题，即原来的头空间区域内是否还有足够空间增加一个节目录项。在Windows中，判断一个表是否遍历完的基本操作就是查看这个表项最后是否还有同样大小的0。比如判断字符串结束的标志是0，这里就是0x24个0，因为节目录项的大小就是40个字节。如果说SizeOfHeader的大小是0x1000，而已经使用的数据占0x976及以上，那么这个时候就没有足够空间再增加一个节目录项，只有已经使用数据项小于0x952才可以再增加一个节目录项，这样添加完后，就能保证末尾一定有0x24个0来结束。</p><p>note：你一定想问要是真的不够怎么办呢。是否还记得DOS头里有一个DOS stub的垃圾数据，这时就可以考虑把NT头后面的头们全部往上提，占据DOS stub，而且只需要修改DOS Header的e_lfanew成员就行。</p><p>一般来说，这样就已经可以解决99%的问题，那如果还是不够呢？其实也不一定非要增加一个节啦，还可以扩大一个节或者合并其他节的嘛，不过这是后面的内容了。</p><p>现在来考虑各个成员如何设置：</p><ul><li>Name  可以随意一个8字节内的字符串</li><li>Misc 和 SizeOfRawData，前者可以是一个不准确的值，后者是文件对齐后的大小，二者可以设为同样的值。那么这个值是不是随意的呢，理论上是的。但是为了对齐方便，最好是文件对齐FileAlignment和内存对齐SectionAlignment的公倍数，这样可以省下很多麻烦</li><li>VisualAddress：在内存中的起始位置，其实就是上一个节区的末尾位置。而上一个节区的末尾位置就是其VisualAddress + Misc 或者VisualAddress + SizeofRawData，两者要取大的那一个，然后再内存对齐的值就是新节区VisualAddress</li><li>PointerToRawData：在文件中的起始位置，算法与VisualAddress基本相同</li></ul><p>Q3：还应该改变哪些值</p><p>A3：在OptionalHeader中还有一个成员SizeOfImage记录内存大小，在新增一个节区后这个值自然就要变大。而之前提到新增的节区大小最好是文件对齐FileAlignment和内存对齐SectionAlignment的公倍数，这样的话SizeOfImage也可以直接加上这个值，不需要再做额外功夫</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADD_SIZE 0x1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ImgaeBase  0x10000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MessageBox_Addr 0x75C93D90</span><br>BYTE Shell[] = &#123;<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x00</span>,<br>           <span class="hljs-number">0xE8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<br>           <span class="hljs-number">0xe9</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>&#125;;<br><br><br>DWORD <span class="hljs-title function_">Size</span><span class="hljs-params">(FILE* fp)</span>&#123;<br>    DWORD size = <span class="hljs-number">0</span>;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    size = ftell(fp);<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><br>DWORD <span class="hljs-title function_">FOA_TO_RVA</span><span class="hljs-params">(DWORD FOA,<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>   PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FileHeader= <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    FileHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> +IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> +IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br><span class="hljs-keyword">if</span> (FOA &lt; OptionalHeader-&gt;SizeOfHeaders)<br>&#123;<br><span class="hljs-keyword">return</span> FOA;<br>&#125;<br><br>   <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;FileHeader-&gt;NumberOfSections<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(FOA &gt;= SectionHeader-&gt;PointerToRawData&amp;&amp; FOA &lt; (SectionHeader +<span class="hljs-number">1</span>)-&gt;PointerToRawData)&#123;<br>            <br>            DWORD offset = FOA - SectionHeader-&gt;PointerToRawData;<br>            <span class="hljs-keyword">return</span> SectionHeader-&gt;VirtualAddress + offset;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            SectionHeader += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//最后一个节区</span><br>    DWORD offset = FOA - SectionHeader-&gt;PointerToRawData;<br>    <span class="hljs-keyword">return</span> SectionHeader-&gt;VirtualAddress + offset;<br>&#125;<br><br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">Section_add</span><span class="hljs-params">(FILE* fp,<span class="hljs-type">char</span>* buffer)</span>&#123;<br>    DWORD size =  Size(fp);<br>    DWORD new_size = size + ADD_SIZE + <span class="hljs-number">0x100</span>;<br><br>    <span class="hljs-type">char</span>* NewBuffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(new_size);<br>    <span class="hljs-keyword">if</span> (!NewBuffer)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;failed to creat buffer!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-built_in">memset</span>(NewBuffer,<span class="hljs-number">0</span>,new_size);<br>    <span class="hljs-built_in">memcpy</span>(NewBuffer,buffer,size);<br><br>    <span class="hljs-comment">//初始化PE头部信息</span><br>DosHeader = (PIMAGE_DOS_HEADER)NewBuffer;<br>NTHeader = (PIMAGE_NT_HEADERS)(NewBuffer + DosHeader-&gt;e_lfanew);<br>FILEHeader = (PIMAGE_FILE_HEADER)(NewBuffer+DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(NewBuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(NewBuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader);<br><br>    <span class="hljs-comment">//最后一个节表地址</span><br>PIMAGE_SECTION_HEADER LastSection = (PIMAGE_SECTION_HEADER)(NewBuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader+IMAGE_SIZEOF_SECTION_HEADER*(FILEHeader-&gt;NumberOfSections<span class="hljs-number">-1</span>));<br><span class="hljs-comment">//新节表地址</span><br>PIMAGE_SECTION_HEADER NewSection = (PIMAGE_SECTION_HEADER)(NewBuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FILEHeader-&gt;SizeOfOptionalHeader + IMAGE_SIZEOF_SECTION_HEADER * (FILEHeader-&gt;NumberOfSections));<br><br>    <span class="hljs-comment">//判断剩余空间</span><br>    DWORD Remained_size = (DWORD)(OptionalHeader-&gt;SizeOfHeaders - DosHeader-&gt;e_lfanew - <span class="hljs-number">4</span><br>- IMAGE_SIZEOF_FILE_HEADER - IMAGE_SIZEOF_SECTION_HEADER * FILEHeader-&gt;NumberOfSections);<br><span class="hljs-keyword">if</span> (Remained_size &lt; <span class="hljs-number">2</span> * IMAGE_SIZEOF_SECTION_HEADER)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;do not have enough space!\n&quot;</span>);<br><span class="hljs-built_in">free</span>(NewBuffer);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>    <span class="hljs-comment">//===================修改信息====================</span><br><span class="hljs-comment">//其他头部需要修改的信息</span><br>FILEHeader-&gt;NumberOfSections += <span class="hljs-number">1</span>;<br>    OptionalHeader-&gt;SizeOfImage += ADD_SIZE;<br>    <br>    <span class="hljs-comment">//填入数据</span><br>    <span class="hljs-built_in">memcpy</span>(NewSection-&gt;Name,<span class="hljs-string">&quot;.NewSec&quot;</span>,<span class="hljs-number">8</span>);<br>    NewSection-&gt;Misc.VirtualSize = ADD_SIZE;<br>    NewSection-&gt;SizeOfRawData = ADD_SIZE;<br>    NewSection-&gt;PointerToRawData = LastSection-&gt;PointerToRawData + LastSection-&gt;SizeOfRawData;<br><br>DWORD add_size = LastSection-&gt;Misc.VirtualSize &gt; LastSection-&gt;SizeOfRawData ? LastSection-&gt;Misc.VirtualSize : LastSection-&gt;SizeOfRawData;<br><br>    NewSection-&gt;VirtualAddress = LastSection-&gt;VirtualAddress + add_size;<br><br>    <span class="hljs-comment">//找到开始的地方</span><br>    <span class="hljs-keyword">if</span> (NewSection-&gt;VirtualAddress % OptionalHeader-&gt;SectionAlignment)<br>&#123;<br>NewSection-&gt;VirtualAddress = NewSection-&gt;VirtualAddress / OptionalHeader-&gt;SectionAlignment * OptionalHeader-&gt;SectionAlignment +OptionalHeader-&gt;SectionAlignment;<br>&#125;<br><br>NewSection-&gt;Characteristics = <span class="hljs-number">0x60000020</span>;<br>    <span class="hljs-comment">//到这里就已经完成节的增加了</span><br><br>    <span class="hljs-comment">//插入shellcode</span><br>    <span class="hljs-type">char</span>* shell_begin = NewBuffer + NewSection-&gt;PointerToRawData;<br><br>DWORD begin_FOA = NewSection-&gt;PointerToRawData;<br><br><br>DWORD e8_FOA = begin_FOA + <span class="hljs-number">8</span>;<br>DWORD e9_FOA = e8_FOA + <span class="hljs-number">5</span>;<br><br>DWORD begin_RVA = FOA_TO_RVA(begin_FOA,NewBuffer);<br><span class="hljs-comment">//计算call地址的编码 即e8 xxxxx</span><br>DWORD e8_x_addr = MessageBox_Addr - (FOA_TO_RVA(e9_FOA,NewBuffer)+ImgaeBase);<br><span class="hljs-comment">//计算原oep的地址编码 即e9 xxxxx</span><br>DWORD e9_x_addr = OptionalHeader-&gt;AddressOfEntryPoint - (FOA_TO_RVA(e9_FOA,NewBuffer)+<span class="hljs-number">5</span>);<br><br><span class="hljs-comment">//先修改原OEP</span><br>OptionalHeader-&gt;AddressOfEntryPoint = NewSection-&gt;VirtualAddress;<br>    <span class="hljs-comment">// OptionalHeader-&gt;AddressOfEntryPoint = 0x5DEFC;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%X&quot;</span>,FOA_TO_RVA(begin_FOA,NewBuffer));<br><br>    <span class="hljs-built_in">memcpy</span>(shell_begin,Shell,<span class="hljs-number">18</span>);<br><br><span class="hljs-comment">//这里要注意memcpy的用法</span><br>DWORD* e8 = (DWORD*)(shell_begin + <span class="hljs-number">9</span>);<br>DWORD* e9 = (DWORD*)(shell_begin + <span class="hljs-number">14</span>);<br><span class="hljs-built_in">memcpy</span>(e8,&amp;e8_x_addr,<span class="hljs-number">4</span>);<span class="hljs-comment">//这里也可能是1，把4改为1</span><br><span class="hljs-built_in">memcpy</span>(e9,&amp;e9_x_addr,<span class="hljs-number">4</span>);<br><br><br>    <span class="hljs-keyword">return</span> NewBuffer;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* buffer;<br>    <span class="hljs-type">char</span>* new_buffer;<br><br>    FILE* fp1 = <span class="hljs-literal">NULL</span>;<br>    FILE* fp2 = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-type">errno_t</span> err_1 = fopen_s(&amp;fp1, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\PE_info.exe&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-type">errno_t</span> err_2 = fopen_s(&amp;fp2, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\PE_info_shell.exe&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br><br>    DWORD size = Size(fp1);<br>    buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<br>    fread(buffer,size,<span class="hljs-number">1</span>,fp1);<br><br>    new_buffer = Section_add(fp1,buffer);<br>    fwrite(new_buffer,size+<span class="hljs-number">0x1000</span>+<span class="hljs-number">0x100</span>,<span class="hljs-number">1</span>,fp2);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构（四）</title>
    <link href="/2023/07/02/PE_3/"/>
    <url>/2023/07/02/PE_3/</url>
    
    <content type="html"><![CDATA[<p>PE练习，修改OEP执行shellcode</p><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>在可选PE头OptionalHeader中有这样一个成员<code>AddressOfEntryPoint</code>,这个成员记录整个exe程序开始入口地址，而且是一个RVA，即虚拟相对地址，需要将其加上程序装载的基址即ImageBase才是在内存中真正运行的地址。</p><p>那么自然就有一种想法，能否通过修改这个OEP，在程序执行之前先执行其他代码，然后再执行源代码？</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1.通过修改OEP，在程序执行前执行一个弹窗</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307021658762.png"></p><p>2.弹窗后恢复正常执行流</p><h3 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h3><p>Q1：弹窗函数在哪里</p><p>A1：可以先使用OD等调试工具装载exe文件，在调试工具里面找到弹窗函数MessageBoxA</p><p>函数原型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">MessageBoxA</span><span class="hljs-params">( HWND hWnd,LPCTSTR lpText, LPCTSTR lpCaption = <span class="hljs-literal">NULL</span>, UINT nType = MB_OK )</span>;<br></code></pre></td></tr></table></figure><p>参数说明</p><blockquote><p>hWnd：表示窗口句柄，指定该对话框的所有者窗口；如果该参数为空(0&#x2F;NULL)，则该对话框不属于任何窗口<br>lpText：字符串，指显示在对话框中的内容<br>lpCaption：字符串，指对话框的标题；如果此参数为空，则默认使用“错误”作为标题<br>nType：指定显示按钮的数目及形式，表名使用的图标样式、缺省按钮是什么、以及消息框的强制回应等</p></blockquote><p>Q2：如何调用</p><p>A2：MessageBoxA有四个参数，通过栈来传递参数，简单起见，只需要连续的四个<code>push 0</code>即可，在push完后，就应该使用call指令调用这个函数，类似于<code>call x</code>。然而注意的是，这里的x并不是在调试工具里找到MessageBoxA的地址，而是找到的地址减去call指令的下一条地址。</p><p>举个例子，比如call指令地址是0x1000，下一条指令地址是0x1005（call指令占5个字节长度），需要call的函数地址位置为0x1105，那么就应该写为<code>call 0x100</code>，这里的100就是0x1105 - 0x1005得到。</p><p>由于是在文件里面进行修改，这里修改的就是机器码，<code>push 0</code>的机器码是<code>6A 00</code>，<code>call x</code>的机器码是<code>e8 x</code>，其中x占四个字节，e8即为call的操作码</p><p>Q3：如何返回</p><p>A3：在call完MessageBoxA后，就应该返回原来的正常执行流，那么可以在call指令下一条使用jmp指令直接跳回原来的OEP，格式为<code>jmp x</code>，同样的，这里的x也是jmp下一条指令地址减去要跳转的指令地址，x也为四字节，机器码格式为<code>e9 x</code>，e9即为jmp的操作码</p><p>Q4：在哪里插入shellcode</p><p>A4：理想的插入位置就是Code区或者Text区，因为这两个地方存放的就是代码片段，实际上任何地方都可以（得是空白段，即不能影响原来的代码），只要相应的地方拥有执行权限即可。</p><p>根据Q2，Q3，Q4可以插入对应的shellcode雏形</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307021731085.png"></p><p>Q5：如何修改原来的OEP，使其执行shellcode</p><p>A5：OEP存储的是RVA，也就是在内存中偏移，那么就需要从文件偏移计算内存偏移，也就是涉及到RVA和FOA的互相转化。值得一提的是，这里的RVA和FOA其实只会对节区以后的数据有影响，所有的头其实都是不变的，因为这些头之间都是紧紧挨在一起的，中间没有填充。</p><p>那么给出一个FOA，如何计算它的RVA呢。实际上只需要确定它在哪一个节区，减去这个节区的起始地址，算出它在节区中的偏移offset，再加上节区在内存中的起始地址即可算出在内存中的地址。确定节区也好办，只需要大于此节区开始地址<code>VirtualAddress</code>，小于下一个节区开始地址，就可以确定它是在此节区中。</p><p>从RVA计算FOA也是一样的，确定节区，算节区偏移，加上节区在文件中起始地址<code>PointerToRawData</code>，给出代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><br>DWORD <span class="hljs-title function_">Size</span><span class="hljs-params">(FILE* fp)</span>&#123;<br>    DWORD size = <span class="hljs-number">0</span>;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    size = ftell(fp);<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><br>DWORD <span class="hljs-title function_">FOA_TO_RVA</span><span class="hljs-params">(DWORD FOA,<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>   PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FileHeader= <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    FileHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> +IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> +IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br><span class="hljs-keyword">if</span> (FOA &lt; OptionalHeader-&gt;SizeOfHeaders) <span class="hljs-comment">//头部地址直接返回</span><br>&#123;<br><span class="hljs-keyword">return</span> FOA;<br>&#125;<br><br>   <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;FileHeader-&gt;NumberOfSections<span class="hljs-number">-1</span>;i++)&#123; <span class="hljs-comment">//节区判定条件</span><br>        <span class="hljs-keyword">if</span>(FOA &gt;= SectionHeader-&gt;PointerToRawData&amp;&amp; FOA &lt; (SectionHeader +<span class="hljs-number">1</span>)-&gt;PointerToRawData)&#123;<br>            DWORD offset = FOA - SectionHeader-&gt;PointerToRawData;<br>            <span class="hljs-keyword">return</span> SectionHeader-&gt;VirtualAddress + offset;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            SectionHeader += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//最后一个节区</span><br>    DWORD offset = FOA - SectionHeader-&gt;PointerToRawData;<br>    <span class="hljs-keyword">return</span> SectionHeader-&gt;VirtualAddress + offset;<br>&#125;<br><br>DWORD <span class="hljs-title function_">RVA_TO_FOA</span><span class="hljs-params">(DWORD RVA,<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>   PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FileHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    FileHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br>    <br>    <span class="hljs-keyword">if</span> (RVA &lt; OptionalHeader-&gt;SizeOfHeaders) <span class="hljs-comment">//头部直接返回</span><br>&#123;<br><span class="hljs-keyword">return</span> RVA;<br>&#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;FileHeader-&gt;NumberOfSections<span class="hljs-number">-1</span>;i++)&#123;<span class="hljs-comment">//节区判断条件</span><br>        <span class="hljs-keyword">if</span>(RVA &gt;= SectionHeader-&gt;VirtualAddress &amp;&amp; RVA &lt; (SectionHeader+<span class="hljs-number">1</span>)-&gt;VirtualAddress)&#123;<br>            DWORD offset = RVA - SectionHeader-&gt;VirtualAddress;<br>            <span class="hljs-keyword">return</span> SectionHeader-&gt;PointerToRawData + offset;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            SectionHeader +=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>     <span class="hljs-comment">//最后一个节区</span><br>    DWORD offset = RVA - SectionHeader-&gt;VirtualAddress;<br>    <span class="hljs-keyword">return</span> SectionHeader-&gt;PointerToRawData + offset;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* buffer;<br><br>    FILE* fp1 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">errno_t</span> err_1 = fopen_s(&amp;fp1, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\PE_info.exe&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br><br>    DWORD size = Size(fp1);<br>    buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<br>    fread(buffer,size,<span class="hljs-number">1</span>,fp1);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%X&quot;</span>,FOA_TO_RVA(<span class="hljs-number">0x5d380</span>,buffer));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%X&quot;</span>,RVA_TO_FOA(<span class="hljs-number">0x5df80</span>,buffer));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="计算地址"><a href="#计算地址" class="headerlink" title="计算地址"></a>计算地址</h3><h4 id="真正ImageBase"><a href="#真正ImageBase" class="headerlink" title="真正ImageBase"></a>真正ImageBase</h4><p>由于设备等原因，程序并不一定会加载到ImageBase的地方，这时就需要判断程序会加载到什么基址上。最好的办法就是使用调试工具，程序就会自动断在OEP处。</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307021751427.png"></p><p>此时的OEP地址为0x6DEFC，是用PE查看器或者自己手动找文件中的OEP，就是可选头的<code>AddressOfEntryPoint</code>字段可得0x5DEFC，那么很显然，真正的ImageBase就是0x10000。</p><h4 id="修改OEP"><a href="#修改OEP" class="headerlink" title="修改OEP"></a>修改OEP</h4><p>shellcode在文件中起始地址是0x5D380，转化为RVA可得0x5DF80，那么只需要把OEP改写为0x5DF80即可，修改完再拖入调试器应该是这样的，可以从中看见插入的shellcode，下一步就是计算偏移</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307021804821.png"></p><p>函数MessageBoxA在内存中地址是0x75B23D90（可以通过符号查看等方式找，此函数在user32.dll里，不同设备这个值也会不同），那么计算call的地址就是要跳转的地址 - 下一条指令地址，具体计算就是<code>0x75B23D90 - 0x6DF8D = 0x75AB5E03 </code>，同理jmp的地址<code>0x6DEFC - 0x6DF92 =0xffffff6a </code>（要jmp的地址是原来的OEP)</p><p>因此在文件中改为</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307021807664.png"></p><p>在调试器中为，成功显示相关函数！</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307021809257.png"></p><p>此时也能按照预期的方式去运行，即先弹窗再正常执行</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>用到了以前的几个函数</p><p>定义了ImageBase 的宏 以及 MessageBox的宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ImgaeBase  0x10000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MessageBox_Addr 0x75C93D90</span><br>BYTE Shell[] = &#123;<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x6A</span>,<span class="hljs-number">0x00</span>,<br>           <span class="hljs-number">0xE8</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<br>           <span class="hljs-number">0xe9</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>&#125;;<br><br>DWORD <span class="hljs-title function_">Size</span><span class="hljs-params">(FILE* fp)</span>&#123;<br>    DWORD size = <span class="hljs-number">0</span>;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    size = ftell(fp);<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br>DWORD <span class="hljs-title function_">FOA_TO_RVA</span><span class="hljs-params">(DWORD FOA,<span class="hljs-type">char</span>* Buffer)</span>&#123;<br>   PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FileHeader= <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)Buffer;<br>    FileHeader = (PIMAGE_FILE_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> +IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(Buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> +IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br><span class="hljs-keyword">if</span> (FOA &lt; OptionalHeader-&gt;SizeOfHeaders)<br>&#123;<br><span class="hljs-keyword">return</span> FOA;<br>&#125;<br><br>   <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;FileHeader-&gt;NumberOfSections<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(FOA &gt;= SectionHeader-&gt;PointerToRawData&amp;&amp; FOA &lt; (SectionHeader +<span class="hljs-number">1</span>)-&gt;PointerToRawData)&#123;<br>            DWORD offset = FOA - SectionHeader-&gt;PointerToRawData;<br>            <span class="hljs-keyword">return</span> SectionHeader-&gt;VirtualAddress + offset;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            SectionHeader += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//最后一个节区</span><br>    SectionHeader +=<span class="hljs-number">1</span>;<br>    DWORD offset = FOA - SectionHeader-&gt;PointerToRawData;<br>    <span class="hljs-keyword">return</span> SectionHeader-&gt;VirtualAddress + offset;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Shell_add</span><span class="hljs-params">(<span class="hljs-type">char</span>* buffer)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FileHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)buffer;<br>NTHeader = (PIMAGE_NT_HEADERS)(buffer + DosHeader-&gt;e_lfanew);<br>FileHeader = (PIMAGE_FILE_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br>    <span class="hljs-type">char</span>* shell_begin = buffer + SectionHeader-&gt;PointerToRawData + SectionHeader-&gt;Misc.VirtualSize ;<br><br>DWORD begin_FOA = SectionHeader-&gt;PointerToRawData + SectionHeader-&gt;Misc.VirtualSize;<br><br><br>DWORD e8_FOA = begin_FOA + <span class="hljs-number">8</span>;<br>DWORD e9_FOA = e8_FOA + <span class="hljs-number">5</span>;<br><br>DWORD begin_RVA = FOA_TO_RVA(begin_FOA,buffer);<br><span class="hljs-comment">//计算call地址的编码 即e8 xxxxx</span><br>DWORD e8_x_addr = MessageBox_Addr - (FOA_TO_RVA(e9_FOA,buffer)+ImgaeBase);<br><span class="hljs-comment">//计算原oep的地址编码 即e9 xxxxx</span><br>DWORD e9_x_addr = OptionalHeader-&gt;AddressOfEntryPoint - (FOA_TO_RVA(e9_FOA,buffer)+<span class="hljs-number">5</span>);<br><br><span class="hljs-comment">//先修改原OEP</span><br>OptionalHeader-&gt;AddressOfEntryPoint = FOA_TO_RVA(begin_FOA,buffer);<br><br>    <span class="hljs-built_in">memcpy</span>(shell_begin,Shell,<span class="hljs-number">18</span>);<br><br><span class="hljs-comment">//这里要注意memcpy的用法</span><br>DWORD* e8 = (DWORD*)(shell_begin + <span class="hljs-number">9</span>);<br>DWORD* e9 = (DWORD*)(shell_begin + <span class="hljs-number">14</span>);<br><span class="hljs-built_in">memcpy</span>(e8,&amp;e8_x_addr,<span class="hljs-number">4</span>);<span class="hljs-comment">//这里也可能是1，把4改为1</span><br><span class="hljs-built_in">memcpy</span>(e9,&amp;e9_x_addr,<span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* buffer;<br>    <span class="hljs-type">char</span>* new_buffer;<br><br>    FILE* fp1 = <span class="hljs-literal">NULL</span>;<br>    FILE* fp2 = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-type">errno_t</span> err_1 = fopen_s(&amp;fp1, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\PE_info.exe&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-type">errno_t</span> err_2 = fopen_s(&amp;fp2, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\PE_info_shell.exe&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br><br>    DWORD size = Size(fp1);<br>    buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<br>    fread(buffer,size,<span class="hljs-number">1</span>,fp1);<br><br>    Shell_add(buffer);<br>    fwrite(buffer,size,<span class="hljs-number">1</span>,fp2);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>1.也可以直接拉伸成ImageBuffer后再patch，都是一样</p><p>2.也可以在IDA里面直接patch，构造几个简单ROP即可</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构（三）</title>
    <link href="/2023/07/02/PE_2/"/>
    <url>/2023/07/02/PE_2/</url>
    
    <content type="html"><![CDATA[<p>PE练习，FileBuffer–ImageBuffer–FileBuffer</p><span id="more"></span><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>目前我们已经知道PE文件结构大致组成部分，即</p><ul><li><p>DOS头，主要成员</p><ul><li>MZ标志</li><li>e_lfanew NT头的文件偏移</li></ul><p>NT头又可以分为三个部分 Signature 标准PE头 可选PE头</p></li><li><p>Signature，即“PE”标识</p></li><li><p>标准PE头，主要成员</p><ul><li>Machine 可运行的CPU</li><li>NumberOfSections 节区数量</li><li>TimeDateStamp 时间戳</li><li>Characteristics 文件属性</li></ul></li><li><p>可选PE头主要成员</p><ul><li>Magic PE类型 32位 or 64位？</li><li>AddressOfEntryPoint 程序入口RVA</li><li>ImageBase 程序优先装载地址</li><li>SectionAlignment 内存对齐粒度</li><li>FileAlignment 文件对齐粒度</li><li>SizeOfImage 内存中PE文件映像大小</li><li>SizeOfHeaders 所有头包括节表按文件对齐后的大小</li></ul></li><li><p>节表</p><ul><li>BYTE 8字节名字</li><li>Misc 在内存中真实大小</li><li>VirtualAddress 内存中偏移 即RVA</li><li>SizeOfRawData 文件对齐后尺寸</li><li>PointerToRawData 节区在文件中偏移</li><li>Characteristics 节区属性</li></ul></li></ul><p>实际上这些部分就已经可以决定一个PE文件的全部的东西了，可以通过头找到节表，由节表找到每一个节区，每一个节区就存放了运行时的信息。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>将一个EXE文件从文件形式拉伸成内存形式，再由内存形式压缩回文件形式，存盘后能运行</p><p>note：这里的内存是指由malloc分配的堆空间地址，不是程序ImageBase的地址</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307012317292.png"></p><h3 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h3><p>Q1：要拷贝的数据在哪</p><p>A1：各种头的数据在FileBuffer最前面，而且紧紧相连，中间没有空，同时大小由SizeOfHeaders决定；节区地址可以由节表中的PointerToRawData找到</p><p>Q2：要分配多少空间来存储copy数据</p><p>A2：在可选PE头中有一个<code>SizeOfImage </code>成员，它决定了在内存中PE文件的大小，因此分配<code>SizeOfImage </code>空间即可</p><p>Q3：要把数据copy去哪里</p><p>A3：各种头的数据可以直接copy到ImageBuffer的前面，节区地址可以由节表中每一个结构体的<code>VirtualAddress</code>决定</p><p>同理从ImageBuffer拷贝到FileBuffer时，头部数据也不变，节区地址则可由节表中的<code>PointerToRawData </code>决定</p><p>Q4：节区大小如何确定</p><p>A4：节区大小可与节表两个成员相关，第一个是Misc，第二个是SizeOfRawData。从图中可能会觉得SizeOfRawData一定大于Misc，其实并不一定。考虑这个情形，在编写程序时，仅声明一个全部变量<code>char ch[1000]</code>而并不初始化，那么在文件中就不会为这个变量分配空间存储，只有在内存中时才会分配。而Misc所指的大小就是在内存中的大小，那么这时候Misc就有可能大于SizeOfRawData</p><p>那么是不是谁大用谁呢？也不是，还是以刚刚为例，如果执意使用Misc作为要copy的节区大小，由于在文件中并没有为其分配大小，那么这时候就有可能会把下一个节区数据也copy进来，这就乱套了。</p><p>所以最终答案就是，用小的，或者只用SizeOfRawData，这样能保证精确地把该节区数据全部正确copy，即使还要需要内存，那么也是紧跟已copy数据之后，而且下一个节区地VirtualAddress保证了有足够空间</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><br>DWORD <span class="hljs-title function_">Size</span><span class="hljs-params">(FILE* fp)</span>&#123;<br>    DWORD size = <span class="hljs-number">0</span>;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    size = ftell(fp);<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><br><span class="hljs-type">char</span>* <span class="hljs-title function_">FileToImage</span><span class="hljs-params">(<span class="hljs-type">char</span>* filebuffer)</span>&#123;<br><br>    <span class="hljs-comment">//定义一些指针</span><br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FileHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">char</span>* TemBuffer = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">//简单判断有效性</span><br>    <span class="hljs-keyword">if</span> (!filebuffer)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid buffer!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (*(PWORD)filebuffer != IMAGE_DOS_SIGNATURE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;not a PE file!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>    <span class="hljs-comment">//开始赋值相应指针</span><br>    DosHeader = (PIMAGE_DOS_HEADER)filebuffer;<br>NTHeader = (PIMAGE_NT_HEADERS)  (filebuffer + DosHeader-&gt;e_lfanew);<br>FileHeader = (PIMAGE_FILE_HEADER)(filebuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(filebuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(filebuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br>    <span class="hljs-comment">//申请内存中大小</span><br>TemBuffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(OptionalHeader-&gt;SizeOfImage);<br><br>    <span class="hljs-comment">//初始化并复制头部数据</span><br>    <span class="hljs-built_in">memset</span>(TemBuffer,<span class="hljs-number">0</span>,OptionalHeader-&gt;SizeOfImage);<br>    <span class="hljs-built_in">memcpy</span>(TemBuffer,DosHeader,OptionalHeader-&gt;SizeOfHeaders);<br><br>    <span class="hljs-comment">//开始复制节区数据</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;FileHeader-&gt;NumberOfSections;i++)&#123;<br>        <span class="hljs-built_in">memcpy</span>((TemBuffer + SectionHeader-&gt;VirtualAddress),(filebuffer + SectionHeader-&gt;PointerToRawData),SectionHeader-&gt;SizeOfRawData);<br><span class="hljs-comment">//更新为下一个节区的结构体，此方式为重新计算</span><br>SectionHeader = (PIMAGE_SECTION_HEADER)(filebuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader + <span class="hljs-number">40</span> * (i + <span class="hljs-number">1</span>));<br>        <span class="hljs-comment">// 也可以使用这种方式更新，此方式为相对当前结构体计算</span><br>        <span class="hljs-comment">// 注意C语言中指针加法规则，这里加1指的是加1一个这个结构体大小</span><br>        <span class="hljs-comment">// SectionHeader +=1 ;</span><br><br>&#125;<br><br>    <span class="hljs-keyword">return</span> TemBuffer;<br>&#125;<br><br><span class="hljs-comment">//==========================image to file==========================</span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">ImageToFile</span><span class="hljs-params">(<span class="hljs-type">char</span>* imagebuffer)</span>&#123;<br><br><span class="hljs-comment">//定义一些指针</span><br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_FILE_HEADER FileHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">char</span>* TemBuffer = <span class="hljs-literal">NULL</span>;<br><br><br><span class="hljs-keyword">if</span> (!imagebuffer)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid buffer!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (*(PWORD)imagebuffer != IMAGE_DOS_SIGNATURE)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;not a PE file!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>DosHeader = (PIMAGE_DOS_HEADER)imagebuffer;<br>NTHeader = (PIMAGE_NT_HEADERS)(imagebuffer + DosHeader-&gt;e_lfanew);<br>FileHeader = (PIMAGE_FILE_HEADER)(imagebuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(imagebuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(imagebuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br><span class="hljs-comment">//计算原文件大小用于分配空间</span><br>DWORD new_size = OptionalHeader-&gt;SizeOfHeaders;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; FileHeader-&gt;NumberOfSections; i++)<br>&#123;<br>new_size += (SectionHeader + IMAGE_SIZEOF_SECTION_HEADER * i)-&gt;SizeOfRawData;<br>&#125;<br><br>TemBuffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(new_size);<br><br><span class="hljs-comment">//初始化TemBuffer及头部</span><br><span class="hljs-built_in">memset</span>(TemBuffer, <span class="hljs-number">0</span>, new_size);<br><span class="hljs-built_in">memcpy</span>(TemBuffer, imagebuffer, OptionalHeader-&gt;SizeOfHeaders);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; FileHeader-&gt;NumberOfSections; i++)<br>&#123;<br><span class="hljs-built_in">memcpy</span>((TemBuffer + SectionHeader-&gt;PointerToRawData), (imagebuffer + SectionHeader-&gt;VirtualAddress), SectionHeader-&gt;SizeOfRawData);<br>SectionHeader = (PIMAGE_SECTION_HEADER)(imagebuffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader + <span class="hljs-number">40</span> * (i + <span class="hljs-number">1</span>));<br>        <span class="hljs-comment">//同理可用  SectionHeader +=1 ;</span><br>&#125;<br><br><span class="hljs-keyword">return</span> TemBuffer;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br> <span class="hljs-type">char</span>* buffer;<br><br>    FILE* fp1 = <span class="hljs-literal">NULL</span>;<br>FILE* fp2 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">errno_t</span> err_1 = fopen_s(&amp;fp1, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\PE_info.exe&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-type">errno_t</span> err_2 = fopen_s(&amp;fp2, <span class="hljs-string">&quot;C:\\Users\\yongrin\\Desktop\\PE_info_changed.exe&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br><br>    <span class="hljs-comment">//将exe读入内存，是filebuffer形式</span><br>    DWORD size = Size(fp1);<br>    buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<br>    fread(buffer,size,<span class="hljs-number">1</span>,fp1);<br><br><span class="hljs-type">char</span>* newbuffer;<br>newbuffer = FileToImage(buffer);<br>newbuffer = ImageToFile(newbuffer);<br><br>fwrite(newbuffer,size,<span class="hljs-number">1</span>,fp2);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构（二）</title>
    <link href="/2023/07/01/PE_1/"/>
    <url>/2023/07/01/PE_1/</url>
    
    <content type="html"><![CDATA[<p>PE文件结构（二） 节表</p><span id="more"></span><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>在此之前，我们已经知道PE文件结构前面几部分是由DOS头（通常把DOS stub也算入DOS头中）、NT头，NT头又可以分为Signature、标准PE头、可选PE头，紧接着可选PE头的就是节表。</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307010213266.png"></p><h3 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h3><h4 id="节表的索引"><a href="#节表的索引" class="headerlink" title="节表的索引"></a>节表的索引</h4><p>在解析节表之前，我们首先要知道如何在文件中找到这个节表</p><p>根据PE结构图有一个很朴素的思想去找到这个节表在文件中位置，即节表地址 &#x3D; DOS头大小+Signature大小+标准PE头大小+可选PE头大小即可，然而借助于DOS头中 <code>e_lfanew</code> 字段我们可以直接跳到Signature处，此时变成 <code>e_lfanew</code> + Signature大小 +标准PE头大小+可选PE头大小</p><p>其中Signature大小是4个字节（PE的标识），标准PE头大小是固定的0x14字节，标准PE头中又有 <code>SizeOfOptionalHeader</code>字段标识可选头大小，所以节表地址就可以表示为 <code>e_lfanew + 4 + 0x14 + SizeofOptionalHeader</code></p><h4 id="节区数量"><a href="#节区数量" class="headerlink" title="节区数量"></a>节区数量</h4><p>既然提到了表，就说明这是一个线性结构，像一个数组一样存储了若干小表的信息，这个小表其实就是一个结构体，也即图中的<code>Image_Section_Table</code>,自然大小也就是确定的。每一个结构体都包含了对应节区的相关信息，比如节区的名字、大小等。我们现在可以找到节表，但是怎么确定这个节表中有多少个<code>Image_Section_Table</code>呢</p><p>这就又要回想到之前的标准PE头，里面有一个字段<code>NumberOfSections</code>,顾名思义，就是存储了节表的数量。</p><p>那么现在有了节表的起始位置，又有了节区的数量，节表的大小，尽管不知道节表里的结构体都有什么成员，但是最起码现在可以确定每一个结构体的起始终止了</p><h4 id="结构体成员"><a href="#结构体成员" class="headerlink" title="结构体成员"></a>结构体成员</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_SECTION_HEADER</span> &#123;</span><br>    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];<span class="hljs-comment">//8个字节 IMAGE_SIZEOF_SHORT_NAME是宏 等于8 一般是ascii码 节区名字</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>            DWORD   PhysicalAddress;<br>            DWORD   VirtualSize;<br>    &#125; Misc;<span class="hljs-comment">// 注意是联合体，其含义是没有对齐的在内存中真实尺寸 该值可以不准确</span><br>    DWORD   VirtualAddress;<span class="hljs-comment">// 节区在内存中的偏移地址，是RVA</span><br>    DWORD   SizeOfRawData;<span class="hljs-comment">// 节区在文件中对齐后的尺寸</span><br>    DWORD   PointerToRawData;<span class="hljs-comment">// 节区在文件中偏移</span><br>    DWORD   PointerToRelocations;<span class="hljs-comment">// 在obj文件中使用 对exe无意义</span><br>    DWORD   PointerToLinenumbers;<span class="hljs-comment">// 行号表的位置 调试时使用</span><br>    WORD    NumberOfRelocations;<span class="hljs-comment">// 在obj中使用 对exe无意义</span><br>    WORD    NumberOfLinenumbers;<span class="hljs-comment">// 行号表的数量 调试时使用</span><br>    DWORD   Characteristics;<span class="hljs-comment">// 节区属性 可写可读可执行等 通过或的形式来添加属性</span><br>    <span class="hljs-comment">//0x00000020 含可执行代码 0x20000000 该块可执行 0x40000000 可读 0x80000000 可写</span><br>&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;<br><br></code></pre></td></tr></table></figure><p>以一个对比图来说明</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202307010246517.png"></p><p>左边是文件形式，右边是运行时形式</p><ul><li>Name - 从A开始的8个字节是名字</li><li>Misc - 从A到B的大小，可以不准确</li><li>VirtualAddress - 右图中 ImageBase到A的距离</li><li>SizeOfRawData - 左图中绿色框的大小</li><li>PointerToRawData - 左图中0到A的距离</li></ul><h3 id="代码查找"><a href="#代码查找" class="headerlink" title="代码查找"></a>代码查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><br>DWORD <span class="hljs-title function_">Size</span><span class="hljs-params">(FILE* fp)</span>&#123;<br>    DWORD size = <span class="hljs-number">0</span>;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    size = ftell(fp);<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Section_Info</span><span class="hljs-params">(FILE* fp,<span class="hljs-type">char</span>* buffer)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FileHeader= <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_SECTION_HEADER SectionHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)buffer;<br>    NTHeader = (PIMAGE_NT_HEADERS)(buffer + DosHeader-&gt;e_lfanew);<br>    FileHeader = (PIMAGE_FILE_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> +IMAGE_SIZEOF_FILE_HEADER);<br>    SectionHeader = (PIMAGE_SECTION_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> +IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=================Section PE_INFO=================\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;FileHeader-&gt;NumberOfSections;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The %dth sec\n&quot;</span>,i+<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;name:%s\n&quot;</span>,SectionHeader-&gt;Name);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;VitualAddress:%08x\n&quot;</span>, SectionHeader-&gt;VirtualAddress);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SizeOfRawData:%08x\n&quot;</span>, SectionHeader-&gt;SizeOfRawData);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PointerToRawRata:%08x\n&quot;</span>, SectionHeader-&gt;PointerToRawData);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Characteristic:%X\n&quot;</span>, SectionHeader-&gt;Characteristics);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;==================================\n&quot;</span>);<br>        SectionHeader = (PIMAGE_SECTION_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER + FileHeader-&gt;SizeOfOptionalHeader + <span class="hljs-number">40</span> * (i + <span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* buffer;<br><br>    FILE* fp = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">errno_t</span> err_1 = fopen_s(&amp;fp, <span class="hljs-string">&quot;YOU PATH TO EXE HERE&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <br>    DWORD size = Size(fp);<br>    buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<br>    fread(buffer,size,<span class="hljs-number">1</span>,fp);<br><br>    Section_Info(fp,buffer);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构（一）</title>
    <link href="/2023/06/30/PE_0/"/>
    <url>/2023/06/30/PE_0/</url>
    
    <content type="html"><![CDATA[<p> PE文件结构（一）DOS头 NT头</p><span id="more"></span><h2 id="总起"><a href="#总起" class="headerlink" title="总起"></a>总起</h2><p>首先我们需要知道PE是什么。PE，即Portable Executable，也就是Windows下的可执行文件，它包括exe文件，也包括dll、sys文件等，当我们使用十六进制文本编辑器打开一些exe文件时，会得到如下样子</p><p>如图是百度网盘的前面一小撮的部分</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202306301414772.png"></p><p>当我们打开其他的exe文件时，这一小撮内容应当是差不多的。这其实就说明这些PE文件应当具有某种格式。我们不妨先看看整个PE文件结构图</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202306301334680.png"></p><p>当我们只看最上面一行，可以发现PE文件大致分为如下几部分</p><ul><li>IMGAE_DOS_HEADR - DOS头</li><li>DOS STUB - DOS填充</li><li>IMAGE_NT_HEADR - NT头</li><li>SECTION_TABLE - 节表</li><li>SECTIONS - 节&#x2F;节区</li><li>OTHERS</li></ul><p>在上面给出的百度网盘的文件格式中，所展现的就是DOS头+DOS填充部分。可能你会有个问题，即</p><ul><li>这些部分有什么含义？</li><li>哪个部分在哪里开始哪里结束呢？</li></ul><p>不急 ，这里先给出整个PE文件结构的图</p><p><img src="C:\Users\yongrin\Desktop\PE结构图1.jpg"></p><p>可以看到在上面那个图中，又引申出许多小表，其实这些小表就是一个一个结构体，存储在PE文件结构中。可以这么说：PE文件结构就是由许许多多的结构体组成，每个结构体里的每个成员都有相应的含义，比如指示哪个部分的开始，哪个部分的结束，在指来指去的过程中，整个文件运行所需要的信息也就明确了。</p><h2 id="DOS头"><a href="#DOS头" class="headerlink" title="DOS头"></a>DOS头</h2><p>我们先来看看DOS头部分的结构体吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//注释掉的不需要重点分析</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DOS_HEADER</span>&#123;</span><br>    <span class="hljs-number">0X00</span> WORD e_magic;      <span class="hljs-comment">//※Magic DOS signature MZ(4Dh 5Ah):MZ标记:用于标记是否是可执行文件</span><br>    <span class="hljs-comment">//0X02 WORD e_cblp;     //Bytes on last page of file</span><br>    <span class="hljs-comment">//0X04 WORD e_cp;       //Pages in file</span><br>    <span class="hljs-comment">//0X06 WORD e_crlc;     //Relocations</span><br>    <span class="hljs-comment">//0X08 WORD e_cparhdr;  //Size of header in paragraphs</span><br>    <span class="hljs-comment">//0X0A WORD e_minalloc; //Minimun extra paragraphs needs</span><br>    <span class="hljs-comment">//0X0C WORD e_maxalloc; //Maximun extra paragraphs needs</span><br>    <span class="hljs-comment">//0X0E WORD e_ss;       //intial(relative)SS value</span><br>    <span class="hljs-comment">//0X10 WORD e_sp;       //intial SP value</span><br>    <span class="hljs-comment">//0X12 WORD e_csum;     //Checksum</span><br>    <span class="hljs-comment">//0X14 WORD e_ip;       //intial IP value</span><br>    <span class="hljs-comment">//0X16 WORD e_cs;       //intial(relative)CS value</span><br>    <span class="hljs-comment">//0X18 WORD e_lfarlc;   //File Address of relocation table</span><br>    <span class="hljs-comment">//0X1A WORD e_ovno;     //Overlay number</span><br>    <span class="hljs-comment">//0x1C WORD e_res[4];   //Reserved words</span><br>    <span class="hljs-comment">//0x24 WORD e_oemid;    //OEM identifier(for e_oeminfo)</span><br>    <span class="hljs-comment">//0x26 WORD e_oeminfo;  //OEM information;e_oemid specific</span><br>    <span class="hljs-comment">//0x28 WORD e_res2[10]; //Reserved words</span><br>    <span class="hljs-number">0x3C</span> DWORD e_lfanew;    <span class="hljs-comment">//※Offset to start of PE header:定位PE文件，PE头相对于文件的偏移量</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>简单算算，即整个DOS头只有0x40个字节，那就对比这个结构体来分析一下百度网盘的DOS头吧</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202306301414772.png" alt="百度网盘"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// 注释掉的不需要重点分析</span><br><span class="hljs-comment">// 要注意存储顺序为小端序</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DOS_HEADER</span>&#123;</span><br>    <span class="hljs-number">0X00</span> WORD e_magic;      <span class="hljs-comment">// 5A 4D</span><br>    <span class="hljs-comment">//0X02 WORD e_cblp;     // 00 90</span><br>    <span class="hljs-comment">//0X04 WORD e_cp;       // 03 00</span><br>    <span class="hljs-comment">//0X06 WORD e_crlc;     // 00 00</span><br>    <span class="hljs-comment">//0X08 WORD e_cparhdr;  // 00 04</span><br>    <span class="hljs-comment">//0X0A WORD e_minalloc; // 00 00</span><br>    <span class="hljs-comment">//0X0C WORD e_maxalloc; // FF FF</span><br>    <span class="hljs-comment">//0X0E WORD e_ss;       // 00 00</span><br>    <span class="hljs-comment">//0X10 WORD e_sp;       // 00 B8</span><br>    <span class="hljs-comment">//0X12 WORD e_csum;     // 00 00</span><br>    <span class="hljs-comment">//0X14 WORD e_ip;       // 00 00</span><br>    <span class="hljs-comment">//0X16 WORD e_cs;       // 00 00</span><br>    <span class="hljs-comment">//0X18 WORD e_lfarlc;   // 00 40</span><br>    <span class="hljs-comment">//0X1A WORD e_ovno;     // 00 00</span><br>    <span class="hljs-comment">//0x1C WORD e_res[4];   // 00 00 00 00 00 00 00 00 //注意这是个数组</span><br>    <span class="hljs-comment">//0x24 WORD e_oemid;    // 00 00</span><br>    <span class="hljs-comment">//0x26 WORD e_oeminfo;  // 00 00</span><br>    <span class="hljs-comment">//0x28 WORD e_res2[10]; // 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br>    <span class="hljs-number">0x3C</span> DWORD e_lfanew;    <span class="hljs-comment">// 00 00 01 50</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>这里只需要注意第一个成员以及最后一个成员，第一个成员 <code>e_magic</code> 是可执行文件标志，在一个程序运行时，会首先检查这两位来判断这是不是一个可执行文件，最后一个成员<code>e_lfanew</code>就是存储的就是NT头的地址</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202306301429472.png"></p><p>可以看到<code>e_lfanew</code>有一个箭头指向了<code>IMAGE_NT_HEADERS</code>，也就是NT头。</p><h2 id="NT头"><a href="#NT头" class="headerlink" title="NT头"></a>NT头</h2><p>先根据DOS头中<code>e_lfanew</code>所指示的地址0x150，在16进制文本编辑器看看这个NT头是个啥吧</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202306301436891.png"></p><p>根据上面的PE文件结构图，NT头又可以分成三个部分</p><ul><li>Signature</li><li>Image_File_Header - 标准PE头</li><li>Image_Optional_Header - 可选PE头</li></ul><p>其中<code>Signature</code>占4个字节，即 <code>50 45 00 00 </code> 在右边也可以看到就是PE两个字母的ascii码（50 45）</p><h3 id="标准PE头"><a href="#标准PE头" class="headerlink" title="标准PE头"></a>标准PE头</h3><p>标准PE头占0x14个字节，它也是个结构体，如下是他的结构体成员及相关含义,带星号为重要成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_FILE_HEADER</span> &#123;</span><br>    WORD    Machine;               <span class="hljs-comment">// 01 4c //*可以运行在什么样的CPU上 任意：0 Intel 386以及后续：14C x64：8864</span><br>    WORD    NumberOfSections;      <span class="hljs-comment">// 00 09 //*表示节的数量</span><br>    DWORD   TimeDateStamp;         <span class="hljs-comment">// 64 79 c7 10 //*编译器填写的时间戳，与文件属性里面的创建时间、修改时间无关</span><br>    DWORD   PointerToSymbolTable;  <span class="hljs-comment">// 00 00 00 00 //调试相关</span><br>    DWORD   NumberOfSymbols;       <span class="hljs-comment">// 00 00 00 00 //调试相关</span><br>    WORD    SizeOfOptionalHeader;  <span class="hljs-comment">// 00 e0 //*可选PE头的大小(32位PE文件：0xE0 64位PE文件：0xF0)</span><br>    WORD    Characteristics;       <span class="hljs-comment">// 01 02  //*文件属性</span><br>&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;<br></code></pre></td></tr></table></figure><h3 id="可选PE头"><a href="#可选PE头" class="headerlink" title="可选PE头"></a>可选PE头</h3><p>标准PE头过后就是可选PE头,这里就仅给出结构体成员，带星号为重要成员</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_OPTIONAL_HEADER</span> &#123;</span>  <br>    WORD    Magic;  <span class="hljs-comment">//* 10B 32位PE 20B 64位PE 107 ROM映像</span><br>    BYTE    MajorLinkerVersion;  <span class="hljs-comment">// 链接器版本号</span><br>    BYTE    MinorLinkerVersion;  <span class="hljs-comment">// 链接器副版本号</span><br>    DWORD   SizeOfCode;  <span class="hljs-comment">//* 所有代码节的总和  必须是FileAlignment大小整数倍 已无用</span><br>    DWORD   SizeOfInitializedData; <span class="hljs-comment">//*  所有含已初始化数据的节的总大小 必须是FileAlignment大小整数倍 已无用</span><br>    DWORD   SizeOfUninitializedData; <span class="hljs-comment">//* 所有含未初始化数据的节的大小 必须是FileAlignment大小整数倍 已无用</span><br>    DWORD   AddressOfEntryPoint; <span class="hljs-comment">//* 程序执行入口RVA</span><br>    DWORD   BaseOfCode; <span class="hljs-comment">//* 代码节的起始RVA 已无用</span><br>    DWORD   BaseOfData; <span class="hljs-comment">//* 数据节的起始RVA 已无用</span><br>    DWORD   ImageBase;  <span class="hljs-comment">//* 程序的优先装载地址</span><br>    DWORD   SectionAlignment; <span class="hljs-comment">//* 内存中节的对齐粒度</span><br>    DWORD   FileAlignment; <span class="hljs-comment">//* 文件中节的对齐粒度</span><br>    WORD    MajorOperatingSystemVersion; <span class="hljs-comment">// 操作系统主版本号</span><br>    WORD    MinorOperatingSystemVersion; <span class="hljs-comment">// 操作系统副版本号</span><br>    WORD    MajorImageVersion;  <span class="hljs-comment">// PE文件映像的版本号</span><br>    WORD    MinorImageVersion;  <br>    WORD    MajorSubsystemVersion; <span class="hljs-comment">// 子系统的版本号</span><br>    WORD    MinorSubsystemVersion;  <br>    DWORD   Win32VersionValue;  <span class="hljs-comment">// 未用 必须设置0</span><br>    DWORD   SizeOfImage;  <span class="hljs-comment">//* 内存中整个PE文件的映像尺寸 必须是SectionAlignment整数倍</span><br>    DWORD   SizeOfHeaders;  <span class="hljs-comment">//* 所有头包括节表按照文件对齐粒度后的大小</span><br>    DWORD   CheckSum; <span class="hljs-comment">// 校验和</span><br>    WORD    Subsystem; <span class="hljs-comment">// 指定使用界面的子系统</span><br>    WORD    DllCharacteristics; <span class="hljs-comment">//  DALL文件属性</span><br>    DWORD   SizeOfStackReserve; <span class="hljs-comment">// 初始化时保留的栈的大小</span><br>    DWORD   SizeOfStackCommit; <span class="hljs-comment">//* 初始化时实际提交的栈的大小</span><br>    DWORD   SizeOfHeapReserve; <span class="hljs-comment">//* 初始化时保留的堆的大小</span><br>    DWORD   SizeOfHeapCommit; <span class="hljs-comment">//* 初始化时实际提交的堆的大小</span><br>    DWORD   LoaderFlags; <span class="hljs-comment">// 加载标志  未用</span><br>    DWORD   NumberOfRvaAndSizes; <span class="hljs-comment">//* 下面的数据目录结构的数量</span><br>    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];  <br>&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;  <br></code></pre></td></tr></table></figure><h4 id="RVA"><a href="#RVA" class="headerlink" title="RVA"></a>RVA</h4><p>这里提到了几个新的名词RVA,即Relative Virual Address，虚拟相对地址。</p><p>在解释此名词之前，需要明白一件事情，即PE文件实际上有两种格式，一种是存储在硬盘中，也就是16进制编辑器打开的样子，还有一种则是运行时，操作系统会分配一个独立的虚拟空间给它，通常这个虚拟空间大小是4GB，然后把这个文件装载到这个4GB中，装载到哪，则是先由ImageBase字段决定，一旦确定好从哪个地方装载，就相当于确定了一个基址，而这个RVA就是相对这个基址的偏移。</p><p>比如这个文件从内存中0x10000000开始装载，如果RVA是0x32，那么在内存中它的地址就是0x10000032</p><h4 id="FOA"><a href="#FOA" class="headerlink" title="FOA"></a>FOA</h4><p>可能会想起，那我们刚刚提到的<code>e_lfanew</code>是什么偏移？，既然PE文件有两种格式，那么偏移肯定也有两种，刚刚的提及的RVA是在虚拟内存中的，那么还有一种就是在文件中的偏移，即FOA - File Offset Address，也就是在16进制文本编辑器里的偏移</p><h4 id="SectionAlignment-and-FileAlignment"><a href="#SectionAlignment-and-FileAlignment" class="headerlink" title="SectionAlignment and FileAlignment"></a>SectionAlignment and FileAlignment</h4><p>SectionAlignment ：在内存里面节的对齐大小，必须是这个的整数倍</p><p>FileAlignment：在文件里面节的对齐大小，必须是这个的整数倍</p><h2 id="使用代码读取"><a href="#使用代码读取" class="headerlink" title="使用代码读取"></a>使用代码读取</h2><p>得益于微软的内置库，可以方便的使用以及定义好的指针类型来读取，而不需要自己手动计算</p><p>唯一需要注意的是，由于是文件读入内存中，因此文件在内存中相当于是有一个基址的，所以需要buffer+FOA。注意这里是把文件原封不动的读入程序内存，而不是运行时拉伸进内存。</p><p>可以使用网上的一些PE查看器来验证自己是否读出正确数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">PE_info</span><span class="hljs-params">(FILE* fp,<span class="hljs-type">char</span>* buffer)</span>&#123;<br>    PIMAGE_DOS_HEADER DosHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_NT_HEADERS NTHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_FILE_HEADER FILEHeader = <span class="hljs-literal">NULL</span>;<br>    PIMAGE_OPTIONAL_HEADER OptionalHeader = <span class="hljs-literal">NULL</span>;<br><br>    DosHeader = (PIMAGE_DOS_HEADER)(buffer);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=================DosHeader PE_INFO=================\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DOS_HEADER e_magic:%X\n&quot;</span>,DosHeader-&gt;e_magic);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DOS_HEADER e_lfanew:%X\n&quot;</span>,DosHeader-&gt;e_lfanew);<br>    <br><br>    NTHeader = (PIMAGE_NT_HEADERS)(buffer + DosHeader-&gt;e_lfanew);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=================NTHeader PE_INFO=================\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IMAGE_DOS_SIGNATURE:%X\n&quot;</span>,*(PDWORD)NTHeader);<br><br>    FILEHeader = (PIMAGE_FILE_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=================FileHeader PE_INFO=================\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Machine:%X\n&quot;</span>, FILEHeader-&gt;Machine);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Number of Sections:%X\n&quot;</span>, FILEHeader-&gt;NumberOfSections);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Size of OptionalHeader:%X\n&quot;</span>, FILEHeader-&gt;SizeOfOptionalHeader);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Time Stamp:%X\n&quot;</span>, FILEHeader-&gt;TimeDateStamp);<br><br>    OptionalHeader = (PIMAGE_OPTIONAL_HEADER)(buffer + DosHeader-&gt;e_lfanew + <span class="hljs-number">4</span> + IMAGE_SIZEOF_FILE_HEADER);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;=================Optional PE_INFO=================\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Magic:%X\n&quot;</span>, OptionalHeader-&gt;Magic);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of EntryPoint:%X\n&quot;</span>, OptionalHeader-&gt;AddressOfEntryPoint);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ImageBase:%X\n&quot;</span>, OptionalHeader-&gt;ImageBase);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SizeOfImage:%X\n&quot;</span>, OptionalHeader-&gt;SizeOfImage);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SizeOfHeaders:%X\n&quot;</span>, OptionalHeader-&gt;SizeOfHeaders);<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Size</span><span class="hljs-params">(FILE* fp)</span>&#123;<br>    <span class="hljs-type">int</span> size = <span class="hljs-number">0</span>;<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_END);<br>    size = ftell(fp);<br>    fseek(fp,<span class="hljs-number">0</span>,SEEK_SET);<br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* buffer;<br><br>    FILE* fp = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">errno_t</span> err_1 = fopen_s(&amp;fp, <span class="hljs-string">&quot;YOU PATH TO EXE HERE&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <br>    <span class="hljs-comment">//将文件读取到程序中</span><br>    <span class="hljs-type">int</span> size = Size(fp);<br>    buffer = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size);<br>    fread(buffer,size,<span class="hljs-number">1</span>,fp);<br><br>    PE_info(fp,buffer);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>DOS头中第一个成员<code>e_magic</code>和最后一个成员<code>e_lfanew</code>最重要，前者是可执行文件的标志MZ，后者是NT头的文件偏移</p><p>NT头分三个部分，分别是</p><ul><li><p>Signature - PE</p></li><li><p>标准PE头，其重要成员</p><ul><li>Machine 可以运行在什么样的CPU</li><li>NumberofSections 节的数量</li><li>TimeDateStamp 时间戳</li><li>SizeOfOptionalHeader 可选PE头大小</li><li>Characteristics 文件属性</li></ul></li><li><p>可选PE头，其重要成员且仍有用成分</p><ul><li>Magic    该PE文件是什么类型的 10B 32位PE &#x2F;&#x2F; 20B 64位PE &#x2F;&#x2F; 107 ROM映像</li><li>AddressOfEntryPoint 程序入口，即所谓的OEP</li><li>ImageBase   程序的优先装载地址</li><li>SectionAlignment  内存中节的对齐粒度</li><li>FileAlignment  文件中节的对齐粒度</li><li>SizeOfImage 映像大小</li><li>SizeOfHeaders 所有节表对齐后的大小</li><li>SizeOfStackCommit  初始化时实际提交的栈的大小</li><li>SizeOfHeapReserve   初始化时实际提交的堆的大小</li><li>NumberOfRvaAndSizes 目录项</li><li>（无用但保留的字段基本都是为了兼容）</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>PE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDApython 笔记</title>
    <link href="/2023/06/24/IDApython/"/>
    <url>/2023/06/24/IDApython/</url>
    
    <content type="html"><![CDATA[<p>IDApython学习笔记</p><span id="more"></span><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">ea = here() <span class="hljs-comment">#当前光标处地址</span><br><br>asm = idc.GetDisasm(ea) <span class="hljs-comment"># 获取当前地址的整句汇编指令 如 mov rax 1</span><br>op = idc.print_insn_mnem(ea) <span class="hljs-comment"># 获取当前地址汇编操作，如 mov </span><br>operand = idc.print_operand(ea,<span class="hljs-number">0</span>) <span class="hljs-comment"># 获取当前地址汇编操作的操作数，0是第一个操作数，1是第二个操作数，如果超过返回空</span><br><br>_prev_ins = idc.prev_head(ea) <span class="hljs-comment"># 上一条指令地址</span><br>_next_ins = idc.next_head(ea) <span class="hljs-comment"># 下一条指令地址</span><br><br>_prev_addr = idc.prev_addr(ea) <span class="hljs-comment"># 下一条指令地址 这里地址是连续的 比如ea = 0x4001 则返回0x4002 </span><br>_next_addr = idc.next_addr(ea) <span class="hljs-comment"># 下一条指令地址 这里地址是连续的 比如ea = 0x4001 则返回0x4002 </span><br><br>seg_name = idc.get_segm_name(ea) <span class="hljs-comment">#当前地址所处段</span><br><span class="hljs-keyword">for</span> seg <span class="hljs-keyword">in</span> Segments(): <span class="hljs-comment"># 获得每个段起始地址 返回值为每个段起始地址</span><br>    <span class="hljs-built_in">print</span>(seg)<br><br><span class="hljs-keyword">for</span> func <span class="hljs-keyword">in</span> Functions():<span class="hljs-comment"># 获得每一个函数名字</span><br>    <span class="hljs-built_in">print</span>(idc.get_func_name(func))<br><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="基本指令-1"><a href="#基本指令-1" class="headerlink" title="基本指令"></a>基本指令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">name = idc.get_func_name(ea) <span class="hljs-comment">#当前地址所属函数名字</span><br>func = ida_funcs.get_func(ea) <span class="hljs-comment">#当前地址所属函数 返回一个func_t对象</span><br>func = idaapi.get_func(ea) <span class="hljs-comment">#功能同上</span><br><br><span class="hljs-comment"># 利用func_t对象，有如下几个操作</span><br>func_start = func.start_ea <span class="hljs-comment">#该函数起始地址</span><br>func_end = func.end_ea <span class="hljs-comment">#该函数结束地址 注意结束地址是此函数最后一条指令的下一条指令地址</span><br><br>func_start = idc.get_func_attr(ea, FUNCATTR_START) <span class="hljs-comment"># 此地址所属函数起始地址 FUNCATTR_START是宏 等于0</span><br>func_end = idc.get_func_attr(ea,FUNCATTR_END)<span class="hljs-comment"># 此地址所属函数结束地址 同func_end FUNCATTR_END是宏 等于8</span><br><br><span class="hljs-comment"># 获取上一个函数起始地址</span><br>idc.get_prev_fchunk(ea) <br>idc.get_prev_func(ea) <br><br><span class="hljs-comment"># 获取下一个函数起始地址</span><br>idc.get_next_fchunk(ea) <br>idc.get_next_func(ea) <br></code></pre></td></tr></table></figure><h3 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">xrefs = XrefsFrom(ea,<span class="hljs-number">0</span>)<br><span class="hljs-comment"># 返回一个xref列表对象，以此ea为起点，可以有如下操作</span><br><span class="hljs-keyword">for</span> xref <span class="hljs-keyword">in</span> xrefs:<br>xref.frm <span class="hljs-comment"># 起点 </span><br>xref.to <span class="hljs-comment"># 终点，即此函数可以跳去哪</span><br><span class="hljs-comment">#第二个参数是选取交叉引用范围，0,默认是全部 ,1 是远跳转 2 是数据引用</span><br><br>xrefx = XrefsTo(ea,<span class="hljs-number">0</span>)<br><span class="hljs-comment"># 返回一个xref列表对象，以此ea为终点，可以有如下操作</span><br><span class="hljs-keyword">for</span> xref <span class="hljs-keyword">in</span> xrefs:<br>xref.frm <span class="hljs-comment"># 何处来，即谁调用了它</span><br>xref.to <span class="hljs-comment"># 何处去，即它可以去哪里</span><br><span class="hljs-comment">#第二个参数是选取交叉引用范围，0,默认是全部 ,1 是远跳转 2 是数据引用</span><br><span class="hljs-comment"># 一般用此函数找引用</span><br><br>xref = CodeRefsFrom(ea,<span class="hljs-number">0</span>)<br><span class="hljs-comment"># 与 XrefsFrom含义一样，不过返回的是list对象，也只有远跳转，第二参数控制流向，即上面的 frm 和 to 对应</span><br>xref = CodeRefsTo(ea,<span class="hljs-number">0</span>)<br><span class="hljs-comment"># 与 XrefsTo含义一样，不过返回的是list对象，第二参数控制流向，即上面的 frm 和 to 对应</span><br><br>ref = ida_xref.get_first_dref_to(addr) <br><span class="hljs-comment"># 得到引用此变量的首条语句地址 如果没有返回-1 这个是仅变量的交叉引用 无法查看函数的交叉引用，但是XrefXXXX都可以查看</span><br>nex_ref = ida_xref.ger_next_derf_to(addr,ref)<br><span class="hljs-comment"># 得到引用此变量的在ref的下条语句地址 如果没有返回-1 这个是仅变量的交叉引用 无法查看函数的交叉引用，但是XrefXXXX都可以查看</span><br><br>func_addr =idc.get_name_ea_simple(func_name) <span class="hljs-comment"># 通过函数名字获得该函数地址 如果没有该函数返回-1</span><br></code></pre></td></tr></table></figure><h3 id="一些个交叉引用使用方式"><a href="#一些个交叉引用使用方式" class="headerlink" title="一些个交叉引用使用方式"></a>一些个交叉引用使用方式</h3><p>patch掉所有call危险函数的地方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">danger_func = [<span class="hljs-string">&#x27;gets&#x27;</span>,<span class="hljs-string">&#x27;free&#x27;</span>]<br><span class="hljs-keyword">for</span> func <span class="hljs-keyword">in</span> danger_func:<br>    func_addr = idc.get_name_ea_simple(func)<br>    xrefs = CodeRefsTo(func_addr,<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> xref <span class="hljs-keyword">in</span> xrefs:<br>        <span class="hljs-keyword">if</span> idc.GetDisasm(xref).startswith(<span class="hljs-string">&#x27;call&#x27;</span>):<br>            <span class="hljs-built_in">len</span> = next_head(xref) - xref<br>            idaapi.patch_bytes(xref,<span class="hljs-string">b&#x27;\x90&#x27;</span>*<span class="hljs-built_in">len</span>)<br></code></pre></td></tr></table></figure><p>处理ea到end之间所有的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> addr <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ea,end,<span class="hljs-number">4</span>):<br>    xrefs = XrefsTo(ea)<br>    <span class="hljs-keyword">for</span> xref <span class="hljs-keyword">in</span> xrefs:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;mov&#x27;</span> <span class="hljs-keyword">in</span> GetDisasm(xref.frm):<br>            <span class="hljs-comment"># your method</span><br></code></pre></td></tr></table></figure><h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">ea = here()<br>func = idaapi.get_func(ea)<br>CFG = idaapi.FlowChart(func) <span class="hljs-comment"># 此函数的CFG</span><br><br><span class="hljs-keyword">for</span> blocks <span class="hljs-keyword">in</span> CFG:<br>    <span class="hljs-built_in">print</span>(blocks.start_ea) <span class="hljs-comment"># 每一个block的起始地址</span><br>    <span class="hljs-built_in">print</span>(block.end_ea) <span class="hljs-comment"># 每一个block的结束地址 但注意 结束地址是下一个block的起始地址</span><br>    <span class="hljs-built_in">print</span>()<br>    <br>    <span class="hljs-keyword">for</span> succ <span class="hljs-keyword">in</span> blocks.succs(): <span class="hljs-comment"># 每一个block的后继</span><br>        <span class="hljs-built_in">print</span>(succ.start_ea)<br>        <span class="hljs-built_in">print</span>(succ.end_ea)<br>        <br>   <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> blocks.preds() <span class="hljs-comment"># 每一个block的前驱</span><br>  <span class="hljs-built_in">print</span>(pred.start_ea)<br>        <span class="hljs-built_in">print</span>(pred.end_ea)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>IDApython</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>idapython</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XMAN2018 排位赛 Dragon Quest</title>
    <link href="/2023/06/02/wyvern/"/>
    <url>/2023/06/02/wyvern/</url>
    
    <content type="html"><![CDATA[<p>记录一道十分nice的题目</p><span id="more"></span><p>我觉得这道题出得十分得好，它采取了较为简单的控制流混淆，可以使用angr恢复出原本的逻辑，也可以用idapython直接patch去混淆，当然也可以直接使用angr跑出flag，但这样就失去了这题本身的意义了。</p><h3 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h3><p>这题采取的是控制流混淆，也就是增加一些无关紧要的变量，以这些变量之间的稀奇古怪的运算作为控制条件，再在各个块中跳来跳去。</p><p>以这题中一个关键函数<code>start_quest</code> 来看，可以发现里面有很多<code>y26 &gt;= 10 &amp;&amp; (x25-1) * (x25 &amp; 1) !=0</code>等诸如此类的控制条件，并且反复出现相同的语句去控制。</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202306021959458.png" alt="1.png"></p><p>再看看它的CFG</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202306022006460.png" alt="3.png"></p><p>给人的感觉就是冗长、繁琐。然而相比于它的大哥控制流平坦化，这还是比较友好的。</p><h3 id="去混淆"><a href="#去混淆" class="headerlink" title="去混淆"></a>去混淆</h3><h4 id="思路一-IDApython"><a href="#思路一-IDApython" class="headerlink" title="思路一 IDApython"></a>思路一 IDApython</h4><p>我们知道了这道题是以一些无关变量来操控控制流，以达到混淆目的。很自然的一个想法就是，如果这些变量的值都不会变，那么控制语句的结果不就是唯一确定的吗。于是乎，我们想到去查看这些变量的定义位置，会惊奇的发现，它们全部都在bss段定义！</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202306022013016.png" alt="4.png"></p><p>我们再交叉引用几个变量，又会惊奇地发现，它们的值全都没有发生改变。</p><p>也就是说，那些控制语句的结果就是唯一的！可是这样子的话，那么IDA就应该能分析出来并优化掉那些不可达语句。然而事实很明朗，并没有。原因在于，在IDA眼中，这些仍然是变量，只不过是不会变的变量。</p><p>那么这就有了第一个patch思路，也就是我们手动帮助IDA识别，即把所有的这些变量全部patch成0。比如说原本是<code>mov eax,y26</code>，那么我们就patch成<code>mov eax,0</code>。可能会想到，那这么多的变量，我得patch到啥时候呀？这个情况下，我们就应该想到可以借助IDApython来帮我们完成，毕竟 <em>重复性</em> 的工作是计算机最擅长的。</p><p>直接上脚本，脚本中会有详细注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ida_xref<br><br><span class="hljs-comment"># 变量位于bss段的起始地址以及终止地址</span><br>ea = <span class="hljs-number">0x610318</span><br>end = <span class="hljs-number">0x6105A8</span><br>regs = <span class="hljs-built_in">set</span>()<br><br><span class="hljs-comment"># mov 寄存器,0 对应的机器码，可以在IDA中利用Assemble一句一句试出来</span><br>pad = <span class="hljs-string">b&#x27;\x90\x90&#x27;</span><br>patch = &#123;<span class="hljs-string">&#x27;eax&#x27;</span>:<span class="hljs-string">b&#x27;\xB8\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;ebx&#x27;</span>:<span class="hljs-string">b&#x27;\xBB\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;ecx&#x27;</span>:<span class="hljs-string">b&#x27;\xB9\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;edx&#x27;</span>:<span class="hljs-string">b&#x27;\xBA\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;esi&#x27;</span>:<span class="hljs-string">b&#x27;\xBE\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;edi&#x27;</span>:<span class="hljs-string">b&#x27;\xBF\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;r8d&#x27;</span>:<span class="hljs-string">b&#x27;\x41\xB8\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;r9d&#x27;</span>:<span class="hljs-string">b&#x27;\x41\xB9\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;r10d&#x27;</span>:<span class="hljs-string">b&#x27;\x41\xBA\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;r11d&#x27;</span>:<span class="hljs-string">b&#x27;\x41\xBB\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;r12d&#x27;</span>:<span class="hljs-string">b&#x27;\x41\xBC\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;r13d&#x27;</span>:<span class="hljs-string">b&#x27;\x41\xBD\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;r14d&#x27;</span>:<span class="hljs-string">b&#x27;\x41\xBE\x00\x00\x00\x00&#x27;</span> + pad,<br>         <span class="hljs-string">&#x27;r15d&#x27;</span>:<span class="hljs-string">b&#x27;\x41\xBF\x00\x00\x00\x00&#x27;</span> + pad&#125;<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">如何确定只有这些寄存器？ </span><br><span class="hljs-string">当然也是使用IDApython 可以先在下面的reg =idc.print_operand(ref,0)后追加</span><br><span class="hljs-string">regs.add(reg)</span><br><span class="hljs-string">最后再print(regs)就可以得到了</span><br><span class="hljs-string"></span><br><span class="hljs-string">为什么要加一个pad？</span><br><span class="hljs-string">可以自己手动patch一两个，看看patch后和patch前长度有啥区别就知道了</span><br><span class="hljs-string"></span><br><span class="hljs-string">确实 按道理来说 这些应该也有规律的 可以使用脚本来表示的，而非字典</span><br><span class="hljs-string">但是 我不会:(</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 变量存储地址每次递增4</span><br><span class="hljs-keyword">for</span> addr <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ea,end,<span class="hljs-number">4</span>):<br>     ref = ida_xref.get_first_dref_to(addr)<span class="hljs-comment"># 得到是引用此变量的首语句地址</span><br>     <span class="hljs-keyword">while</span> ref != idaapi.BADADDR:<span class="hljs-comment"># 与最后一句一起配合使用，即当前变量仍有被索引</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;mov&#x27;</span> <span class="hljs-keyword">in</span> GetDisasm(ref):<span class="hljs-comment"># 转为反汇编，确认是不是mov操作</span><br>            reg =idc.print_operand(ref,<span class="hljs-number">0</span>)<span class="hljs-comment"># 得到第一个操作数，如果把0改为1，就是得到第二个操作数。这里是获得操作的寄存器</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;before:&quot;</span>,GetDisasm(ref))<span class="hljs-comment"># patch前语句</span><br>            idaapi.patch_bytes(ref,patch[reg])<span class="hljs-comment"># 从此语句开始patch，patch值为以上字典所示</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after:&#x27;</span>,GetDisasm(ref))<span class="hljs-comment"># patch后语句</span><br>        ref = ida_xref.get_next_dref_to(addr,ref)<span class="hljs-comment"># 得到引用此变量的下一条语句地址 若没有 则返回 -1</span><br><br></code></pre></td></tr></table></figure><p>patch完成之后，CFG还是那个CFG，但是反编译已经成功去混淆了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">start_quest</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *a1)</span><br>&#123;<br>  _BYTE v2[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-90h] BYREF</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+48h] [rbp-48h]</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *v5; <span class="hljs-comment">// [rsp+50h] [rbp-40h]</span><br>  <span class="hljs-type">int</span> *v6; <span class="hljs-comment">// [rsp+58h] [rbp-38h]</span><br>  _BYTE *v7; <span class="hljs-comment">// [rsp+60h] [rbp-30h]</span><br>  _BYTE *v8; <span class="hljs-comment">// [rsp+68h] [rbp-28h]</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *v9; <span class="hljs-comment">// [rsp+70h] [rbp-20h]</span><br><br>  v9 = a1;<br>  v8 = &amp;v2[<span class="hljs-number">-16</span>];<br>  v7 = &amp;v2[<span class="hljs-number">-16</span>];<br>  v6 = &amp;v2[<span class="hljs-number">-16</span>];<br>  v5 = &amp;v2[<span class="hljs-number">-16</span>];<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_100);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_214);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_266);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_369);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_417);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_527);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_622);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_733);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_847);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_942);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1054);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1106);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1222);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1336);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1441);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1540);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1589);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1686);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1796);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1891);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1996);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2112);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2165);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2260);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2336);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2412);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2498);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2575);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::length(v9) - <span class="hljs-number">1LL</span> != legend &gt;&gt; <span class="hljs-number">2</span> )<br>  &#123;<br>    *v6 = legend &gt;&gt; <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::<span class="hljs-built_in">string</span>(v5, v9);<br>    v3 = sanitize_input(v5);<br>    *v6 = v3;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(v5);<br>  &#125;<br>  <span class="hljs-keyword">return</span> *v6;<br>&#125;<br></code></pre></td></tr></table></figure><p>会发现，代码逻辑已经十分清晰了。</p><h4 id="思路二-Angr符号执行"><a href="#思路二-Angr符号执行" class="headerlink" title="思路二 Angr符号执行"></a>思路二 Angr符号执行</h4><p>前面提即，那些控制变量的条件是确定的，也就是哪些走、哪些地方不走是确定，如果我们可以直接把不走的地方给nop掉，不也可达到去混淆的目的吗？</p><p>那问题在于，我们如何确定哪些块该走，哪些块不该走呢？ IDApython或许也可以一试，毕竟这也是重复性的活，不过这时候规律性就没那么明显了，脚本就不是很好写了。但是我们还有Angr这一个帮手呀，它不就是一步一步帮我们探索嘛，那只要把它没有走到的块给nop掉不就好了嘛</p><p>直接看脚本吧，脚本附有详细注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 用于记录所有的块</span><br>Blocks = <span class="hljs-built_in">set</span>()<br><br><span class="hljs-comment"># 得到CFG，但注意此处的CFG是函数调用CFG，也即一个Call会是一个block的终止，与IDA的CFG有所不同，但无伤大雅</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GetCFG</span>(<span class="hljs-params">func_addr</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Getting CFG&quot;</span>)<br>    cfg = proj.analyses.CFGFast(normalize = <span class="hljs-literal">True</span>,force_complete_scan = <span class="hljs-literal">False</span>)<span class="hljs-comment"># 使用CFGFast得到静态CFG</span><br>    function_cfg = cfg.functions.get(func_addr).transition_graph<span class="hljs-comment"># 得到函数调用CFG</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Getting CFG Done&quot;</span>)<br>    <span class="hljs-keyword">return</span> function_cfg<br><br><br><span class="hljs-comment"># 得到所有的块</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GetBlock</span>(<span class="hljs-params">cfg</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Getting Block &quot;</span>)<br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> cfg.nodes:<br>        Blocks.add(node.addr)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Getting Block Done&quot;</span>)<br><br>    <br><span class="hljs-comment"># Hook掉所有call的函数，让他们返回未约束的值，以免陷入复杂的库函数中</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Hook</span>(<span class="hljs-params">block</span>):<br>    <span class="hljs-keyword">for</span> insn <span class="hljs-keyword">in</span> block.capstone.insns: <span class="hljs-comment">#该块的所有汇编语句</span><br>        <span class="hljs-keyword">if</span> insn.mnemonic == <span class="hljs-string">&#x27;call&#x27;</span>:<span class="hljs-comment"># 汇编操作指令为 call 的</span><br>            src_Addr = <span class="hljs-built_in">int</span>(insn.op_str,<span class="hljs-number">16</span>)<span class="hljs-comment"># 得到操作数，即call的地址</span><br>            proj.hook(src_Addr,angr.SIM_PROCEDURES[<span class="hljs-string">&quot;stubs&quot;</span>][<span class="hljs-string">&quot;ReturnUnconstrained&quot;</span>](), replace=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-comment"># patch 无法执行的Block</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Patch</span>(<span class="hljs-params">block</span>):<br>    start = block.addr - proj.loader.main_object.mapped_base<br>    size = block.size<br>    oridata[start : start + size] = <span class="hljs-string">b&#x27;\x90&#x27;</span> * size<br>    <br><br><span class="hljs-comment"># 写入patch后的文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Write</span>(<span class="hljs-params">oridata</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Wtring File&quot;</span>)<br>    fname, suffix = os.path.splitext(file)<br>    newname = fname +<span class="hljs-string">&#x27;_patched&#x27;</span> + suffix<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(newname,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> newfile:<br>        newfile.write(oridata)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Wtring Done&quot;</span>)<br><br><span class="hljs-comment"># 符号执行找到不可达的Block</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">deobfu_func</span>(<span class="hljs-params">func_addr</span>):<br>    state = proj.factory.blank_state(addr = func_addr)<br>    simgr = proj.factory.simgr(state)<br>    <span class="hljs-comment"># 采用step方式一步一步走，一直到终止</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(simgr.active):<br>        <span class="hljs-keyword">for</span> active <span class="hljs-keyword">in</span> simgr.active:<br>            <span class="hljs-comment">#把可以到达的block舍弃掉</span><br>            Blocks.discard(active.addr)<br>            <span class="hljs-comment">#把当前active转为block，并Hook掉里面的call函数</span><br>            block = proj.factory.block(active.addr)<br>            Hook(block)<br>        simgr.step()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Patching&quot;</span>)<br>    <span class="hljs-comment">#此时仍在Blocks里面的，即为不可执行块，patch掉</span><br>    <span class="hljs-keyword">for</span> block_addr <span class="hljs-keyword">in</span> Blocks:<br>        Patch(proj.factory.block(block_addr))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Patching Done&quot;</span>)<br>    <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 准备一些必要参数 文件地址 以及 去混淆的起始地址</span><br>    parser = argparse.ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&#x27;-f&#x27;</span>, <span class="hljs-string">&#x27;--file&#x27;</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;File to deobfuscate&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;--start&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-keyword">lambda</span> x : <span class="hljs-built_in">int</span>(x, <span class="hljs-number">0</span>), <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Starting address of target function&#x27;</span>)<br>    args = parser.parse_args()<br><br>    file = args.file<br>    start = args.start<br>    <br><span class="hljs-comment">#装载二进制文件</span><br>    proj = angr.Project(file,auto_load_libs=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-comment">#获得原来的二进制数据 为patch做准备</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> orifile:<br>        oridata = <span class="hljs-built_in">bytearray</span>(orifile.read())<br><br>    func_cfg = GetCFG(start)<br>    GetBlock(func_cfg)<br>    deobfu_func(start)<br><br>    Write(oridata)<br><br></code></pre></td></tr></table></figure><p>值得注意的是，每符号执行一次，只能清除一个函数的混淆，如果有多个函数需要清楚混淆，就要重复执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">start_quest</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *a1)</span><br>&#123;<br>  _BYTE v2[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-90h] BYREF</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+48h] [rbp-48h]</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *v5; <span class="hljs-comment">// [rsp+50h] [rbp-40h]</span><br>  <span class="hljs-type">int</span> *v6; <span class="hljs-comment">// [rsp+58h] [rbp-38h]</span><br>  _BYTE *v7; <span class="hljs-comment">// [rsp+60h] [rbp-30h]</span><br>  _BYTE *v8; <span class="hljs-comment">// [rsp+68h] [rbp-28h]</span><br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *v9; <span class="hljs-comment">// [rsp+70h] [rbp-20h]</span><br><br>  v9 = a1;<br>  v8 = &amp;v2[<span class="hljs-number">-16</span>];<br>  v7 = &amp;v2[<span class="hljs-number">-16</span>];<br>  v6 = &amp;v2[<span class="hljs-number">-16</span>];<br>  v5 = &amp;v2[<span class="hljs-number">-16</span>];<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_100);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_214);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_266);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_369);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_417);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_527);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_622);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_733);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_847);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_942);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1054);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1106);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1222);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1336);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1441);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1540);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1589);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1686);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1796);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1891);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_1996);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2112);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2165);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2260);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2336);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2412);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2498);<br>  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;::push_back(&amp;hero, &amp;secret_2575);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::length(v9) - <span class="hljs-number">1LL</span> != legend &gt;&gt; <span class="hljs-number">2</span> )<br>  &#123;<br>    *v6 = legend &gt;&gt; <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::<span class="hljs-built_in">string</span>(v5, v9);<br>    v3 = sanitize_input(v5);<br>    *v6 = v3;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::~<span class="hljs-built_in">string</span>(v5);<br>  &#125;<br>  <span class="hljs-keyword">return</span> *v6;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是运行完，清除<code>start_quest</code>混淆后的效果，可以发现效果不错，而且与之前IDApython的结果不能说差不多吧，只能说一模一样。因为这二者的思路本质上都是一样的，殊途同归了属于是</p><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p>清除混淆后的步骤就比较简单了，虽然它还有一个变量名混淆，就是一个变量赋值来赋值去的，不过这个直接使用IDA的变量重命名就能轻松搞定了。</p><p>对比一下可以发现，IDApython的脚本简洁明了，运行速度也快于Angr，但它的缺点就是在面对复杂情况下的混淆可能就有点乏力，比如这几个变量不再初始为0，而是随机的初始值，可能就得费一番功夫去修改脚本了。而Angr的优势在于它的准确性，因为它就是实打实的去跑，去探索究竟哪一个块是可达的，哪一个块是不可达的，即使面对复杂的控制流混淆，这一本质是仍是通用的。</p><p>二者各有优劣，但都很精彩。</p><p>（当然这题也可以直接符号执行出flag，但是这显然就学不到什么了）</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>recurrence</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>angr</tag>
      
      <tag>idapython</tag>
      
      <tag>debogus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第七章 密码协议</title>
    <link href="/2023/06/01/cryptographic%20protocol/"/>
    <url>/2023/06/01/cryptographic%20protocol/</url>
    
    <content type="html"><![CDATA[<p>急急急 期末预习急急急</p><span id="more"></span><h2 id="密码协议概述"><a href="#密码协议概述" class="headerlink" title="密码协议概述"></a>密码协议概述</h2><ul><li>协议是一种有序过程，每一步必须以此执行；需要至少两个或两个以上的参与者，且最终要完成某种任务，即实现某种功能</li><li>协议对参与者一定是完全 <em><strong>公开</strong></em> 的，且 <em><strong>按照规范</strong></em> 动作</li><li>协议的基本要求是 <em><strong>有效性、公平性、完整性</strong></em></li><li>密码协议也叫 <em><strong>安全协议</strong></em>，是建立在 <em><strong>密码</strong></em> 体制的基础上的一种 <em><strong>交互式通信协议</strong></em> ，借助于密码算法来达到安全功能</li><li>密码协议所能实现的安全功能是多种多样的<ul><li>身份认证、密钥协商、消息 鉴别、公平抛币</li><li>多方计算、秘密共享、不经意传输</li><li>零知识证明</li></ul></li><li>密码协议的应用<ul><li>安全通信</li><li>电子选举</li><li>电子拍卖</li><li>公平电子交易</li></ul></li></ul><h2 id="认证协议"><a href="#认证协议" class="headerlink" title="认证协议"></a>认证协议</h2><h3 id="认证协议概述"><a href="#认证协议概述" class="headerlink" title="认证协议概述"></a>认证协议概述</h3><ul><li><p>认证：一个实体向另一个实体 <em><strong>证明</strong></em> 某种声称的东西过程</p></li><li><p>认证协议：主要目标是确认某个主体的真实性，确保信息的安全性</p></li><li><p>安全可靠的通信 <em><strong>除需进行消息的认证</strong></em> 外，还需 <em><strong>建立一些规范的协议</strong></em> 对 <em><strong>数据来源的可靠性，通信实体的真实性加以认证，以防止欺骗、伪装等攻击</strong></em></p></li><li><p>认证的分类</p><ul><li><em><strong>身份认证</strong></em>： 也称实体认证，验证消息发送者所声称的身份，发起通信或访问的实体是否具有合法身份和相应权限</li><li><em><strong>密钥建立认证</strong></em>：生成、获得加解密密钥</li><li><em><strong>数据源认证</strong></em>： 验证消息与其发送主体的一致性，数据从哪来</li><li><em><strong>消息完整性认证</strong></em>： 验证消息是否被篡改</li></ul></li><li><p>这些认证通常一起进行，也有时单独进行</p><ul><li>即通信及之前首先进行实体认证（身份认证），身份认证之后会协商出会话密钥用于对每个传输数据的数据源认证和完整性认证</li></ul></li></ul><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><h4 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h4><ul><li>身份认证有两个层次：身份证实 和 身份识别 二者差别是是否出示身份<ul><li>身份证实：你是否是你宣称的你，一般的身份认证都是指这种情况<ul><li>验证方首先知道要验证的身份是谁，进一步来证实来访问与之通信的人是否具有该身份</li><li>一般用于A和B确定通信时所用，通常的网络认证协议都是身份证实</li><li>具体技术：<em><strong>输入个人信息，经公式或算法运算所得结果与卡中或数据库中存储信息经公司和运算所结果比较</strong></em></li></ul></li><li>身份识别：我是否知道你是谁<ul><li>验证方不知道来访人是否为合法身份，没有比较确定的目标，<em><strong>只要满足某个条件就可判定身份的特点</strong></em>，验证者一般为权威机构</li><li>一般在实体认证中需要，比如判断来访者是否是在逃犯，是否为密码开启者，是否为本公司员工。通常用 <em><strong>指纹、虹膜技术</strong></em></li><li>具体技术： <em><strong>输入个人信息，经过处理提取模板信息，试着在存储数据库中找出一个与之匹配的模板而后得出结论</strong></em></li></ul></li></ul></li><li>主要验证用户 <em><strong>知道什么</strong></em> 如口令、密钥、私钥、秘密等，验证用户 <em><strong>拥有什么</strong></em>  如IC卡，验证用户 <em><strong>具有什么特征</strong></em> 如指纹、掌纹、虹膜、DNA等<ul><li>基于口令的身份认证是比较重要的一类，具有广泛的应用，因为用户不需要携带或记忆复杂的密钥或认证消息</li></ul></li></ul><h4 id="数据源认证和消息完整性认证的区别"><a href="#数据源认证和消息完整性认证的区别" class="headerlink" title="数据源认证和消息完整性认证的区别"></a>数据源认证和消息完整性认证的区别</h4><ul><li><p>数据源认证 <em><strong>一定</strong></em> 涉及通信，是一种安全服务</p><p>消息完整性认证 <em><strong>不一定</strong></em> 涉及通信，可用于存储的数据</p></li><li><p>数据源认证 <em><strong>一定</strong></em> 涉及消息源识别</p><p>而消息完整性 <em><strong>不一定</strong></em> 涉及该过程</p><p>比如用户A将一个由用户C签名的消息文件发给用户B，那么用户B能够通过验证C的签名判断消息完整性，但是消息的来源却不是C而是A</p></li><li><p>数据源认证 <em><strong>一定</strong></em> 涉及确认消息的新鲜性</p><p>而数据完整性却 <em><strong>无此必要</strong></em></p><p>比如一组老的数据，或者重放的数据可能由完善的数据完整性，而是数据源认证要求确认收到的消息是新鲜的，即是当前新发送的，而不是旧消息的重放</p><h4 id="认证需求"><a href="#认证需求" class="headerlink" title="认证需求"></a>认证需求</h4></li><li><p>有的协议只需要认证身份</p></li><li><p>有的协议除了认证身份还需要建立之后通信的密钥以保护通信安全，即身份认证与密钥协商（密钥建立确认协议）</p></li><li><p>有的协议主要考虑对消息源的认证，这时一般首先要认证身份并建立密钥，然后再基于该会话密钥对传输的每个消息进行认证，以使收方确信收到的消息来自发方，而且不是重放，在顺序、时间等方面都是正确的，即完整性</p></li></ul><h4 id="常见攻击"><a href="#常见攻击" class="headerlink" title="常见攻击"></a>常见攻击</h4><ul><li>常见针对认证和密钥建立协议的攻击<ul><li>重放攻击 Replay attack</li><li>中间人攻击 Man-in-the-middle</li><li>已知密钥攻击 从以前用过的密钥确定新密钥</li><li>假冒攻击 Impresonation attack</li><li>篡改或替换</li><li>字典攻击 Dictionary attack 针对口令的一类攻击</li><li>拒接服务攻击</li></ul></li></ul><h2 id="基本认证技术"><a href="#基本认证技术" class="headerlink" title="基本认证技术"></a>基本认证技术</h2><ul><li>证明消息的新鲜性和主体活现性的标准机制</li><li>双向认证和单向认证</li><li>包含可信第三方的认证</li></ul><h3 id="消息的新鲜性和主体的活现性"><a href="#消息的新鲜性和主体的活现性" class="headerlink" title="消息的新鲜性和主体的活现性"></a>消息的新鲜性和主体的活现性</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>消息的新鲜性，即实时性是数据源认证所不可或缺的一部分，而在这一过程中主体也要考虑 <em><strong>通信对端的身份真实性</strong></em> 以及 <em><strong>是否在线，即主体活现性</strong></em> ，因此证明消息的新鲜性或主体的活现性就成为认证协议的最基本组成部分</li><li>消息的新鲜性经常伴随着主体活现性的认证，因为以新鲜性讨论为主</li><li><em><strong>消息的新鲜性也称为实时性</strong></em></li><li>新鲜性（实时性）对防治消息的重放攻击极为重要，一种方法是对交换的每一条消息都加上一个<em><strong>序列号</strong></em>，一个新消息仅当它有正确的序列号才被接收。这种方法的困难性是要求 <em><strong>每个用户分别记录</strong></em> 与其他每一用户交换的消息序列号，增加用户负担，因此 <em><strong>序列号方法一般不用于认证和密钥交换</strong></em></li></ul><h4 id="两种实现消息新鲜性的技术"><a href="#两种实现消息新鲜性的技术" class="headerlink" title="两种实现消息新鲜性的技术"></a>两种实现消息新鲜性的技术</h4><ul><li><p>由两种方式实现消息新鲜性：时间戳 和 询问应答机制</p><ul><li><p>时戳：</p><p>如果A消息收到的消息包括时戳，且在A看来这一时戳充分接近自己的当前时刻，A才认为收到的消息是新的并接受之，这种方案 <em>要求所有各方的时钟是同步的</em></p></li><li><p>询问-应答：</p><p>用户A向B发出一个 <em>一次性随机数作为询问</em> ，如果B收到发来的消息（应答），也包含一正确的一次性随机数，A就认为B发来的消息是新的并接受之</p></li></ul></li><li><p>缺点</p><ul><li>时间戳不能用于面向链接的应用过程<ul><li>这是由于 <em>时戳法在实现时固有的困难性</em></li><li>首先是需要在 <em>不同的处理器时钟之间保持同步</em> ，那么 <em>所用的协议必须是容错的以处理网络错误</em> ，并且是安全的以对付恶意攻击</li><li>第二，如果 <em>协议中任一方的时钟出现错误而暂时失去了同步</em> ，则将使敌手攻击成功的可能性增加</li><li>最后还由于 <em>网络本身存在延迟</em> ，因此不能期望协议的各方能保持精确的同步。 所以任何基于时戳的处理过程、协议等都 <em>必须允许同步有一个误差范围</em> ，<em><strong>考虑到网络本身的延迟</strong></em>， <em>误差范围应足够大</em> ，<em><strong>考虑到可能存在攻击</strong></em>， <em>误差范围又应该足够小</em></li></ul></li><li>询问-应答方式则不适合于无连接的应用过程<ul><li>这是因为无连接传输以前需经询问-应答这一额外握手过程，这与无连接应用过程的本质特性不符</li><li>对于无连接的应用程序来说，利用某种安全的 <em>时间服务器</em> 保持各方始终同步是防止重放攻击最好的方法</li></ul></li><li>关于有状态和无状态的协议<ul><li>如果协议的运行需要一些历史和当前的状态作为上下文来维护，则称为有状态的协议，这样一次协议的运行要考虑历史的状态，会造成负担或者失同步的问题</li><li>如果每次协议运行独立于历史状态参数，则是无状态的，实现和资源占用更少</li></ul></li></ul></li></ul><h3 id="双向认证和单向认证"><a href="#双向认证和单向认证" class="headerlink" title="双向认证和单向认证"></a>双向认证和单向认证</h3><ul><li><p>A 和 B是网络的两个用户 ，他们想过网络先建立安全的共享密钥在进行保密通信</p><p><em>A 和 B 如何确信自己正在和通信的人是 B 和 A 而不是 C呢？</em> 即双方的身份认证</p></li><li><p>这种通信方式为 <em>双向通信</em> ，此时的认证称为 <em>相互认证</em></p><p><em>双向认证也叫相互认证 双方认证等</em></p></li><li><p>类似地 对于 <em>单向通信</em> 来说，认证称为 <em>单向认证</em></p></li></ul><h3 id="包含可信第三方的认证"><a href="#包含可信第三方的认证" class="headerlink" title="包含可信第三方的认证"></a>包含可信第三方的认证</h3><ul><li>A 和 B 直接进行认证的前提是二者之间具有共享的密钥，有时在实际应用中，这种方式并不实用，因为用户多是两两用户之间都要共享密钥，因此一种更为常见的方式是基于可信第三方的认证</li><li>这时，双方都与可信第三方共享初始密钥，系统扩展性好，便于密钥管理，借助可信第三方提供的帮助来实现认证和密钥协商</li><li>可信第三方可以在线也可以离线</li></ul><h4 id="建立共享密钥"><a href="#建立共享密钥" class="headerlink" title="建立共享密钥"></a>建立共享密钥</h4><ul><li><p>A 和 B 两个用户在 <em>建立共享密钥时</em> 需要考虑的核心问题是 <em><strong>保密性和实时性</strong></em></p></li><li><p>保密性： 为防止会话密钥的伪造或泄露，<em>会话密钥在通信双方之间交换时应为密文形式，所以通信双方事先就应该有密钥或公开钥</em></p></li><li><p>实时性即新鲜性，可使用前述的基本认证技术（时间戳 and 询问-应答）</p></li><li><p>通信双方建立共享密钥时可采用 <em>对称密钥加密体制</em> 和 <em>公钥加密体制</em></p></li></ul><h3 id="基于公钥加密和会话密钥的分配协议"><a href="#基于公钥加密和会话密钥的分配协议" class="headerlink" title="基于公钥加密和会话密钥的分配协议"></a>基于公钥加密和会话密钥的分配协议</h3><ul><li>由于 <em>公钥加密的速度过慢</em> ，因此进行保密通信不太合适，但 <em>用于分配对称密钥密码体制的密钥却非常合适</em></li></ul><h4 id="密钥分配"><a href="#密钥分配" class="headerlink" title="密钥分配"></a>密钥分配</h4><ul><li><p>下图表示简单使用公钥加密算法建立会话密钥过程，如果A希望与B通信，可通过以下几步建立会话密钥</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202306161524512.png"></p></li></ul><ol><li>A产生自己的一对密钥$\lbrace PK_A,SK_A \rbrace$, 并向B发送 $PK_A \left| \right| ID_A$,其中$ID_A$ 表示A的身份</li><li>B产生会话密钥 $K_S$ ,并用A的公开钥 $PK_A$ 对 $K_S$ 加密后发往A</li><li>A由 $D_{SKA} \left[E_{PK_A} \left[K_S \right]\right]$ 恢复密钥，因为只有A能解读 $K_S$ ，所以仅A和B知道这一共享密钥</li><li>A销毁 $\lbrace PK_A SK_A \rbrace$ ,B销毁 $PK_A$</li></ol><ul><li>A、B现在可以用单钥加密算法以 $K_S$ 作为会话密钥进行保密通信，通信完成后，又都将 $K_S$ 销毁</li><li>这种分配方法尽管简单，但却由于A、B双方在通信前和完成通信后，<em>都未存储密钥</em> 因此，<em>密钥泄露的危险性为最小，且可以防止双方的通信被敌手监听</em><ul><li>每次公私钥由发方临时产生</li></ul></li><li>但由于公钥缺少证书管理机构认证且非物理传输容易受到主动攻击</li></ul><h4 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h4><p>如果敌手E已接入A、B双方的通信信道，就可通过以下不被察觉的方式截获双方的通信：</p><ol><li><p>E截获A的发送后，建立自己的一对密钥 $\lbrace PK_E,SK_E\rbrace$, 并将 $PK_E \left| \right | ID_A$ 发送给B</p><p>即把原本要发送的$PK_A$ 替换为$PK_E$</p></li><li><p>B产生会话密钥 $K_S$ 后，将 $E_{PKE}\left[K_S \right]$ 发送出去</p></li><li><p>E截获B发送的消息后，由 $D_{PKE} \left[ E_{PK_E}\left[ K_S\right] \right]$ 解读出 $K_S$</p></li><li><p>E再将 $E_{PK_A}\left[K_S \right]$ 发送 A</p></li></ol><p>现在A和B知道 $K_S$ ，但并未意识到 $K_S$ 已被E截获，A、B在用$K_S$ 通信时，E就可以实时监听</p><h2 id="Diffie-Hellman-密钥交换"><a href="#Diffie-Hellman-密钥交换" class="headerlink" title="Diffie-Hellman 密钥交换"></a>Diffie-Hellman 密钥交换</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li><p>密钥交换是实现安全通信的基础</p><p>商用加密算法AES和DES需要在安全通信之前，实现通信双方的密钥共享</p></li><li><p>密钥交换的方法</p><ul><li>基于RSA的密钥交换</li><li>基于KDC技术（Key Distributed Center，密钥分发中心)</li><li><em><strong>Diffile-Hellman密钥交换（简称：DH算法）</strong></em></li><li>基于物理层的密钥交换</li></ul></li><li><p>DH算法是不安全信道下实现安全密钥共享的一种方法，由 W.Diffie 和 M.Hellman 在1976年提出的第一个公开的公钥密码算法</p></li></ul><h3 id="交换流程"><a href="#交换流程" class="headerlink" title="交换流程"></a>交换流程</h3><ul><li>用户A和B协商一个<em><strong>素数p</strong></em>，以及该素数的<em><strong>本原元g</strong></em></li><li>用户A选择一个随机数 $x，x&lt;p$ ，用户B选择一个随机数 $y，y&lt;p$</li><li>用户A计算 $Y_A &#x3D; g^x \bmod p$ ，用户B计算 $Y_B &#x3D; g^y \bmod p$ </li><li>用户A，用户B交换 $Y_A$ ，$Y_B$</li><li>用户A计算密钥 $K &#x3D; {Y_B}^x &#x3D; g^{xy} \bmod p$ 用户B计算密钥 $K &#x3D; {Y_A}^y &#x3D; g^{xy} \bmod p$</li><li>完成密钥协商</li></ul><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202306161606279.png"></p><ul><li>例子<ul><li>假设素数 $p &#x3D; 97$ ，其本原元 $g&#x3D;5$</li><li>用户A选取随机数 $x&#x3D;36$ ，用户B选取随机数 $ x&#x3D; 58 $</li><li>用户A计算：$Y_A \equiv g^x \equiv 5^{36}  \equiv 50 \bmod  97 $</li><li>用户B计算：$Y_B \equiv g^y \equiv 5^{58}\equiv 44 \bmod 97 $</li><li>交换 $Y_A$ ，$Y_B$</li><li>用户A计算密钥：$K \equiv {Y_B}^x \equiv g^{xy} \equiv 44^{36}  \equiv 75\bmod 97$</li><li>用户B计算密钥：$K \equiv {Y_A}^y \equiv g^{xy} \equiv 50^{58}  \equiv 75\bmod 97$</li></ul></li></ul><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><h4 id="安全性分析"><a href="#安全性分析" class="headerlink" title="安全性分析"></a>安全性分析</h4><ul><li><p>公开可截获的信息 <em><strong>素数 $p$<em><strong>、</strong></em>本原元 $ g $</strong></em> 、中间值 $Y_A$ $Y_B$</p></li><li><p>若攻击者想要获取密钥 $K$ 必须通过<br>$ Y_A \equiv g^x \bmod p $ 和 $ Y_B \equiv g^y \bmod p $</p><p>计算出 $x$ 和 $y$ ，然而这是一个很困难的问题</p></li><li><p>因此，算法的安全性基求于离散对数的困难性</p></li></ul><h4 id="其余安全问题"><a href="#其余安全问题" class="headerlink" title="其余安全问题"></a>其余安全问题</h4><ul><li>容易遭受阻塞攻击：因为幂运算时计算密性的，当敌手发起大量的密钥请求，受攻击者将花费大计算资源来做幂运算</li><li>容易遭受 <em><strong>中间人攻击</strong></em> ：敌手可分别冒充用户A和用户B中的一方，与另一方交换密钥，从而实现监听</li></ul><h4 id="中间人攻击-1"><a href="#中间人攻击-1" class="headerlink" title="中间人攻击"></a>中间人攻击</h4><ul><li><p>现有用户A 、用户B  、中间人C</p></li><li><p>用户A 、用户B 正常协商一个 <em><strong>素数</strong></em> $p$ ,<em><strong>本原元</strong></em> g </p></li><li><p>用户A 、用户B 正常选择自己的随机数 $x$ , $y$ ，并计算 </p><p>$Y_A \equiv g^x \bmod p$ 和 $Y_B \equiv g^y \bmod p$</p></li><li><p>中间人C 选择随机数 $z$ ,计算 $Y_C \equiv g^Z \bmod p$ </p></li><li><p>中间人截获用户A传递的 $Y_A$ </p><ul><li>利用 $Y_A$ 计算 $K_{AC} \equiv {Y_A}^z \equiv g^{xz} \bmod p$</li><li>并将 $Y_C$ 传给用户B</li><li>用户B根据 $Y_C$ 计算 $K_{BC} \equiv {Y_C}^y \equiv g^{yz}\bmod p$</li></ul></li><li><p>中间人截获用户B传递的 $Y_B$ </p><ul><li>利用 $Y_B$ 计算 $K_{BC} \equiv {Y_B}^z \equiv g^{yz} \bmod p$</li><li>并将 $Y_C$ 传给用户A</li><li>用户A根据 $Y_C$ 计算 $K_{AC} \equiv {Y_C}^x \equiv g^{xz}\bmod p$</li></ul></li><li><p>此时用户A以为共享密钥是 $K_{AC}$ ,用户B以为共享密钥是 $K_{BC}$ ，而中间人拥有 $K_{AC}$ ， $K_{BC}$ ，可以监听用户A和用户B</p></li></ul><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202306161740612.png"></p><h2 id="秘密共享"><a href="#秘密共享" class="headerlink" title="秘密共享"></a>秘密共享</h2><p>问题引入：</p><ul><li>保险柜的开启 <ul><li>保险柜中存放有10个人的共有财产 </li><li>要从保险柜中取出物品，必须有 <em><strong>半数以上</strong></em> 的人在场才可取出，半数以下则不行</li><li>如何构造锁的设计方案</li></ul></li><li>导弹控制发射，重要场所通行检验，通常需要多人同时参与才能生效，需要将秘密分为多人掌管，并且由<em><strong>一定</strong></em> 掌管秘密的人数同时到场才能恢复秘密</li></ul><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><ul><li><p>定义</p><p>秘密 <em>s</em> （通过某种方案）被分割成n个部分，每个部分称为 <em><strong>份额（share）</strong></em> 或 <em><strong>影子（shadow）</strong></em> ，由一个参与者持有，使得： </p><ul><li>由 <em><strong>k</strong></em> 个或多于 <em><strong>k</strong></em> 个参与者所持有的部分信息可重构 <em>s</em> 。 </li><li>由少于 <em><strong>k</strong></em> 个参与者所持有的部分信息则无法重构 <em>s</em> 。 </li><li>称该方案为 <em><strong>$(k，n)$ 秘密分割门限方案</strong></em> ，<em>k</em> 称为门限值，少于 <em><strong>k</strong></em> 个参与者所持有的部分信息得不到 <em>s</em> 任何信息称该 <em><strong>门限方案是完善的</strong></em></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>SYSU</category>
      
      <category>Crypt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第六章 数字签名</title>
    <link href="/2023/05/30/Digital%20Signature/"/>
    <url>/2023/05/30/Digital%20Signature/</url>
    
    <content type="html"><![CDATA[<p>急急急 期末预习急急急</p><span id="more"></span><h2 id="数字签名基本概念"><a href="#数字签名基本概念" class="headerlink" title="数字签名基本概念"></a>数字签名基本概念</h2><h3 id="数字签名概念"><a href="#数字签名概念" class="headerlink" title="数字签名概念"></a>数字签名概念</h3><ul><li><p>使用 <em>公钥</em> 加密技术实现，用于 <em>鉴别数字信息与签名者身份</em> 的方法</p></li><li><p>以 <em>电子方式</em> 存储签名信息，在 <em>数字文档</em> 上身份验证。 接收者和第三方能够 <em>验证</em> 文档 <em>来自</em> 签名者，并且文档签名后 <em>没有被修改</em>，</p></li></ul><p>签名者也 <em>不能否认</em> 对文档的签名</p><p>数字签名必须保障：</p><p>（1） 接收者能够 <em>核实</em> 发送者对文档的签名</p><p>（2） 发送者事后 <em>不能否认</em> 对文档的签名</p><p>（3） <em>不能伪造</em> 对文档的签名</p><h3 id="数字签名载体"><a href="#数字签名载体" class="headerlink" title="数字签名载体"></a>数字签名载体</h3><ul><li>一个签名有 <em>消息</em> 和 <em>载体</em> 两个部分，即签名所表示的 <em>意义</em> 和签名的 <em>物理表现形式</em></li></ul><h4 id="传统签名-VS-数字签名"><a href="#传统签名-VS-数字签名" class="headerlink" title="传统签名 VS 数字签名"></a>传统签名 VS 数字签名</h4><ul><li>传统签名中，签名与文件是一个 <em>物理整体</em><ul><li>具有 <em>共同</em> 的载体</li><li>物理上的 <em>不可分割</em> <em>不可复制</em> 的特性</li><li>签名与文件的 <em>不可分割</em> 和 <em>不能重复</em> 使用</li></ul></li><li>数字签名中，签名与文件是电子形式<ul><li><em>没有固定的物理载体</em> 即签名与文件的物理形式和消息已经分开</li><li>电子载体是可以 <em>任意分割</em> <em>复制</em> 的</li></ul></li><li>传统签名的验证是通过 <em>与存档手迹对照来确定真伪的</em> 是 <em>主观的、模糊的、容易伪造的</em> ，从而也是 <em>不安全的</em></li><li>数字签名则使用 <em>密码</em> ，通过 <em>公开算法可以检验的</em> ，是<em>客观的、精确的、在计算上的是安全的</em></li></ul><h4 id="传统签名基本特点："><a href="#传统签名基本特点：" class="headerlink" title="传统签名基本特点："></a>传统签名基本特点：</h4><ul><li>能与被签文件在物理上 <em>不可分割</em></li><li>签名者 <em>不能否认</em> 自己的签名</li><li>签名 <em>能被伪造</em></li><li><em>容易</em> 被验证</li></ul><h4 id="数字签名是传统签名的数字化，要求："><a href="#数字签名是传统签名的数字化，要求：" class="headerlink" title="数字签名是传统签名的数字化，要求："></a>数字签名是传统签名的数字化，要求：</h4><ul><li>能与所签文件 <em>绑定</em></li><li>签名者 <em>不能否认</em> 自己的签名</li><li>签名 <em>不能被伪造</em></li><li>容易 <em>被自动</em> 验证</li></ul><h4 id="数字签名应具有的特性"><a href="#数字签名应具有的特性" class="headerlink" title="数字签名应具有的特性"></a>数字签名应具有的特性</h4><p>（1） 签名是可信的：任何人可验证前面的有效性</p><p>（2） 签名是不可伪造的：除合法签名者外，其他人伪造签名是困难的</p><p>（3） 签名是不可复制的： 一消息的签名不能复制为另一消息的签名</p><p>（4） 签名的消息是不可改变的：经签名的消息不能被篡改</p><p>（5） 签名是不可抵赖的： 签名者事后不能否认自己的签名</p><p><em>数字签名： 对身份认证，保持数据完整性，不可否认性</em></p><p><em>MAC： 可对身份认证，保持数据完整性，但不具有不可否认性</em></p><h2 id="数字签名的构成"><a href="#数字签名的构成" class="headerlink" title="数字签名的构成"></a>数字签名的构成</h2><h3 id="数字签名方案的构成"><a href="#数字签名方案的构成" class="headerlink" title="数字签名方案的构成"></a>数字签名方案的构成</h3><p>一个数字签名方案包括如下三个算法：</p><ul><li>密钥生成：产生用户的公私钥</li><li>签名算法：产生消息的签名</li><li>验证算法：验收消息的签名是否合法</li></ul><h2 id="数字签名的需求"><a href="#数字签名的需求" class="headerlink" title="数字签名的需求"></a>数字签名的需求</h2><h3 id="需满足条件"><a href="#需满足条件" class="headerlink" title="需满足条件"></a>需满足条件</h3><ul><li>必须相对容易生成该数字签名</li><li>必须相对容易识别和验证该数字签名</li><li><em>伪造</em> 该数字签名在 <em>计算上不可行</em> ，既包括对一个已有的数字签名构造新的消息，也包括对一个消息伪造一个数字签名</li></ul><h3 id="RSA签名算法"><a href="#RSA签名算法" class="headerlink" title="RSA签名算法"></a>RSA签名算法</h3><h4 id="RSA签名体制"><a href="#RSA签名体制" class="headerlink" title="RSA签名体制"></a>RSA签名体制</h4><ul><li>体制参数<ul><li>选两个保密的大素数 p 和 q，计算 $n &#x3D; p*q$ , $\varphi(n) &#x3D; (p-1)\cdot(q-1)$；</li><li>选一整数e，满足 $ 1&lt;e&lt;\varphi(n)$,且 $gcd(\varphi(n),e) &#x3D; 1$</li><li>计算 d，满足 $d \cdot e \equiv 1 \bmod \varphi(n)$;</li><li>以 $\lbrace e,n \rbrace$ 为公钥，$\lbrace d,n \rbrace$ 为私钥</li></ul></li></ul><h4 id="RSA公钥加密体制原理"><a href="#RSA公钥加密体制原理" class="headerlink" title="RSA公钥加密体制原理"></a>RSA公钥加密体制原理</h4><ul><li><p>密钥生成</p><ul><li>选择两个大素数 <em>p</em> 和 <em>q</em></li><li>计算 $ n &#x3D; p \cdot q , \varphi &#x3D; (p-1) \cdot (q-1)$</li><li>随机选取<em>e</em>，要求$ e &lt; n $，<em>e</em> 与 $ \varphi $ 没有公因数，即 <em>e</em> 与 $ \varphi $ 互质</li><li>选取 <em>d</em> 使得 $ ed  \equiv 1 \bmod \varphi(n) $</li><li>公钥是 $ (n,e) $，私钥是 $ (n,d) $</li></ul></li><li><p>签名</p><p>设消息为 $ m \in Z_n $，对其签名为 $$ S \equiv m^d \bmod n $$</p><p><em>S 即为签名</em></p></li><li><p>验证</p><p>接收方在收到消息 <em>m</em> 和签名 <em>s</em> 后，验证 $$ m \equiv s^e \bmod n $$ 是否成立，若成立，则发送方的签名有效</p></li><li><p>安全性： 大数分解的困难性</p><ul><li>如果RSA的模数 <em>n</em> 被成功分解为 $p*q$，则立即获得 $\varphi(n) &#x3D; (p-1) \cdot (q-1) $</li><li>从而能够确定 <em>e</em> 模 $ \varphi(n) $ 的乘法逆元 <em>d</em> ，</li><li>因此攻击成功</li></ul></li><li><p>正确性：</p><ul><li>因为 $ d \cdot e \equiv 1 \bmod \varphi (n) $</li><li>所以 $ s^e \equiv m^{d \cdot e} \equiv m^{1 + k \cdot \varphi (n)} \equiv m^1 \cdot m^{k \cdot \varphi (n)} \equiv m \bmod n $ </li><li>其中 k 为某个整数</li></ul></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>$$ m \equiv S^e \bmod n $$</p><p>（1） 对任意消息 $ y \in Z_n $ ,任何人可以计算 $ x \equiv y^e \bmod n $,因此任何人可以伪造对随机消息 <em>x</em> 的签名</p><p>（2） 如果消息 $x_1$ 和 $x_2$ 的签名分别是 $y_1$ 和 $ y_2$ ，则知道 $x_1,x_2,y_1,y_2$的人可以伪造消息 $x_1 \cdot x_2$的签名$y_1 \cdot y_2 $的签名 </p><p>（3） 在RSA签名方案中，需签名的消息 $ x \in Z_n $，所以每次只能对 $ \lfloor \log_2n \rfloor $位长消息签名，<em>签名速度慢</em></p><p><em>克服缺陷的方法：签名之前先求消息的Hash值</em></p><h3 id="EIGamal-签名算法"><a href="#EIGamal-签名算法" class="headerlink" title="EIGamal 签名算法"></a>EIGamal 签名算法</h3><ul><li>1985年 EIGamal 提出了一个基于离散对数问题的签名方案，后来称为 EIGamal 数字签名方案</li><li>1991年该数字签名方案的变形被美国国家标准局（NIST）确定位数字签名标准（DSS）</li></ul><h4 id="EIGamal签名体制"><a href="#EIGamal签名体制" class="headerlink" title="EIGamal签名体制"></a>EIGamal签名体制</h4><ul><li>体制参数<ul><li>p：大素数</li><li>g：$Z^*_p $的一个生成元</li><li>x：用户A的密钥，$x \in Z^*_p$</li><li>y：用户A的公钥，$y \equiv g^x(\bmod p)$</li><li>K:  随机数，用于计算 $r &#x3D; g^k \bmod p$, $r$ 是签名之一</li></ul></li><li>参数要求：<ul><li><em>P</em> 应为150位以上的十进制数，500位以上的二进制数，<em>p-1</em> 应有大素数因子</li><li><em>K</em> 必须是保密而且必须是一次性的<ul><li><em>K</em> 泄露，则敌手可以计算 $ y^K $从而可以计算出 <em>M</em></li><li>使用同一 <em>K</em> 加密不同的明文 <em>M</em> ，<em>M’</em> ，如果敌手知道 <em>M</em> 就可以由 $ C_2 &#x2F; C_2^{‘} &#x3D; M &#x2F; M^{‘}$求出<em>M‘</em></li></ul></li></ul></li></ul><h4 id="EIGamal公钥加密体制原理"><a href="#EIGamal公钥加密体制原理" class="headerlink" title="EIGamal公钥加密体制原理"></a>EIGamal公钥加密体制原理</h4><ul><li><p>密钥生成</p><ul><li>选取大素数 <em>p</em> ，$g \in Z^*_n $ 是一个生成元， <em>p</em> 和 <em>g</em> 公开</li><li>随机选整数 $ x, 1 \leq x \leq p-2 $,计算 $ y &#x3D; g^x \bmod p $</li><li>公钥为 <em>y</em> ，私钥为 <em>x</em></li></ul></li><li><p>签名</p><p>对于消息 <em>m</em> ，首先随机选取整数 <em>k</em> ，$ 1 \leq k \leq p-2 $,然后计算 </p><p>$$ r &#x3D; g^k \bmod p, s &#x3D; (h(m) -x \cdot r) \cdot k^{-1} \bmod (p-1) $$</p><p>则 <em>m</em> 的签名为 $(r,s)$,其中 <em>h</em> 为 <em>Hash</em>函数</p></li><li><p>验证</p><p>接收方在收到消息 <em>m</em>  和 签名 $(r,s)$ 后，验证</p><p>$$ y^r \cdot r^s &#x3D; g^{h(m)} \bmod p$$</p><p>如果等式成立 ，则 $(r,s)$ 是消息 <em>m</em> 的有效签名，反之无效</p></li><li><p>正确性</p><ul><li><p>因为 $ s &#x3D; (h(m) - x \cdot r) \cdot k^{-1} \bmod (p-1)$</p></li><li><p>所以 $ s \cdot k + x \cdot r &#x3D; h(m) \bmod (p-1)$</p></li><li><p>所以  $ g^{h(m)} &#x3D; g^{(s \cdot k + x \cdot r)} &#x3D; g^{sk} \cdot g^{xr} &#x3D; y^r \cdot r^s \bmod p$</p></li><li><p>note: $y &#x3D; g^x \bmod p$ ,  $r &#x3D; g^k \bmod p$</p><p>​  如果消息 <em>m</em> 被篡改，则 <em>h(m)</em> 发生改变，从而 $y^r \cdot r^s \neq g^{h(m)} $ 起到验证作用</p></li></ul></li></ul><h4 id="讨论两问题"><a href="#讨论两问题" class="headerlink" title="讨论两问题"></a>讨论两问题</h4><p>  （1） 用EIGamal方案计算一个签名时，使用的随机数 <em>K</em> 能不能被泄露</p><p>  （2） 若Bob使用相同的 <em>K</em> 的值来签名不同的两份消息， Oscar能否攻破这个体制</p><p>Answer1:</p><ul><li>由于私钥 <em>x</em> 是保密的，所以如果攻击者想要得到这个密钥，必须求解离散对数问题 $\log_gy$ ,这是一个困难问题。但是随机数 <em>K</em> 泄露，则可解 $ x &#x3D; (h(m) - sk)r^{-1} \bmod (p-1)$ 得到 <em>x</em>，方案被攻破</li><li>note：为什么 <em>K</em> 泄露方案会被攻破呢<ul><li>先看看公开参数有什么 <ul><li>大素数 <em>P</em></li><li>生成元 <em>g</em></li><li>公钥 <em>y</em> ，<em>y</em> 由 $ y&#x3D; g^x \bmod p$ 得到</li><li>签名一 <em>r</em> ，<em>r</em> 由 $r&#x3D;g^k \bmod p$ 得到</li><li>签名二 <em>s</em> , <em>s</em> 由 $s &#x3D; (h(m) -x \cdot r) \cdot k^{-1} \bmod (p-1)$ 得到</li></ul></li><li>现在假设我们是中间人，我们可以获得这些消息，并想篡改消息 <em>m</em>，但是一旦篡改消息 <em>m</em>，会导致 <em>h(m)</em> 发生改变，从而导致 $$y^r \cdot r^s \neq g^{h(m)} $$ ，接收者就知道消息已被篡改。因此想要不被发现，必须连带着把 <em>r</em> ,<em>s</em> 也一起改变，即重新计算  $$s &#x3D; (h(m) -x \cdot r) \cdot k^{-1} \bmod (p-1) $$ ，得到 $s’$ ,并发送篡改后的签名 $(r,s’)$，这样接收方就无法判断消息是否被篡改</li><li>所以现在的问题是，如何计算 $s’$ ? 看看 <em>s</em> 的生成式，我们必须知道 <em>x</em> 和 <em>k</em> 才能计算 <em>s</em> </li><li>我们手上现在跟 <em>K</em> 相关的式子只有两条 $r&#x3D;g^k \bmod p$ 和 $s &#x3D; (h(m) -x \cdot r) \cdot k^{-1} \bmod (p-1)$ ，显然我们应该用前面那一条式子，因为后面的式子有两个未知数</li><li>那就来看看第一个式子吧， 我们现在知道 $r, g, p$，需要求 <em>g</em> 的几次方模 <em>p</em> 等于 <em>r</em> ，然而这是个很困难的问题，也就是离散对数问题，EIGamal的安全性就基于此。</li><li>一旦 <em>K</em> 泄露，就可以计算出 <em>x</em> ，整个消息就可以被篡改并进行重新签名得到 $s’$</li></ul></li></ul><p>Answer2:</p><ul><li><p>不可用同一个 <em>K</em> 做两次签名。若Bob利用相同 <em>K</em> 签名两次，即签名分别为 $(r,s_1)$ ,$(r,s_2)$ ,则Oscar可以联立方程 </p><p>$$<br>\begin{cases}<br>h(m1) &#x3D; xr +ks_1 \bmod (p-1) \newline h(m2) &#x3D; xr +ks_2 \bmod (p-1)<br>\end{cases}<br>$$</p><p>可得： $ x &#x3D; [h(m_1)s_2 - h(m_2)s_1] (s_2 - s_1) ^{-1} r^{-1} \bmod (p-1) $</p></li><li><p>note： 上式乘 $s_2$, 下式乘 $s_1$ 即可</p></li></ul><p>​  </p><h3 id="DSS签名算法"><a href="#DSS签名算法" class="headerlink" title="DSS签名算法"></a>DSS签名算法</h3><p>数字签名标准DSS(Digital Signature Standard)是由美国NIST公布的联邦信息处理标准FIPS PUB 186，最初于1991年公布，在考虑了公众归队其安全性的反馈意见后，于1993年公布了其修改版</p><ul><li><p>DSS的基本方式</p><p>首先将DSS与RSA的签名方式做一比较。RSA算法既能用于加密和签名，又能用于密钥交换。与此不同，DSS使用的算法只能提供数字签名功能。下图是比较</p></li></ul><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202305311621956.png" alt="1"></p><h4 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h4><ul><li><p>设 $512 \leq L \leq 1024$ 且 $L$ 是64的倍数，选取 $2^{L-1} &lt; p &lt;2^L$ 大素数，其满足存在160比特的素数$q|p-1$</p></li><li><p>随机选取整数 $h$ ,$ 1 &lt; h &lt;p-1 $ ,且使 $ g &#x3D; h^{(p-1) &#x2F;q} \bmod p $ , $p,g$ 公开 </p></li><li><p>随机选取整数 $x$ , $1 \leq x \leq q-1 $ , 计算 $ y &#x3D; g^x \bmod p $</p></li><li><p>公钥为 $y$, 私钥为 $x$</p></li></ul><h4 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h4><ul><li>对于消息 <em>m</em> ，首先随机选取一个整数 <em>k</em>，$1 \leq k \leq p-2 $ ,然后计算<br>$$ {left}<br>\begin{align}<br>&amp;r &#x3D; (g^k \bmod p ) \bmod q \<br>&amp;s &#x3D; (h(m) + xr) K^{-1} \bmod q<br>\end{align}<br>$$<br>则 <em>m</em> 的签名为 $(r,s$) ,其中 <em>h</em> 为Hash函数SHA</li></ul><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><ul><li><p>接收方收到消息 <em>m</em> 和 签名 $(r,s$)，后计算<br>$$<br>\begin{align}<br>u_1 &amp;&#x3D; h(m) s^{-1} \bmod q \newline<br>u_2 &amp;&#x3D; rs^{-1} \bmod q<br>\end{align}<br>$$</p></li><li><p>验证等式<br>$$<br>(g^{u_1}y^{u_2} \bmod p) \bmod q &#x3D;r<br>$$</p></li><li><p>如果等式成立，则$(r,s)$ 消息 <em>m</em> 的有效签名</p></li></ul><h4 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h4><ul><li><p>因为 $u_1 + xu_2 \bmod q &#x3D; (h(m) + xr)s^{-1} \bmod q &#x3D; k$</p></li><li><p>所以<br>$$<br>\begin{align}<br>g^{u_1}y^{u_2} \bmod p \bmod q &amp;&#x3D; g^{u_1+ xu_2} \bmod p \bmod q \newline<br>&amp;&#x3D; g^k \bmod p \bmod q \newline<br>&amp;&#x3D;r<br>\end{align}<br>$$</p></li></ul><h2 id="特殊性质的签名算法"><a href="#特殊性质的签名算法" class="headerlink" title="特殊性质的签名算法"></a>特殊性质的签名算法</h2><h3 id="盲签名"><a href="#盲签名" class="headerlink" title="盲签名"></a>盲签名</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>盲签名方案是在发送者 <em>A</em> 和发送者 <em>B</em> 之间的双方协议。其基本思想如下：<ul><li><em>A</em> 发送给 <em>B</em> 一段消息，<em>B</em> 对它签名并送回 <em>A</em> </li><li>从这个签名 <em>A</em> 能够计算 <em>B</em> 关于 <em>A</em> 预先所选消息 <em>m</em> 的签名</li><li>协议完成时 <em>B</em> 既不知道消息 <em>m</em> 也不知道消息的签名</li></ul></li><li>盲签名的目的是防止 <em>B</em> 看到消息和签名，从而使 <em>B</em> 以后不能将所签消息和发送者 <em>A</em> 联系起来</li></ul><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li>发送者 <em>A</em>（客户）不希望签名者 <em>B</em>（银行）能够将一条先验消息 <em>m</em> 及其签名 $S_B(m)$ 与协议的特定实例相联系</li><li>这个特性在电子现金应用中可能很重要，因为那里的消息也许表示 <em>A</em> 所花的金钱数额</li><li>当 <em>m</em> 和 $S_B(m)$ 提交给 <em>B</em> 进行支付时， <em>B</em> 无法推断原先接收签名的是谁。这就是允许 <em>A</em> 的匿名性，从而 <em>A</em> 的消费模式不能被监测</li></ul><h4 id="所需组件"><a href="#所需组件" class="headerlink" title="所需组件"></a>所需组件</h4><ul><li>签名者 <em>B</em> 的一种数字签名机制，用 $S_B(x)$ 记 <em>B</em> 对 <em>x</em> 签名</li><li>函数 $f$ 和 $g$ （只有发送者知道），满足$g(S_B(f(m))) &#x3D; S_B(m)$ 。其中 $f$ 叫盲化函数，$g$ 叫去盲函数，$f(m)$ 叫做盲消息。此条对 $S_B$ 和 $g$ 的选择加了许多限制</li></ul><h4 id="Chaum-盲签名协议"><a href="#Chaum-盲签名协议" class="headerlink" title="Chaum 盲签名协议"></a>Chaum 盲签名协议</h4><ul><li>摘要：发送者 <em>A</em> 接收 <em>B</em> 关于盲消息的签名。由此 <em>A</em> 计算 <em>B</em> 关于 <em>A</em> 预先所选消息 <em>m</em> 的签名，$0 \leq m \leq n-1 $ 。<em>B</em> 既没有消息 <em>m</em> 也没有 <em>m</em> 相关签名的知识<ul><li><em>B</em> 的RSA公钥和私钥分别是 $(n,e)$ 和 $d$ 。<em>k</em> 是 <em>A</em> 随机选择秘密数，满足 $ 0 \leq k \leq n-1$ 且 $gcd(n,k) &#x3D;1 $ </li><li>协议步骤<ul><li>（盲化） <em>A</em> 计算 $m^* &#x3D; mk^e \bmod n$</li><li>（签名） <em>B</em> 计算 $s^* &#x3D; (m^*) ^d \bmod n $</li><li>（去盲） <em>A</em> 计算 $s&#x3D;k^{-1} s^* \bmod n$</li></ul></li></ul></li><li>正确性<ul><li>显然 <em>s</em> 是 <em>m</em> 的签名 ，即 $s&#x3D;m^d \bmod n$</li><li><em>B</em> 既没有消息 <em>m</em> 也没有 <em>m</em> 相关签名 <em>s</em> 的知识</li></ul></li></ul><h4 id="不可追踪电子现金"><a href="#不可追踪电子现金" class="headerlink" title="不可追踪电子现金"></a>不可追踪电子现金</h4><ul><li><p>Chaum, Fiat, 和Naor提出一个不可追踪电子现金方案。 </p><ul><li>加入者A获取来自银行的电子现金货币 – A可以将此货币在商店B花掉，而B无需与银行在线验证货币的真实性。 – 当B在银行将电子货币兑现时，银行不能将其与A联系起来。 </li><li>如果A企图以该货币花两次（重复消费），那么A的身份就会暴露。</li></ul></li><li><p>Okamoto提出一种可分电子现金方案。可分电子硬币是一个 与金钱数值关联的元素，可用来进行多次电子买卖，前提是 所有交易的金钱总额不超过硬币数额</p></li></ul><h3 id="不可否认签名"><a href="#不可否认签名" class="headerlink" title="不可否认签名"></a>不可否认签名</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li>不可否认的数字签名由 CHaum 和 van Antwerpen 在1989年提出</li><li>不可否认签名没有签名者的合作，接收者无法验证签名</li></ul><h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><ul><li>实体 <em>A</em>（客户）希望访问被实体 <em>B</em>（银行）控制的某个安全区域。比如该安全区域可能是存放保险箱的房间。在许可访问之前，<em>B</em> 要求 <em>A</em> 签署一份时间和日期的文件。如果 <em>A</em> 采用了不可否认签名，那么在验证过程中没有 <em>A</em> 的直接参与， （在以后的日期）<em>B</em> 就不能向任何人证明 <em>A</em> 使用过安全区域中的设施</li><li>假定某大公司 <em>A</em> 制作了一个软件包。<em>A</em> 对软件包签名并将它卖给实体 <em>B</em>，而 <em>B</em> 决定将其拷贝再卖给第三方<em>C</em>，那么没有 <em>A</em> 的合作 <em>C</em> 就无法验证该软件是否正版<ul><li>当然，这种措施并 <em>不能阻止</em> <em>B</em> 用它自己的签名重新签署软件包，但因此 <em>B</em> 也就 <em>无法利用</em> 与 <em>A</em> 名气相关的市场利益。而且 <em>追踪</em>  <em>B</em> 的欺诈行为也将很 <em>容易</em></li></ul></li></ul><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul><li>一个不可否认签名方案有三部分组成：</li><li>签名算法</li><li>验证协议</li><li>否认协议</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>签名者可以声称一个签名是伪造的，在这种情况下，如果 <em>签名者拒绝</em> 参加验证，就可认为签名者有欺骗行为。如果签名者 <em>参加</em> 验证，由否认协议就可推断出签名的 <em>真伪</em> 。 </li><li>否认协议需要做到以下两点 </li><li>B能使A相信一个不合法的签名是伪造的。</li><li>B以很小的概率使A相信一个合法签名是伪造的</li><li>不可否认签名的一个 <em>不足之处</em> 是签名者有可能不在场或者拒绝合作，而导致签名无法被接收者验证。 <ul><li>Chaum提出“指定验证者签名”的概念，其中签名者指定某 实体作为签名的验证者。 </li><li>一旦签名者不在场或者拒绝合作，验证者就有权力与接收 者交互来检查签名。</li><li>验证者不能产生签名者的签名</li></ul></li></ul><h3 id="群签名"><a href="#群签名" class="headerlink" title="群签名"></a>群签名</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><ul><li>1991年，Chaum和Van Heijst提出群签名方案。 </li><li>该方案允许群众的某个成员以群的名义匿名地签发消息。满足下述三个条件：<ul><li><em>只有</em> 群中的成员才能代表群进行签名；</li><li>签名的接收者 <em>能验证</em> 签名是哪一个群的一个合法签名，但 <em>不能分辨</em> 具体的签名者。 </li><li>一旦出现争端，可借助群成员或一个可信的机构能 <em>识别出签名者</em></li></ul></li></ul><h4 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h4><ul><li>一个公司有几台计算机，每台都联在局域网上。公司的 <em>每个部门</em> 有其自己的打印机（也连在局域网上），并且 <em>只有本部门</em> 的人员才能允许使用其部门的打印机。因此，打印前必须 <em>确认</em> 用户在哪个部门工作。同时公司为了保密，<em>不可以暴露用户的身份</em>。然而，如果有人 <em>滥用</em> 打印机，主管者必须能 <em>找出</em> 是谁在滥用打印机</li></ul><h4 id="组成-1"><a href="#组成-1" class="headerlink" title="组成"></a>组成</h4><p>（1）建立（setup） 一个用以产生群公钥和私钥的多项式概率算法。</p><p>（2）加入（join） 一个用户和群管理员之间的交互式协议。执行该协议可以使用户成为群成员，群管理员得到群成员的秘密的成员管理密钥，并产生群成员的私钥和成员证书。 </p><p>（3）签名（sign） 一个概率算法，当输入一个消息、一个群成员 的私钥和一个群公钥后，输出对该消息的签名。 </p><p>（4）验证（verify） 给定一个消息的签名和一个群公钥后，判断该签名相对于该群公钥是否有效。 </p><p>（5）打开（open） 给定一个签名、群公钥和群私钥的条件下确定 签名者的身份</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>① 正确性（correctness）</p><p>② 不可伪造性（unforgeability）  </p><p>③ 匿名性（anonymity）  </p><p>④ 不可关联性（unlinkability）  </p><p>⑤ 可跟踪性（traceability） </p><p>⑥ 可开脱性（exculpability）  </p><p>⑦ 抗联合攻击（coalition-resistance）</p><h3 id="代理签名"><a href="#代理签名" class="headerlink" title="代理签名"></a>代理签名</h3><p>&lt;TODO：概念&gt; (他PPT也妹给啊)</p><h4 id="组成-2"><a href="#组成-2" class="headerlink" title="组成"></a>组成</h4><ul><li>系统建立  选定代理签名方案的系统参数，用户的密钥等</li><li>签名权力的委托  原始签名者将自己的签名权力委托给代理签名 者</li><li>代理签名的产生  代理签名者代表原始签名者产生代理签名</li><li>代理签名的验证 验证人验证代理签名的有效性。</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>根据签名权力委托的方式不同，代理签名可以分为以下几类： </p><p>（1）完全代理（full delegation）  </p><p>（2）部分代理（partial delegation） </p><p>（3）具有证书的代理（delegation by warrant） </p><p>（4）具有证书的部分代理（partial delegation with warrant）</p><p>根据原始签名者能否产生同代理签名者一样的签名，代理签名又 可分为两类： </p><p>（1）代理非保护（proxy-unprotected） 原始签名者能够产生有效的 代理签名。 </p><p>（2）代理保护（proxy-protected） 原始签名者不能够产生有效的代 理签名</p><h4 id="强代理方案满足性质："><a href="#强代理方案满足性质：" class="headerlink" title="强代理方案满足性质："></a>强代理方案满足性质：</h4><p>① 可区分性（distinguishability）</p><p>② 可验证性（verifiability） </p><p>③ 强不可伪造性（strong unforgeability）  </p><p>④ 强可识别性（strong identifiability）  </p><p>⑤ 强不可否认性（strong undeniability） ⑥ 防止滥用（prevention of misuse）</p>]]></content>
    
    
    <categories>
      
      <category>SYSU</category>
      
      <category>Crypt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WhiteHat CTF 2015 Crypto400</title>
    <link href="/2023/05/30/WhiteHat%20CTF%202015%20Crypto400/"/>
    <url>/2023/05/30/WhiteHat%20CTF%202015%20Crypto400/</url>
    
    <content type="html"><![CDATA[<p>这是一道re</p><span id="more"></span><p>这题原本是angr官方文档的题目，用来让熟悉angr使用方式，但是由于种种原因，angr脚本并不能跑起来，遂转用传统做法，</p><p>也在此中完善了对z3的认识。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目很简单</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202305302154505.png" alt="2023-05"></p><p>可以先使用finger恢复符号表。恢复完后程序的逻辑就会更为明显，首先是通过命令行传参，丢给<code>sub_40166A</code>进行初步的判断，然后再将参数当作密钥对BlowFish的P盒以及S盒变换，然后在解密<code>qword_6C10E01</code>,再比对结果。</p><p>所以这题的关键就在与传的参数，参数对了，这个解密才能正确</p><p>先来看看第一步判断<code>sub_40166A</code></p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202305302159129.png" alt="2.png"></p><p>很简单明了的约束条件,首先密钥长度为8，然后每一位密钥之间应该满足如下关系</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">byte_6C4B20</span> * byte_6C4B21 == <span class="hljs-number">13310</span><br><span class="hljs-attribute">byte_6C4B22</span> + byte_6C4B23 == <span class="hljs-number">185</span><br><span class="hljs-attribute">byte_6C4B24</span> != (byte_6C4B25 == <span class="hljs-number">53</span>)<br><span class="hljs-attribute">byte_6C4B26</span> - byte_6C4B27 == -<span class="hljs-number">19</span><br><span class="hljs-attribute">byte_6C4B20</span> + byte_6C4B27 == <span class="hljs-number">195</span><br><span class="hljs-attribute">byte_6C4B24</span> != (byte_6C4B21 == <span class="hljs-number">24</span>)<br><span class="hljs-attribute">byte_6C4B22</span> | (byte_6C4B27 == <span class="hljs-number">117</span>)<br><span class="hljs-attribute">byte_6C4B20</span> * byte_6C4B25 == <span class="hljs-number">9240</span><br></code></pre></td></tr></table></figure><p>但细心一点会发现，这里虽然有8行表达式，但其中有两行是无效的，即<code>byte_6C4B24 != (byte_6C4B25 == 53)</code>和<code>byte_6C4B22 | (byte_6C4B27 == 117)</code>，这两行并不能起到约束效果。也就是说有八个未知数，但只有六个约束条件，这就决定了能通过第一步的参数不止一个。</p><p>于是乎很自然的想到可以使用z3求解器帮助我们过掉第一步的筛选，再进一步判断。</p><p>当我们过掉一步的判断后，紧接这就是<code>BlowInit</code>和<code>Blowdec</code>，这两个函数就是BlowFish的标准初始化函数和解密函数，那么我们就可以使用z3求解出来的值来进一步爆破。</p><p>note：需要把z3求解出来的值，转化为python的int型，才能去索引列表，脚本中会有详细注释</p><p>note2：脚本中Blow_BOX 存放提取出来的S盒 P盒，此题目的S盒、P盒与传统的值不相同</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">from</span> Blow_BOX <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 存储P盒以及S盒，因为每次爆破一次key P盒和S盒都会变化，下一次爆破需要复原</span><br><span class="hljs-comment"># 这个地方需要使用此复制 即创建两个独立的P盒 S盒 不可简单用等于号 否则会一起变化</span><br>P_temp = copy.deepcopy(p_box)<br>S_temp = copy.deepcopy(s_box)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_key_pbox</span>(<span class="hljs-params">_key</span>):<br>    index = <span class="hljs-number">0</span><br>    key_pbox = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            key_pbox[i] = <span class="hljs-built_in">ord</span>((_key[index])) | (key_pbox[i] &lt;&lt; <span class="hljs-number">8</span>)<br>            index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> index &gt;= <span class="hljs-built_in">len</span>(_key):<br>                index = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>        p_box[i] ^= key_pbox[i]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params">Left</span>):<br>    a = (Left &amp; <span class="hljs-number">0xff000000</span>) &gt;&gt; <span class="hljs-number">24</span><br>    b = (Left &amp; <span class="hljs-number">0x00ff0000</span>) &gt;&gt; <span class="hljs-number">16</span><br>    c = (Left &amp; <span class="hljs-number">0x0000ff00</span>) &gt;&gt; <span class="hljs-number">8</span><br>    d = Left &amp; <span class="hljs-number">0x000000ff</span><br><br>    Sa = s_box[<span class="hljs-number">0</span>][a]<br>    Sb = s_box[<span class="hljs-number">1</span>][b]<br>    Sc = s_box[<span class="hljs-number">2</span>][c]<br>    Sd = s_box[<span class="hljs-number">3</span>][d]<br><br>    <span class="hljs-keyword">return</span> (((Sa + Sb) ^ Sc) + Sd) &amp; <span class="hljs-number">0xffffffff</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Blow_Main_Encrypt</span>(<span class="hljs-params">Left, Right</span>):<br>    <span class="hljs-comment"># print(p_box)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        Left ^= p_box[i]<br>        Right ^= Fn(Left)<br>        Temp = Left<br>        Left = Right<br>        Right = Temp<br><br>    Temp = Left<br>    Left = Right ^ p_box[<span class="hljs-number">17</span>]<br>    Right = Temp ^ p_box[<span class="hljs-number">16</span>]<br>    <span class="hljs-keyword">return</span> Left, Right<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Blow_Main_Decrypt</span>(<span class="hljs-params">Left, Right</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        Left ^= p_box[i]<br>        Right ^= Fn(Left)<br><br>        Temp = Left<br>        Left = Right<br>        Right = Temp<br><br>    Temp = Left<br>    Left = Right ^ p_box[<span class="hljs-number">0</span>]<br>    Right = Temp ^ p_box[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> Left, Right<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Change_Box</span>():<br>    Left = <span class="hljs-number">0</span><br>    Right = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>):<br>        Left, Right = Blow_Main_Encrypt(Left, Right)<br>        p_box[i] = Left<br>        p_box[i + <span class="hljs-number">1</span>] = Right<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>, <span class="hljs-number">2</span>):<br>            Left, Right = Blow_Main_Encrypt(Left, Right)<br>            s_box[i][j] = Left<br>            s_box[i][j + <span class="hljs-number">1</span>] = Right<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BlowFish_Encrypt</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(data) % <span class="hljs-number">8</span>:<br>        data += <span class="hljs-string">&#x27;0&#x27;</span><br>    cipher = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data), <span class="hljs-number">8</span>):<br>        Left = (<span class="hljs-built_in">ord</span>(data[i]) &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">2</span>]) &lt;&lt; <span class="hljs-number">8</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">3</span>]))<br>        Right = (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">4</span>]) &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">5</span>]) &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">6</span>]) &lt;&lt; <span class="hljs-number">8</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">7</span>]))<br>        Left, Right = Blow_Main_Encrypt(Left, Right)<br>        cipher += <span class="hljs-built_in">hex</span>(Left)[<span class="hljs-number">2</span>:]<br>        cipher += <span class="hljs-built_in">hex</span>(Right)[<span class="hljs-number">2</span>:]<br><br>    <span class="hljs-built_in">print</span>(cipher)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BlowFish_Decrypt</span>(<span class="hljs-params">cipher</span>):<br>    plain = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(cipher), <span class="hljs-number">16</span>):<br>        Left = cipher[i:i + <span class="hljs-number">8</span>]<br>        Right = cipher[i + <span class="hljs-number">8</span>:i + <span class="hljs-number">16</span>]<br>        <span class="hljs-comment"># print(Left)</span><br>        Left = <span class="hljs-built_in">int</span>(Left, base=<span class="hljs-number">16</span>)<br>        Right = <span class="hljs-built_in">int</span>(Right, base=<span class="hljs-number">16</span>)<br>        <br>        Left, Right = Blow_Main_Decrypt(Left, Right)<br>        plain += <span class="hljs-built_in">hex</span>(Left)[<span class="hljs-number">2</span>:]<br>        plain += <span class="hljs-built_in">hex</span>(Right)[<span class="hljs-number">2</span>:]<br><br>    plain = <span class="hljs-built_in">int</span>(plain, base=<span class="hljs-number">16</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Now ans: &quot;</span>, <span class="hljs-built_in">hex</span>(plain)[<span class="hljs-number">2</span>:])<br>    <span class="hljs-keyword">return</span> plain<br><br><span class="hljs-comment"># 创建8个8bits的位向量</span><br><span class="hljs-comment"># 存放在flagp[]列表中，每一个位向量符号是flag[i]</span><br>flag = [BitVec(<span class="hljs-string">&quot;flag[%d]&quot;</span> % i, <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>S = Solver()<br><br><span class="hljs-comment"># 添加约束条件</span><br>S.add(flag[<span class="hljs-number">0</span>] * flag[<span class="hljs-number">1</span>] == <span class="hljs-number">13310</span>)<br>S.add(flag[<span class="hljs-number">2</span>] + flag[<span class="hljs-number">3</span>] == <span class="hljs-number">185</span>)<br>S.add(flag[<span class="hljs-number">6</span>] - flag[<span class="hljs-number">7</span>] == -<span class="hljs-number">19</span>)<br>S.add(flag[<span class="hljs-number">0</span>] + flag[<span class="hljs-number">7</span>] == <span class="hljs-number">195</span>)<br>S.add(flag[<span class="hljs-number">0</span>] * flag[<span class="hljs-number">5</span>] == <span class="hljs-number">9240</span>)<br><br><span class="hljs-comment"># 进一步添加约束条件，略去非常见flag字符，比如&#x27;|&#x27;  &#x27;,&#x27;  &#x27;&lt;&#x27;等</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    S.add(flag[i] &gt;= <span class="hljs-number">33</span>)<br>    S.add(flag[i] &lt;= <span class="hljs-number">125</span>)<br>    S.add(flag[i] != <span class="hljs-number">39</span>)<br>    S.add(flag[i] != <span class="hljs-number">58</span>)<br>    S.add(flag[i] != <span class="hljs-number">59</span>)<br>    S.add(flag[i] != <span class="hljs-number">60</span>)<br>    S.add(flag[i] != <span class="hljs-number">61</span>)<br>    S.add(flag[i] != <span class="hljs-number">62</span>)<br>    S.add(flag[i] != <span class="hljs-number">96</span>)<br>    S.add(flag[i] != <span class="hljs-number">124</span>)<br>    S.add(flag[i] != <span class="hljs-number">91</span>)<br>    S.add(flag[i] != <span class="hljs-number">92</span>)<br>    S.add(flag[i] != <span class="hljs-number">93</span>)<br>    S.add(flag[i] != <span class="hljs-number">94</span>)<br><span class="hljs-comment"># C即待解数据 即qword_6C10E01</span><br>C = <span class="hljs-string">&#x27;69142BA8383E7938&#x27;</span><br><span class="hljs-comment"># ans即待比对数据</span><br>ans = <span class="hljs-number">0x6f8cb46b5138c655</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    S.check()<br>    T = S.model() <span class="hljs-comment"># 得到一组解</span><br>    Try = <span class="hljs-string">&#x27;&#x27;</span><br>    condition = [] <span class="hljs-comment"># 用于把这一组解添加进约束变量，用于排除此组解</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        a = T.<span class="hljs-built_in">eval</span>(flag[i]).as_long() <span class="hljs-comment"># 把flag[i]从z3的类型转为python的Int类型</span><br>        condition.append(flag[i] != a)<span class="hljs-comment"># 添加约束条件，把这一整组解都作为约束条件</span><br><br>        Try += <span class="hljs-built_in">chr</span>(a) <span class="hljs-comment"># 当前解</span><br>    S.add(Or(condition))<span class="hljs-comment"># 把当前这组解添加进去，这样以后的解就不会再有此组解了</span><br>    <span class="hljs-comment"># note: 注意不可以简单使用S.add(flag[i]!=xxx)，因为这样排除其他解，即在flag[i]==xx的前提下，也有很多解</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Trying:&quot;</span>, Try, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-comment"># 使用刚刚得到的值去尝试解密</span><br>    init_key_pbox(Try)<br>    Change_Box()<br>    an = BlowFish_Decrypt(C)<br><br>    <span class="hljs-keyword">if</span> an == ans:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] answer:&quot;</span>, Try)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># 恢复P盒 S盒 </span><br>    p_box = copy.deepcopy(P_temp)<br>    s_box = copy.deepcopy(S_temp)<br><br></code></pre></td></tr></table></figure><p>关于S盒的提取可以说道说道，由于BlowFish的S盒是4*256的二维数组，就是有1024个值，那么在IDA就体现为这个形式</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202305302222010.png" alt="3.png"></p><p>以往我都是一行行复制，但无疑这样的效率是极低的，而且也很繁琐。因为我的BlowFish脚本中S盒是以4*256二维数组形式存储的，难不成我还要每次数256个来复制，然后复制4次？</p><p>显然是不科学的，所以可以借助于IDApython来帮我们提取这个S盒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ea = <span class="hljs-number">0x6c00e0</span><br>S_Box=[[],[],[],[]]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1024</span>):<br>    S_Box[i//<span class="hljs-number">256</span>].append((idc.get_wide_dword(ea)))<br>    ea += <span class="hljs-number">4</span><br><span class="hljs-built_in">print</span>(S_Box)<br></code></pre></td></tr></table></figure><p>看，简简单单几行代码就可以帮我们把这个4*256的数组按照我们所想的方式存放，多轻松（这就是技多不压身吧hhh</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这题思路很简单，就是爆破。但这题最大的收获在于学习了<strong>BlowFish加密算法</strong>，而且最重要的是学会了<strong>如何遍历z3的所有解</strong>，<strong>如何把z3类型转为python类型</strong>，以便进一步爆破求解。因为z3类型是不可以作为数组索引的，只有python的Int型才可以。</p><p>angr解此题也是一样的，也是符号执行把密钥空间缩小，然后再一个一个爆破密钥，与上面的思路完全一样</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>recurrence</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>Crypto</tag>
      
      <tag>idapython</tag>
      
      <tag>z3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BlowFish 加密算法 python实现</title>
    <link href="/2023/05/29/BlowFish/"/>
    <url>/2023/05/29/BlowFish/</url>
    
    <content type="html"><![CDATA[<p>BlowFish算法复现</p><span id="more"></span><p>最近在做逆向的时候，遇到了一个新的加密算法，而且实现也比较简单，就此记录一下。</p><p>先简单介绍下BlowFish算法，这是一个对称密钥分组加密算法，而且采用feistel的加密方式，也就是每次加密64bits数据，先分成左右各32bits两部分，然后经过异或加密，F轮函数等得到密文，感觉就像是AES的mini版。</p><p>BlowFish加密会使用到两个盒，P盒以及S盒。其中P盒是18个32位的数字，通常使用Π的小数部分组成，例如</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">p</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>x243F6A88<br><span class="hljs-attribute">P</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>X85A308D3<br><span class="hljs-attribute">P</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>X13198A2E<br><span class="hljs-attribute">P</span>[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>X03707344<br></code></pre></td></tr></table></figure><p>其中0.1415926535的十六进制就是0.243F6A88</p><p>S盒也是由Π的小数部分组成，但S盒是4*256的二维数组。</p><p>值得一提的是，不管是在DES还是AES中，各种盒通常都是不变的，但是在BlowFish中，这两个盒都会随着我们的输入的密钥而产生变化，而且这个变化也是用BlowFish算法来实现，我们刚刚提到BlowFish核心加密就是分成左右两部分，然后异或、轮函数等，然而这也是P盒和S盒的变化算法。</p><p>整体加密流程： <strong>输入32~448bits密钥，先利用密钥对P盒 以及 S盒加密，使用加密后的P盒 S盒加密明文</strong></p><p>具体的，首先P盒和输入的密钥轮回的异或，然后使用64位的数据0去走一遍BlowFish，将得到的值重新赋给P盒，延用刚刚得到的值，类似地去改变S盒的值。</p><p>看一下代码就明确了</p><p>首先我们输入密钥，轮回地将密钥放进key_pbox里面，key_pbox只是一个中间值，用于存放32位的密钥</p><p>比如我们输入密钥<code>abcdef</code>,那么</p><p>·key_pbox[0] &#x3D; 0x61626364</p><p>·key_pbox[1] &#x3D; 0x65666162 </p><p>·key_pbox[2] &#x3D; 0x63646566……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_key_pbox</span>(<span class="hljs-params">_key</span>):<br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-comment">#利用index 实现轮回取密钥操作</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-comment">#这里实现将逐个密钥字符 拼接位32位的密钥</span><br>            key_pbox[i] = <span class="hljs-built_in">ord</span>(_key[index]) | (key_pbox[i] &lt;&lt; <span class="hljs-number">8</span>)<br>            index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> index &gt;= <span class="hljs-built_in">len</span>(_key):<br>                index = <span class="hljs-number">0</span><br>   <span class="hljs-comment"># P盒和密钥异或</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>        p_box[i] ^= key_pbox[i]<br><br></code></pre></td></tr></table></figure><p>在P盒和密钥异或完后，就使用BlowFish加密流程，再次改变P盒，变化S盒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Change_Box</span>():<br>    Left = <span class="hljs-number">0</span><br>    Right = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>):<br>        <span class="hljs-comment"># 这里的 Blow_Mian_Eccrypt 就是BlowFish的加密算法，即左右经过异或、F轮函数、换位等</span><br>        <span class="hljs-comment"># 这里令Left = Right =0 来对P盒 和S盒变化</span><br>        Left, Right = Blow_Main_Encrypt(Left, Right)<br>        p_box[i] = Left<br>        p_box[i + <span class="hljs-number">1</span>] = Right<br>        <br>  <span class="hljs-comment"># 变化完后，Left 和 Right 并不清零 而是继续使用</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>, <span class="hljs-number">2</span>):<br>            Left, Right = Blow_Main_Encrypt(Left, Right)<br>            s_box[i][j] = Left<br>            s_box[i][j + <span class="hljs-number">1</span>] = Right<br><br></code></pre></td></tr></table></figure><p>到这里就得正式介绍下BlowFish的加密函数</p><p>先给出流程图</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202305291921714.png" alt="20200726213533691"></p><p>这里的P1就是p_box[0],P2就是p_box[1]，走一遍这个流程，利用得到值更新相应的p_box。这里面又涉及到一个F函数，这个函数起始就是一个替代功能，它的输入是一个32bits的数，就对这个32bits的数做一些操作，丢去S盒里面找，然后替换。稍微会看到具体规则</p><p>代码实现：</p><p>代码也很简洁，看看就明白了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Blow_Main_Encrypt</span>(<span class="hljs-params">Left, Right</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        Left ^= p_box[i]<br>        Right ^= Fn(Left)<br><br>        Temp = Left<br>        Left = Right<br>        Right = Temp<br>        <br><span class="hljs-comment">#最后一轮不交换 单独处理 </span><br>    Temp = Left<br>    Left = Right ^ p_box[<span class="hljs-number">17</span>]<br>    Right = Temp ^ p_box[<span class="hljs-number">16</span>]<br>    <br>    <span class="hljs-keyword">return</span> Left, Right<br><br></code></pre></td></tr></table></figure><p>最后就是F轮函数，它的功能就是替换，下图可以很好的说明这个替换规则</p><p><img src="https://yring-me.oss-cn-beijing.aliyuncs.com/test/202305292049603.png" alt="20200726213844931"></p><p>举个栗子，假设我们输入的32位数是0x12345678，那么分成0x12,0x34,0x56,0x78四组，分别以此为索引去各自的S盒找值，比如0x12对应<code>S[0][0x12]</code>，记为a，</p><p>0x34对应<code>S[1][0x34]</code>，记为b，</p><p>0x56对应<code>S[2][0x56]</code>，记为c，</p><p>0x78对应<code>S[3][0x78]</code>，记为d，</p><p>最终返回<code>((a+b)^c+d)</code>的低32位，作为替换后的值</p><p>代码可以更明确的说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params">Left</span>):<br>    a = (Left &amp; <span class="hljs-number">0xff000000</span>) &gt;&gt; <span class="hljs-number">24</span><br>    b = (Left &amp; <span class="hljs-number">0x00ff0000</span>) &gt;&gt; <span class="hljs-number">16</span><br>    c = (Left &amp; <span class="hljs-number">0x0000ff00</span>) &gt;&gt; <span class="hljs-number">8</span><br>    d = Left &amp; <span class="hljs-number">0x000000ff</span><br><br>    Sa = s_box[<span class="hljs-number">0</span>][a]<br>    Sb = s_box[<span class="hljs-number">1</span>][b]<br>    Sc = s_box[<span class="hljs-number">2</span>][c]<br>    Sd = s_box[<span class="hljs-number">3</span>][d]<br><br>    <span class="hljs-keyword">return</span> (((Sa + Sb) ^ Sc) + Sd) &amp; <span class="hljs-number">0xffffffff</span><br></code></pre></td></tr></table></figure><p>至此BlowFish加密的相关函数都介绍完毕，解密也是同样的流程，就不再赘述，唯一要注意的就是加密输入的明文是字符串，而解密使用的密文则是16进制数字，在把他们转化为32bits的数据时需要留心。</p><p>再来回想下整个加密流程,首先输入密钥，利用密钥对P盒 S盒加密变化，利用加密后的P盒 S盒，再将明文按64bits分组加密</p><p>完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> Crypto.Util.number<br><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">from</span> Blow_BOX <span class="hljs-keyword">import</span> *<br><br>key_pbox = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>)]<br>Encrypt = []<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_key_pbox</span>(<span class="hljs-params">_key</span>):<br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            key_pbox[i] = <span class="hljs-built_in">ord</span>(_key[index]) | (key_pbox[i] &lt;&lt; <span class="hljs-number">8</span>)<br>            index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> index &gt;= <span class="hljs-built_in">len</span>(_key):<br>                index = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>        p_box[i] ^= key_pbox[i]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params">Left</span>):<br>    a = (Left &amp; <span class="hljs-number">0xff000000</span>) &gt;&gt; <span class="hljs-number">24</span><br>    b = (Left &amp; <span class="hljs-number">0x00ff0000</span>) &gt;&gt; <span class="hljs-number">16</span><br>    c = (Left &amp; <span class="hljs-number">0x0000ff00</span>) &gt;&gt; <span class="hljs-number">8</span><br>    d = Left &amp; <span class="hljs-number">0x000000ff</span><br><br>    Sa = s_box[<span class="hljs-number">0</span>][a]<br>    Sb = s_box[<span class="hljs-number">1</span>][b]<br>    Sc = s_box[<span class="hljs-number">2</span>][c]<br>    Sd = s_box[<span class="hljs-number">3</span>][d]<br><br>    <span class="hljs-keyword">return</span> (((Sa + Sb) ^ Sc) + Sd) &amp; <span class="hljs-number">0xffffffff</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Blow_Main_Encrypt</span>(<span class="hljs-params">Left, Right</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        Left ^= p_box[i]<br>        Right ^= Fn(Left)<br>        Temp = Left<br>        Left = Right<br>        Right = Temp<br><br>    Temp = Left<br>    Left = Right ^ p_box[<span class="hljs-number">17</span>]<br>    Right = Temp ^ p_box[<span class="hljs-number">16</span>]<br>    <span class="hljs-keyword">return</span> Left, Right<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Blow_Main_Decrypt</span>(<span class="hljs-params">Left, Right</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        Left ^= p_box[i]<br>        Right ^= Fn(Left)<br><br>        Temp = Left<br>        Left = Right<br>        Right = Temp<br><br>    Temp = Left<br>    Left = Right ^ p_box[<span class="hljs-number">0</span>]<br>    Right = Temp ^ p_box[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> Left , Right<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Change_Box</span>():<br>    Left = <span class="hljs-number">0</span><br>    Right = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>):<br>        Left, Right = Blow_Main_Encrypt(Left, Right)<br>        p_box[i] = Left<br>        p_box[i + <span class="hljs-number">1</span>] = Right<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>, <span class="hljs-number">2</span>):<br>            Left, Right = Blow_Main_Encrypt(Left, Right)<br>            s_box[i][j] = Left<br>            s_box[i][j + <span class="hljs-number">1</span>] = Right<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BlowFish_Encrypt</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(data) % <span class="hljs-number">8</span>:<br>        data += <span class="hljs-string">&#x27;0&#x27;</span><br>    cipher = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data), <span class="hljs-number">8</span>):<br>        Left = (<span class="hljs-built_in">ord</span>(data[i]) &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">2</span>]) &lt;&lt; <span class="hljs-number">8</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">3</span>]))<br>        Right = (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">4</span>]) &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">5</span>]) &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">6</span>]) &lt;&lt; <span class="hljs-number">8</span>) | (<span class="hljs-built_in">ord</span>(data[i + <span class="hljs-number">7</span>]))<br>        Left, Right = Blow_Main_Encrypt(Left, Right)<br>        cipher += <span class="hljs-built_in">hex</span>(Left)[<span class="hljs-number">2</span>:]<br>        cipher += <span class="hljs-built_in">hex</span>(Right)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">global</span> Encrypt<br>    Encrypt = []<br>    <span class="hljs-built_in">print</span>(cipher)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BlowFish_Decrypt</span>(<span class="hljs-params">cipher</span>):<br>    plain = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(cipher), <span class="hljs-number">16</span>):<br>        Left = cipher[i:i + <span class="hljs-number">8</span>]<br>        Right = cipher[i + <span class="hljs-number">8</span>:i + <span class="hljs-number">16</span>]<br>        Left = <span class="hljs-built_in">int</span>(Left, base=<span class="hljs-number">16</span>)<br>        Right = <span class="hljs-built_in">int</span>(Right, base=<span class="hljs-number">16</span>)<br><br>        Left, Right = Blow_Main_Decrypt(Left, Right)<br>        plain += <span class="hljs-built_in">hex</span>(Left)[<span class="hljs-number">2</span>:]<br>        plain += <span class="hljs-built_in">hex</span>(Right)[<span class="hljs-number">2</span>:]<br><br>    plain = <span class="hljs-built_in">int</span>(plain, base=<span class="hljs-number">16</span>)<br>    <span class="hljs-built_in">print</span>(Crypto.Util.number.long_to_bytes(plain))<br>    <span class="hljs-keyword">global</span> Encrypt<br>    Encrypt = []<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;PLZ input the key First\n&quot;</span>)<br>    init_key_pbox(key)<br>    Change_Box()<br>    m = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;PLZ choose a model: 1.Encrypt 2.Decrypt 3.exit\n&quot;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> m == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;PLZ input the data:\n&quot;</span>)<br>            BlowFish_Encrypt(data)<br>            m = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;PLZ choose a model: 1.Encrypt 2.Decrypt 3.exit\n&quot;</span>)<br>        <span class="hljs-keyword">if</span> m == <span class="hljs-string">&#x27;2&#x27;</span>:<br>            cipher = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;PLZ input the cipher:\n&quot;</span>)<br>            BlowFish_Decrypt(cipher)<br>            m = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;PLZ choose a model: 1.Encrypt 2.Decrypt 3.exit\n&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> m == <span class="hljs-string">&#x27;3&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p>Blow_Box</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><code class="hljs python">p_box = [<br>    <span class="hljs-number">0x243F6A88</span>, <span class="hljs-number">0x85A308D3</span>, <span class="hljs-number">0x13198A2E</span>, <span class="hljs-number">0x03707344</span>,<br>    <span class="hljs-number">0xA4093822</span>, <span class="hljs-number">0x299F31D0</span>, <span class="hljs-number">0x082EFA98</span>, <span class="hljs-number">0xEC4E6C89</span>,<br>    <span class="hljs-number">0x452821E6</span>, <span class="hljs-number">0x38D01377</span>, <span class="hljs-number">0xBE5466CF</span>, <span class="hljs-number">0x34E90C6C</span>,<br>    <span class="hljs-number">0xC0AC29B7</span>, <span class="hljs-number">0xC97C50DD</span>, <span class="hljs-number">0x3F84D5B5</span>, <span class="hljs-number">0xB5470917</span>,<br>    <span class="hljs-number">0x9216D5D9</span>, <span class="hljs-number">0x8979FB1B</span>]<br><br>s_box = [<br>    [<span class="hljs-number">0xD1310BA6</span>, <span class="hljs-number">0x98DFB5AC</span>, <span class="hljs-number">0x2FFD72DB</span>, <span class="hljs-number">0xD01ADFB7</span>,<br>     <span class="hljs-number">0xB8E1AFED</span>, <span class="hljs-number">0x6A267E96</span>, <span class="hljs-number">0xBA7C9045</span>, <span class="hljs-number">0xF12C7F99</span>,<br>     <span class="hljs-number">0x24A19947</span>, <span class="hljs-number">0xB3916CF7</span>, <span class="hljs-number">0x0801F2E2</span>, <span class="hljs-number">0x858EFC16</span>,<br>     <span class="hljs-number">0x636920D8</span>, <span class="hljs-number">0x71574E69</span>, <span class="hljs-number">0xA458FEA3</span>, <span class="hljs-number">0xF4933D7E</span>,<br>     <span class="hljs-number">0x0D95748F</span>, <span class="hljs-number">0x728EB658</span>, <span class="hljs-number">0x718BCD58</span>, <span class="hljs-number">0x82154AEE</span>,<br>     <span class="hljs-number">0x7B54A41D</span>, <span class="hljs-number">0xC25A59B5</span>, <span class="hljs-number">0x9C30D539</span>, <span class="hljs-number">0x2AF26013</span>,<br>     <span class="hljs-number">0xC5D1B023</span>, <span class="hljs-number">0x286085F0</span>, <span class="hljs-number">0xCA417918</span>, <span class="hljs-number">0xB8DB38EF</span>,<br>     <span class="hljs-number">0x8E79DCB0</span>, <span class="hljs-number">0x603A180E</span>, <span class="hljs-number">0x6C9E0E8B</span>, <span class="hljs-number">0xB01E8A3E</span>,<br>     <span class="hljs-number">0xD71577C1</span>, <span class="hljs-number">0xBD314B27</span>, <span class="hljs-number">0x78AF2FDA</span>, <span class="hljs-number">0x55605C60</span>,<br>     <span class="hljs-number">0xE65525F3</span>, <span class="hljs-number">0xAA55AB94</span>, <span class="hljs-number">0x57489862</span>, <span class="hljs-number">0x63E81440</span>,<br>     <span class="hljs-number">0x55CA396A</span>, <span class="hljs-number">0x2AAB10B6</span>, <span class="hljs-number">0xB4CC5C34</span>, <span class="hljs-number">0x1141E8CE</span>,<br>     <span class="hljs-number">0xA15486AF</span>, <span class="hljs-number">0x7C72E993</span>, <span class="hljs-number">0xB3EE1411</span>, <span class="hljs-number">0x636FBC2A</span>,<br>     <span class="hljs-number">0x2BA9C55D</span>, <span class="hljs-number">0x741831F6</span>, <span class="hljs-number">0xCE5C3E16</span>, <span class="hljs-number">0x9B87931E</span>,<br>     <span class="hljs-number">0xAFD6BA33</span>, <span class="hljs-number">0x6C24CF5C</span>, <span class="hljs-number">0x7A325381</span>, <span class="hljs-number">0x28958677</span>,<br>     <span class="hljs-number">0x3B8F4898</span>, <span class="hljs-number">0x6B4BB9AF</span>, <span class="hljs-number">0xC4BFE81B</span>, <span class="hljs-number">0x66282193</span>,<br>     <span class="hljs-number">0x61D809CC</span>, <span class="hljs-number">0xFB21A991</span>, <span class="hljs-number">0x487CAC60</span>, <span class="hljs-number">0x5DEC8032</span>,<br>     <span class="hljs-number">0xEF845D5D</span>, <span class="hljs-number">0xE98575B1</span>, <span class="hljs-number">0xDC262302</span>, <span class="hljs-number">0xEB651B88</span>,<br>     <span class="hljs-number">0x23893E81</span>, <span class="hljs-number">0xD396ACC5</span>, <span class="hljs-number">0x0F6D6FF3</span>, <span class="hljs-number">0x83F44239</span>,<br>     <span class="hljs-number">0x2E0B4482</span>, <span class="hljs-number">0xA4842004</span>, <span class="hljs-number">0x69C8F04A</span>, <span class="hljs-number">0x9E1F9B5E</span>,<br>     <span class="hljs-number">0x21C66842</span>, <span class="hljs-number">0xF6E96C9A</span>, <span class="hljs-number">0x670C9C61</span>, <span class="hljs-number">0xABD388F0</span>,<br>     <span class="hljs-number">0x6A51A0D2</span>, <span class="hljs-number">0xD8542F68</span>, <span class="hljs-number">0x960FA728</span>, <span class="hljs-number">0xAB5133A3</span>,<br>     <span class="hljs-number">0x6EEF0B6C</span>, <span class="hljs-number">0x137A3BE4</span>, <span class="hljs-number">0xBA3BF050</span>, <span class="hljs-number">0x7EFB2A98</span>,<br>     <span class="hljs-number">0xA1F1651D</span>, <span class="hljs-number">0x39AF0176</span>, <span class="hljs-number">0x66CA593E</span>, <span class="hljs-number">0x82430E88</span>,<br>     <span class="hljs-number">0x8CEE8619</span>, <span class="hljs-number">0x456F9FB4</span>, <span class="hljs-number">0x7D84A5C3</span>, <span class="hljs-number">0x3B8B5EBE</span>,<br>     <span class="hljs-number">0xE06F75D8</span>, <span class="hljs-number">0x85C12073</span>, <span class="hljs-number">0x401A449F</span>, <span class="hljs-number">0x56C16AA6</span>,<br>     <span class="hljs-number">0x4ED3AA62</span>, <span class="hljs-number">0x363F7706</span>, <span class="hljs-number">0x1BFEDF72</span>, <span class="hljs-number">0x429B023D</span>,<br>     <span class="hljs-number">0x37D0D724</span>, <span class="hljs-number">0xD00A1248</span>, <span class="hljs-number">0xDB0FEAD3</span>, <span class="hljs-number">0x49F1C09B</span>,<br>     <span class="hljs-number">0x075372C9</span>, <span class="hljs-number">0x80991B7B</span>, <span class="hljs-number">0x25D479D8</span>, <span class="hljs-number">0xF6E8DEF7</span>,<br>     <span class="hljs-number">0xE3FE501A</span>, <span class="hljs-number">0xB6794C3B</span>, <span class="hljs-number">0x976CE0BD</span>, <span class="hljs-number">0x04C006BA</span>,<br>     <span class="hljs-number">0xC1A94FB6</span>, <span class="hljs-number">0x409F60C4</span>, <span class="hljs-number">0x5E5C9EC2</span>, <span class="hljs-number">0x196A2463</span>,<br>     <span class="hljs-number">0x68FB6FAF</span>, <span class="hljs-number">0x3E6C53B5</span>, <span class="hljs-number">0x1339B2EB</span>, <span class="hljs-number">0x3B52EC6F</span>,<br>     <span class="hljs-number">0x6DFC511F</span>, <span class="hljs-number">0x9B30952C</span>, <span class="hljs-number">0xCC814544</span>, <span class="hljs-number">0xAF5EBD09</span>,<br>     <span class="hljs-number">0xBEE3D004</span>, <span class="hljs-number">0xDE334AFD</span>, <span class="hljs-number">0x660F2807</span>, <span class="hljs-number">0x192E4BB3</span>,<br>     <span class="hljs-number">0xC0CBA857</span>, <span class="hljs-number">0x45C8740F</span>, <span class="hljs-number">0xD20B5F39</span>, <span class="hljs-number">0xB9D3FBDB</span>,<br>     <span class="hljs-number">0x5579C0BD</span>, <span class="hljs-number">0x1A60320A</span>, <span class="hljs-number">0xD6A100C6</span>, <span class="hljs-number">0x402C7279</span>,<br>     <span class="hljs-number">0x679F25FE</span>, <span class="hljs-number">0xFB1FA3CC</span>, <span class="hljs-number">0x8EA5E9F8</span>, <span class="hljs-number">0xDB3222F8</span>,<br>     <span class="hljs-number">0x3C7516DF</span>, <span class="hljs-number">0xFD616B15</span>, <span class="hljs-number">0x2F501EC8</span>, <span class="hljs-number">0xAD0552AB</span>,<br>     <span class="hljs-number">0x323DB5FA</span>, <span class="hljs-number">0xFD238760</span>, <span class="hljs-number">0x53317B48</span>, <span class="hljs-number">0x3E00DF82</span>,<br>     <span class="hljs-number">0x9E5C57BB</span>, <span class="hljs-number">0xCA6F8CA0</span>, <span class="hljs-number">0x1A87562E</span>, <span class="hljs-number">0xDF1769DB</span>,<br>     <span class="hljs-number">0xD542A8F6</span>, <span class="hljs-number">0x287EFFC3</span>, <span class="hljs-number">0xAC6732C6</span>, <span class="hljs-number">0x8C4F5573</span>,<br>     <span class="hljs-number">0x695B27B0</span>, <span class="hljs-number">0xBBCA58C8</span>, <span class="hljs-number">0xE1FFA35D</span>, <span class="hljs-number">0xB8F011A0</span>,<br>     <span class="hljs-number">0x10FA3D98</span>, <span class="hljs-number">0xFD2183B8</span>, <span class="hljs-number">0x4AFCB56C</span>, <span class="hljs-number">0x2DD1D35B</span>,<br>     <span class="hljs-number">0x9A53E479</span>, <span class="hljs-number">0xB6F84565</span>, <span class="hljs-number">0xD28E49BC</span>, <span class="hljs-number">0x4BFB9790</span>,<br>     <span class="hljs-number">0xE1DDF2DA</span>, <span class="hljs-number">0xA4CB7E33</span>, <span class="hljs-number">0x62FB1341</span>, <span class="hljs-number">0xCEE4C6E8</span>,<br>     <span class="hljs-number">0xEF20CADA</span>, <span class="hljs-number">0x36774C01</span>, <span class="hljs-number">0xD07E9EFE</span>, <span class="hljs-number">0x2BF11FB4</span>,<br>     <span class="hljs-number">0x95DBDA4D</span>, <span class="hljs-number">0xAE909198</span>, <span class="hljs-number">0xEAAD8E71</span>, <span class="hljs-number">0x6B93D5A0</span>,<br>     <span class="hljs-number">0xD08ED1D0</span>, <span class="hljs-number">0xAFC725E0</span>, <span class="hljs-number">0x8E3C5B2F</span>, <span class="hljs-number">0x8E7594B7</span>,<br>     <span class="hljs-number">0x8FF6E2FB</span>, <span class="hljs-number">0xF2122B64</span>, <span class="hljs-number">0x8888B812</span>, <span class="hljs-number">0x900DF01C</span>,<br>     <span class="hljs-number">0x4FAD5EA0</span>, <span class="hljs-number">0x688FC31C</span>, <span class="hljs-number">0xD1CFF191</span>, <span class="hljs-number">0xB3A8C1AD</span>,<br>     <span class="hljs-number">0x2F2F2218</span>, <span class="hljs-number">0xBE0E1777</span>, <span class="hljs-number">0xEA752DFE</span>, <span class="hljs-number">0x8B021FA1</span>,<br>     <span class="hljs-number">0xE5A0CC0F</span>, <span class="hljs-number">0xB56F74E8</span>, <span class="hljs-number">0x18ACF3D6</span>, <span class="hljs-number">0xCE89E299</span>,<br>     <span class="hljs-number">0xB4A84FE0</span>, <span class="hljs-number">0xFD13E0B7</span>, <span class="hljs-number">0x7CC43B81</span>, <span class="hljs-number">0xD2ADA8D9</span>,<br>     <span class="hljs-number">0x165FA266</span>, <span class="hljs-number">0x80957705</span>, <span class="hljs-number">0x93CC7314</span>, <span class="hljs-number">0x211A1477</span>,<br>     <span class="hljs-number">0xE6AD2065</span>, <span class="hljs-number">0x77B5FA86</span>, <span class="hljs-number">0xC75442F5</span>, <span class="hljs-number">0xFB9D35CF</span>,<br>     <span class="hljs-number">0xEBCDAF0C</span>, <span class="hljs-number">0x7B3E89A0</span>, <span class="hljs-number">0xD6411BD3</span>, <span class="hljs-number">0xAE1E7E49</span>,<br>     <span class="hljs-number">0x00250E2D</span>, <span class="hljs-number">0x2071B35E</span>, <span class="hljs-number">0x226800BB</span>, <span class="hljs-number">0x57B8E0AF</span>,<br>     <span class="hljs-number">0x2464369B</span>, <span class="hljs-number">0xF009B91E</span>, <span class="hljs-number">0x5563911D</span>, <span class="hljs-number">0x59DFA6AA</span>,<br>     <span class="hljs-number">0x78C14389</span>, <span class="hljs-number">0xD95A537F</span>, <span class="hljs-number">0x207D5BA2</span>, <span class="hljs-number">0x02E5B9C5</span>,<br>     <span class="hljs-number">0x83260376</span>, <span class="hljs-number">0x6295CFA9</span>, <span class="hljs-number">0x11C81968</span>, <span class="hljs-number">0x4E734A41</span>,<br>     <span class="hljs-number">0xB3472DCA</span>, <span class="hljs-number">0x7B14A94A</span>, <span class="hljs-number">0x1B510052</span>, <span class="hljs-number">0x9A532915</span>,<br>     <span class="hljs-number">0xD60F573F</span>, <span class="hljs-number">0xBC9BC6E4</span>, <span class="hljs-number">0x2B60A476</span>, <span class="hljs-number">0x81E67400</span>,<br>     <span class="hljs-number">0x08BA6FB5</span>, <span class="hljs-number">0x571BE91F</span>, <span class="hljs-number">0xF296EC6B</span>, <span class="hljs-number">0x2A0DD915</span>,<br>     <span class="hljs-number">0xB6636521</span>, <span class="hljs-number">0xE7B9F9B6</span>, <span class="hljs-number">0xFF34052E</span>, <span class="hljs-number">0xC5855664</span>,<br>     <span class="hljs-number">0x53B02D5D</span>, <span class="hljs-number">0xA99F8FA1</span>, <span class="hljs-number">0x08BA4799</span>, <span class="hljs-number">0x6E85076A</span>],<br>    [<span class="hljs-number">0x4B7A70E9</span>, <span class="hljs-number">0xB5B32944</span>, <span class="hljs-number">0xDB75092E</span>, <span class="hljs-number">0xC4192623</span>,<br>     <span class="hljs-number">0xAD6EA6B0</span>, <span class="hljs-number">0x49A7DF7D</span>, <span class="hljs-number">0x9CEE60B8</span>, <span class="hljs-number">0x8FEDB266</span>,<br>     <span class="hljs-number">0xECAA8C71</span>, <span class="hljs-number">0x699A17FF</span>, <span class="hljs-number">0x5664526C</span>, <span class="hljs-number">0xC2B19EE1</span>,<br>     <span class="hljs-number">0x193602A5</span>, <span class="hljs-number">0x75094C29</span>, <span class="hljs-number">0xA0591340</span>, <span class="hljs-number">0xE4183A3E</span>,<br>     <span class="hljs-number">0x3F54989A</span>, <span class="hljs-number">0x5B429D65</span>, <span class="hljs-number">0x6B8FE4D6</span>, <span class="hljs-number">0x99F73FD6</span>,<br>     <span class="hljs-number">0xA1D29C07</span>, <span class="hljs-number">0xEFE830F5</span>, <span class="hljs-number">0x4D2D38E6</span>, <span class="hljs-number">0xF0255DC1</span>,<br>     <span class="hljs-number">0x4CDD2086</span>, <span class="hljs-number">0x8470EB26</span>, <span class="hljs-number">0x6382E9C6</span>, <span class="hljs-number">0x021ECC5E</span>,<br>     <span class="hljs-number">0x09686B3F</span>, <span class="hljs-number">0x3EBAEFC9</span>, <span class="hljs-number">0x3C971814</span>, <span class="hljs-number">0x6B6A70A1</span>,<br>     <span class="hljs-number">0x687F3584</span>, <span class="hljs-number">0x52A0E286</span>, <span class="hljs-number">0xB79C5305</span>, <span class="hljs-number">0xAA500737</span>,<br>     <span class="hljs-number">0x3E07841C</span>, <span class="hljs-number">0x7FDEAE5C</span>, <span class="hljs-number">0x8E7D44EC</span>, <span class="hljs-number">0x5716F2B8</span>,<br>     <span class="hljs-number">0xB03ADA37</span>, <span class="hljs-number">0xF0500C0D</span>, <span class="hljs-number">0xF01C1F04</span>, <span class="hljs-number">0x0200B3FF</span>,<br>     <span class="hljs-number">0xAE0CF51A</span>, <span class="hljs-number">0x3CB574B2</span>, <span class="hljs-number">0x25837A58</span>, <span class="hljs-number">0xDC0921BD</span>,<br>     <span class="hljs-number">0xD19113F9</span>, <span class="hljs-number">0x7CA92FF6</span>, <span class="hljs-number">0x94324773</span>, <span class="hljs-number">0x22F54701</span>,<br>     <span class="hljs-number">0x3AE5E581</span>, <span class="hljs-number">0x37C2DADC</span>, <span class="hljs-number">0xC8B57634</span>, <span class="hljs-number">0x9AF3DDA7</span>,<br>     <span class="hljs-number">0xA9446146</span>, <span class="hljs-number">0x0FD0030E</span>, <span class="hljs-number">0xECC8C73E</span>, <span class="hljs-number">0xA4751E41</span>,<br>     <span class="hljs-number">0xE238CD99</span>, <span class="hljs-number">0x3BEA0E2F</span>, <span class="hljs-number">0x3280BBA1</span>, <span class="hljs-number">0x183EB331</span>,<br>     <span class="hljs-number">0x4E548B38</span>, <span class="hljs-number">0x4F6DB908</span>, <span class="hljs-number">0x6F420D03</span>, <span class="hljs-number">0xF60A04BF</span>,<br>     <span class="hljs-number">0x2CB81290</span>, <span class="hljs-number">0x24977C79</span>, <span class="hljs-number">0x5679B072</span>, <span class="hljs-number">0xBCAF89AF</span>,<br>     <span class="hljs-number">0xDE9A771F</span>, <span class="hljs-number">0xD9930810</span>, <span class="hljs-number">0xB38BAE12</span>, <span class="hljs-number">0xDCCF3F2E</span>,<br>     <span class="hljs-number">0x5512721F</span>, <span class="hljs-number">0x2E6B7124</span>, <span class="hljs-number">0x501ADDE6</span>, <span class="hljs-number">0x9F84CD87</span>,<br>     <span class="hljs-number">0x7A584718</span>, <span class="hljs-number">0x7408DA17</span>, <span class="hljs-number">0xBC9F9ABC</span>, <span class="hljs-number">0xE94B7D8C</span>,<br>     <span class="hljs-number">0xEC7AEC3A</span>, <span class="hljs-number">0xDB851DFA</span>, <span class="hljs-number">0x63094366</span>, <span class="hljs-number">0xC464C3D2</span>,<br>     <span class="hljs-number">0xEF1C1847</span>, <span class="hljs-number">0x3215D908</span>, <span class="hljs-number">0xDD433B37</span>, <span class="hljs-number">0x24C2BA16</span>,<br>     <span class="hljs-number">0x12A14D43</span>, <span class="hljs-number">0x2A65C451</span>, <span class="hljs-number">0x50940002</span>, <span class="hljs-number">0x133AE4DD</span>,<br>     <span class="hljs-number">0x71DFF89E</span>, <span class="hljs-number">0x10314E55</span>, <span class="hljs-number">0x81AC77D6</span>, <span class="hljs-number">0x5F11199B</span>,<br>     <span class="hljs-number">0x043556F1</span>, <span class="hljs-number">0xD7A3C76B</span>, <span class="hljs-number">0x3C11183B</span>, <span class="hljs-number">0x5924A509</span>,<br>     <span class="hljs-number">0xF28FE6ED</span>, <span class="hljs-number">0x97F1FBFA</span>, <span class="hljs-number">0x9EBABF2C</span>, <span class="hljs-number">0x1E153C6E</span>,<br>     <span class="hljs-number">0x86E34570</span>, <span class="hljs-number">0xEAE96FB1</span>, <span class="hljs-number">0x860E5E0A</span>, <span class="hljs-number">0x5A3E2AB3</span>,<br>     <span class="hljs-number">0x771FE71C</span>, <span class="hljs-number">0x4E3D06FA</span>, <span class="hljs-number">0x2965DCB9</span>, <span class="hljs-number">0x99E71D0F</span>,<br>     <span class="hljs-number">0x803E89D6</span>, <span class="hljs-number">0x5266C825</span>, <span class="hljs-number">0x2E4CC978</span>, <span class="hljs-number">0x9C10B36A</span>,<br>     <span class="hljs-number">0xC6150EBA</span>, <span class="hljs-number">0x94E2EA78</span>, <span class="hljs-number">0xA5FC3C53</span>, <span class="hljs-number">0x1E0A2DF4</span>,<br>     <span class="hljs-number">0xF2F74EA7</span>, <span class="hljs-number">0x361D2B3D</span>, <span class="hljs-number">0x1939260F</span>, <span class="hljs-number">0x19C27960</span>,<br>     <span class="hljs-number">0x5223A708</span>, <span class="hljs-number">0xF71312B6</span>, <span class="hljs-number">0xEBADFE6E</span>, <span class="hljs-number">0xEAC31F66</span>,<br>     <span class="hljs-number">0xE3BC4595</span>, <span class="hljs-number">0xA67BC883</span>, <span class="hljs-number">0xB17F37D1</span>, <span class="hljs-number">0x018CFF28</span>,<br>     <span class="hljs-number">0xC332DDEF</span>, <span class="hljs-number">0xBE6C5AA5</span>, <span class="hljs-number">0x65582185</span>, <span class="hljs-number">0x68AB9802</span>,<br>     <span class="hljs-number">0xEECEA50F</span>, <span class="hljs-number">0xDB2F953B</span>, <span class="hljs-number">0x2AEF7DAD</span>, <span class="hljs-number">0x5B6E2F84</span>,<br>     <span class="hljs-number">0x1521B628</span>, <span class="hljs-number">0x29076170</span>, <span class="hljs-number">0xECDD4775</span>, <span class="hljs-number">0x619F1510</span>,<br>     <span class="hljs-number">0x13CCA830</span>, <span class="hljs-number">0xEB61BD96</span>, <span class="hljs-number">0x0334FE1E</span>, <span class="hljs-number">0xAA0363CF</span>,<br>     <span class="hljs-number">0xB5735C90</span>, <span class="hljs-number">0x4C70A239</span>, <span class="hljs-number">0xD59E9E0B</span>, <span class="hljs-number">0xCBAADE14</span>,<br>     <span class="hljs-number">0xEECC86BC</span>, <span class="hljs-number">0x60622CA7</span>, <span class="hljs-number">0x9CAB5CAB</span>, <span class="hljs-number">0xB2F3846E</span>,<br>     <span class="hljs-number">0x648B1EAF</span>, <span class="hljs-number">0x19BDF0CA</span>, <span class="hljs-number">0xA02369B9</span>, <span class="hljs-number">0x655ABB50</span>,<br>     <span class="hljs-number">0x40685A32</span>, <span class="hljs-number">0x3C2AB4B3</span>, <span class="hljs-number">0x319EE9D5</span>, <span class="hljs-number">0xC021B8F7</span>,<br>     <span class="hljs-number">0x9B540B19</span>, <span class="hljs-number">0x875FA099</span>, <span class="hljs-number">0x95F7997E</span>, <span class="hljs-number">0x623D7DA8</span>,<br>     <span class="hljs-number">0xF837889A</span>, <span class="hljs-number">0x97E32D77</span>, <span class="hljs-number">0x11ED935F</span>, <span class="hljs-number">0x16681281</span>,<br>     <span class="hljs-number">0x0E358829</span>, <span class="hljs-number">0xC7E61FD6</span>, <span class="hljs-number">0x96DEDFA1</span>, <span class="hljs-number">0x7858BA99</span>,<br>     <span class="hljs-number">0x57F584A5</span>, <span class="hljs-number">0x1B227263</span>, <span class="hljs-number">0x9B83C3FF</span>, <span class="hljs-number">0x1AC24696</span>,<br>     <span class="hljs-number">0xCDB30AEB</span>, <span class="hljs-number">0x532E3054</span>, <span class="hljs-number">0x8FD948E4</span>, <span class="hljs-number">0x6DBC3128</span>,<br>     <span class="hljs-number">0x58EBF2EF</span>, <span class="hljs-number">0x34C6FFEA</span>, <span class="hljs-number">0xFE28ED61</span>, <span class="hljs-number">0xEE7C3C73</span>,<br>     <span class="hljs-number">0x5D4A14D9</span>, <span class="hljs-number">0xE864B7E3</span>, <span class="hljs-number">0x42105D14</span>, <span class="hljs-number">0x203E13E0</span>,<br>     <span class="hljs-number">0x45EEE2B6</span>, <span class="hljs-number">0xA3AAABEA</span>, <span class="hljs-number">0xDB6C4F15</span>, <span class="hljs-number">0xFACB4FD0</span>,<br>     <span class="hljs-number">0xC742F442</span>, <span class="hljs-number">0xEF6ABBB5</span>, <span class="hljs-number">0x654F3B1D</span>, <span class="hljs-number">0x41CD2105</span>,<br>     <span class="hljs-number">0xD81E799E</span>, <span class="hljs-number">0x86854DC7</span>, <span class="hljs-number">0xE44B476A</span>, <span class="hljs-number">0x3D816250</span>,<br>     <span class="hljs-number">0xCF62A1F2</span>, <span class="hljs-number">0x5B8D2646</span>, <span class="hljs-number">0xFC8883A0</span>, <span class="hljs-number">0xC1C7B6A3</span>,<br>     <span class="hljs-number">0x7F1524C3</span>, <span class="hljs-number">0x69CB7492</span>, <span class="hljs-number">0x47848A0B</span>, <span class="hljs-number">0x5692B285</span>,<br>     <span class="hljs-number">0x095BBF00</span>, <span class="hljs-number">0xAD19489D</span>, <span class="hljs-number">0x1462B174</span>, <span class="hljs-number">0x23820E00</span>,<br>     <span class="hljs-number">0x58428D2A</span>, <span class="hljs-number">0x0C55F5EA</span>, <span class="hljs-number">0x1DADF43E</span>, <span class="hljs-number">0x233F7061</span>,<br>     <span class="hljs-number">0x3372F092</span>, <span class="hljs-number">0x8D937E41</span>, <span class="hljs-number">0xD65FECF1</span>, <span class="hljs-number">0x6C223BDB</span>,<br>     <span class="hljs-number">0x7CDE3759</span>, <span class="hljs-number">0xCBEE7460</span>, <span class="hljs-number">0x4085F2A7</span>, <span class="hljs-number">0xCE77326E</span>,<br>     <span class="hljs-number">0xA6078084</span>, <span class="hljs-number">0x19F8509E</span>, <span class="hljs-number">0xE8EFD855</span>, <span class="hljs-number">0x61D99735</span>,<br>     <span class="hljs-number">0xA969A7AA</span>, <span class="hljs-number">0xC50C06C2</span>, <span class="hljs-number">0x5A04ABFC</span>, <span class="hljs-number">0x800BCADC</span>,<br>     <span class="hljs-number">0x9E447A2E</span>, <span class="hljs-number">0xC3453484</span>, <span class="hljs-number">0xFDD56705</span>, <span class="hljs-number">0x0E1E9EC9</span>,<br>     <span class="hljs-number">0xDB73DBD3</span>, <span class="hljs-number">0x105588CD</span>, <span class="hljs-number">0x675FDA79</span>, <span class="hljs-number">0xE3674340</span>,<br>     <span class="hljs-number">0xC5C43465</span>, <span class="hljs-number">0x713E38D8</span>, <span class="hljs-number">0x3D28F89E</span>, <span class="hljs-number">0xF16DFF20</span>,<br>     <span class="hljs-number">0x153E21E7</span>, <span class="hljs-number">0x8FB03D4A</span>, <span class="hljs-number">0xE6E39F2B</span>, <span class="hljs-number">0xDB83ADF7</span>],<br>    [<span class="hljs-number">0xE93D5A68</span>, <span class="hljs-number">0x948140F7</span>, <span class="hljs-number">0xF64C261C</span>, <span class="hljs-number">0x94692934</span>,<br>     <span class="hljs-number">0x411520F7</span>, <span class="hljs-number">0x7602D4F7</span>, <span class="hljs-number">0xBCF46B2E</span>, <span class="hljs-number">0xD4A20068</span>,<br>     <span class="hljs-number">0xD4082471</span>, <span class="hljs-number">0x3320F46A</span>, <span class="hljs-number">0x43B7D4B7</span>, <span class="hljs-number">0x500061AF</span>,<br>     <span class="hljs-number">0x1E39F62E</span>, <span class="hljs-number">0x97244546</span>, <span class="hljs-number">0x14214F74</span>, <span class="hljs-number">0xBF8B8840</span>,<br>     <span class="hljs-number">0x4D95FC1D</span>, <span class="hljs-number">0x96B591AF</span>, <span class="hljs-number">0x70F4DDD3</span>, <span class="hljs-number">0x66A02F45</span>,<br>     <span class="hljs-number">0xBFBC09EC</span>, <span class="hljs-number">0x03BD9785</span>, <span class="hljs-number">0x7FAC6DD0</span>, <span class="hljs-number">0x31CB8504</span>,<br>     <span class="hljs-number">0x96EB27B3</span>, <span class="hljs-number">0x55FD3941</span>, <span class="hljs-number">0xDA2547E6</span>, <span class="hljs-number">0xABCA0A9A</span>,<br>     <span class="hljs-number">0x28507825</span>, <span class="hljs-number">0x530429F4</span>, <span class="hljs-number">0x0A2C86DA</span>, <span class="hljs-number">0xE9B66DFB</span>,<br>     <span class="hljs-number">0x68DC1462</span>, <span class="hljs-number">0xD7486900</span>, <span class="hljs-number">0x680EC0A4</span>, <span class="hljs-number">0x27A18DEE</span>,<br>     <span class="hljs-number">0x4F3FFEA2</span>, <span class="hljs-number">0xE887AD8C</span>, <span class="hljs-number">0xB58CE006</span>, <span class="hljs-number">0x7AF4D6B6</span>,<br>     <span class="hljs-number">0xAACE1E7C</span>, <span class="hljs-number">0xD3375FEC</span>, <span class="hljs-number">0xCE78A399</span>, <span class="hljs-number">0x406B2A42</span>,<br>     <span class="hljs-number">0x20FE9E35</span>, <span class="hljs-number">0xD9F385B9</span>, <span class="hljs-number">0xEE39D7AB</span>, <span class="hljs-number">0x3B124E8B</span>,<br>     <span class="hljs-number">0x1DC9FAF7</span>, <span class="hljs-number">0x4B6D1856</span>, <span class="hljs-number">0x26A36631</span>, <span class="hljs-number">0xEAE397B2</span>,<br>     <span class="hljs-number">0x3A6EFA74</span>, <span class="hljs-number">0xDD5B4332</span>, <span class="hljs-number">0x6841E7F7</span>, <span class="hljs-number">0xCA7820FB</span>,<br>     <span class="hljs-number">0xFB0AF54E</span>, <span class="hljs-number">0xD8FEB397</span>, <span class="hljs-number">0x454056AC</span>, <span class="hljs-number">0xBA489527</span>,<br>     <span class="hljs-number">0x55533A3A</span>, <span class="hljs-number">0x20838D87</span>, <span class="hljs-number">0xFE6BA9B7</span>, <span class="hljs-number">0xD096954B</span>,<br>     <span class="hljs-number">0x55A867BC</span>, <span class="hljs-number">0xA1159A58</span>, <span class="hljs-number">0xCCA92963</span>, <span class="hljs-number">0x99E1DB33</span>,<br>     <span class="hljs-number">0xA62A4A56</span>, <span class="hljs-number">0x3F3125F9</span>, <span class="hljs-number">0x5EF47E1C</span>, <span class="hljs-number">0x9029317C</span>,<br>     <span class="hljs-number">0xFDF8E802</span>, <span class="hljs-number">0x04272F70</span>, <span class="hljs-number">0x80BB155C</span>, <span class="hljs-number">0x05282CE3</span>,<br>     <span class="hljs-number">0x95C11548</span>, <span class="hljs-number">0xE4C66D22</span>, <span class="hljs-number">0x48C1133F</span>, <span class="hljs-number">0xC70F86DC</span>,<br>     <span class="hljs-number">0x07F9C9EE</span>, <span class="hljs-number">0x41041F0F</span>, <span class="hljs-number">0x404779A4</span>, <span class="hljs-number">0x5D886E17</span>,<br>     <span class="hljs-number">0x325F51EB</span>, <span class="hljs-number">0xD59BC0D1</span>, <span class="hljs-number">0xF2BCC18F</span>, <span class="hljs-number">0x41113564</span>,<br>     <span class="hljs-number">0x257B7834</span>, <span class="hljs-number">0x602A9C60</span>, <span class="hljs-number">0xDFF8E8A3</span>, <span class="hljs-number">0x1F636C1B</span>,<br>     <span class="hljs-number">0x0E12B4C2</span>, <span class="hljs-number">0x02E1329E</span>, <span class="hljs-number">0xAF664FD1</span>, <span class="hljs-number">0xCAD18115</span>,<br>     <span class="hljs-number">0x6B2395E0</span>, <span class="hljs-number">0x333E92E1</span>, <span class="hljs-number">0x3B240B62</span>, <span class="hljs-number">0xEEBEB922</span>,<br>     <span class="hljs-number">0x85B2A20E</span>, <span class="hljs-number">0xE6BA0D99</span>, <span class="hljs-number">0xDE720C8C</span>, <span class="hljs-number">0x2DA2F728</span>,<br>     <span class="hljs-number">0xD0127845</span>, <span class="hljs-number">0x95B794FD</span>, <span class="hljs-number">0x647D0862</span>, <span class="hljs-number">0xE7CCF5F0</span>,<br>     <span class="hljs-number">0x5449A36F</span>, <span class="hljs-number">0x877D48FA</span>, <span class="hljs-number">0xC39DFD27</span>, <span class="hljs-number">0xF33E8D1E</span>,<br>     <span class="hljs-number">0x0A476341</span>, <span class="hljs-number">0x992EFF74</span>, <span class="hljs-number">0x3A6F6EAB</span>, <span class="hljs-number">0xF4F8FD37</span>,<br>     <span class="hljs-number">0xA812DC60</span>, <span class="hljs-number">0xA1EBDDF8</span>, <span class="hljs-number">0x991BE14C</span>, <span class="hljs-number">0xDB6E6B0D</span>,<br>     <span class="hljs-number">0xC67B5510</span>, <span class="hljs-number">0x6D672C37</span>, <span class="hljs-number">0x2765D43B</span>, <span class="hljs-number">0xDCD0E804</span>,<br>     <span class="hljs-number">0xF1290DC7</span>, <span class="hljs-number">0xCC00FFA3</span>, <span class="hljs-number">0xB5390F92</span>, <span class="hljs-number">0x690FED0B</span>,<br>     <span class="hljs-number">0x667B9FFB</span>, <span class="hljs-number">0xCEDB7D9C</span>, <span class="hljs-number">0xA091CF0B</span>, <span class="hljs-number">0xD9155EA3</span>,<br>     <span class="hljs-number">0xBB132F88</span>, <span class="hljs-number">0x515BAD24</span>, <span class="hljs-number">0x7B9479BF</span>, <span class="hljs-number">0x763BD6EB</span>,<br>     <span class="hljs-number">0x37392EB3</span>, <span class="hljs-number">0xCC115979</span>, <span class="hljs-number">0x8026E297</span>, <span class="hljs-number">0xF42E312D</span>,<br>     <span class="hljs-number">0x6842ADA7</span>, <span class="hljs-number">0xC66A2B3B</span>, <span class="hljs-number">0x12754CCC</span>, <span class="hljs-number">0x782EF11C</span>,<br>     <span class="hljs-number">0x6A124237</span>, <span class="hljs-number">0xB79251E7</span>, <span class="hljs-number">0x06A1BBE6</span>, <span class="hljs-number">0x4BFB6350</span>,<br>     <span class="hljs-number">0x1A6B1018</span>, <span class="hljs-number">0x11CAEDFA</span>, <span class="hljs-number">0x3D25BDD8</span>, <span class="hljs-number">0xE2E1C3C9</span>,<br>     <span class="hljs-number">0x44421659</span>, <span class="hljs-number">0x0A121386</span>, <span class="hljs-number">0xD90CEC6E</span>, <span class="hljs-number">0xD5ABEA2A</span>,<br>     <span class="hljs-number">0x64AF674E</span>, <span class="hljs-number">0xDA86A85F</span>, <span class="hljs-number">0xBEBFE988</span>, <span class="hljs-number">0x64E4C3FE</span>,<br>     <span class="hljs-number">0x9DBC8057</span>, <span class="hljs-number">0xF0F7C086</span>, <span class="hljs-number">0x60787BF8</span>, <span class="hljs-number">0x6003604D</span>,<br>     <span class="hljs-number">0xD1FD8346</span>, <span class="hljs-number">0xF6381FB0</span>, <span class="hljs-number">0x7745AE04</span>, <span class="hljs-number">0xD736FCCC</span>,<br>     <span class="hljs-number">0x83426B33</span>, <span class="hljs-number">0xF01EAB71</span>, <span class="hljs-number">0xB0804187</span>, <span class="hljs-number">0x3C005E5F</span>,<br>     <span class="hljs-number">0x77A057BE</span>, <span class="hljs-number">0xBDE8AE24</span>, <span class="hljs-number">0x55464299</span>, <span class="hljs-number">0xBF582E61</span>,<br>     <span class="hljs-number">0x4E58F48F</span>, <span class="hljs-number">0xF2DDFDA2</span>, <span class="hljs-number">0xF474EF38</span>, <span class="hljs-number">0x8789BDC2</span>,<br>     <span class="hljs-number">0x5366F9C3</span>, <span class="hljs-number">0xC8B38E74</span>, <span class="hljs-number">0xB475F255</span>, <span class="hljs-number">0x46FCD9B9</span>,<br>     <span class="hljs-number">0x7AEB2661</span>, <span class="hljs-number">0x8B1DDF84</span>, <span class="hljs-number">0x846A0E79</span>, <span class="hljs-number">0x915F95E2</span>,<br>     <span class="hljs-number">0x466E598E</span>, <span class="hljs-number">0x20B45770</span>, <span class="hljs-number">0x8CD55591</span>, <span class="hljs-number">0xC902DE4C</span>,<br>     <span class="hljs-number">0xB90BACE1</span>, <span class="hljs-number">0xBB8205D0</span>, <span class="hljs-number">0x11A86248</span>, <span class="hljs-number">0x7574A99E</span>,<br>     <span class="hljs-number">0xB77F19B6</span>, <span class="hljs-number">0xE0A9DC09</span>, <span class="hljs-number">0x662D09A1</span>, <span class="hljs-number">0xC4324633</span>,<br>     <span class="hljs-number">0xE85A1F02</span>, <span class="hljs-number">0x09F0BE8C</span>, <span class="hljs-number">0x4A99A025</span>, <span class="hljs-number">0x1D6EFE10</span>,<br>     <span class="hljs-number">0x1AB93D1D</span>, <span class="hljs-number">0x0BA5A4DF</span>, <span class="hljs-number">0xA186F20F</span>, <span class="hljs-number">0x2868F169</span>,<br>     <span class="hljs-number">0xDCB7DA83</span>, <span class="hljs-number">0x573906FE</span>, <span class="hljs-number">0xA1E2CE9B</span>, <span class="hljs-number">0x4FCD7F52</span>,<br>     <span class="hljs-number">0x50115E01</span>, <span class="hljs-number">0xA70683FA</span>, <span class="hljs-number">0xA002B5C4</span>, <span class="hljs-number">0x0DE6D027</span>,<br>     <span class="hljs-number">0x9AF88C27</span>, <span class="hljs-number">0x773F8641</span>, <span class="hljs-number">0xC3604C06</span>, <span class="hljs-number">0x61A806B5</span>,<br>     <span class="hljs-number">0xF0177A28</span>, <span class="hljs-number">0xC0F586E0</span>, <span class="hljs-number">0x006058AA</span>, <span class="hljs-number">0x30DC7D62</span>,<br>     <span class="hljs-number">0x11E69ED7</span>, <span class="hljs-number">0x2338EA63</span>, <span class="hljs-number">0x53C2DD94</span>, <span class="hljs-number">0xC2C21634</span>,<br>     <span class="hljs-number">0xBBCBEE56</span>, <span class="hljs-number">0x90BCB6DE</span>, <span class="hljs-number">0xEBFC7DA1</span>, <span class="hljs-number">0xCE591D76</span>,<br>     <span class="hljs-number">0x6F05E409</span>, <span class="hljs-number">0x4B7C0188</span>, <span class="hljs-number">0x39720A3D</span>, <span class="hljs-number">0x7C927C24</span>,<br>     <span class="hljs-number">0x86E3725F</span>, <span class="hljs-number">0x724D9DB9</span>, <span class="hljs-number">0x1AC15BB4</span>, <span class="hljs-number">0xD39EB8FC</span>,<br>     <span class="hljs-number">0xED545578</span>, <span class="hljs-number">0x08FCA5B5</span>, <span class="hljs-number">0xD83D7CD3</span>, <span class="hljs-number">0x4DAD0FC4</span>,<br>     <span class="hljs-number">0x1E50EF5E</span>, <span class="hljs-number">0xB161E6F8</span>, <span class="hljs-number">0xA28514D9</span>, <span class="hljs-number">0x6C51133C</span>,<br>     <span class="hljs-number">0x6FD5C7E7</span>, <span class="hljs-number">0x56E14EC4</span>, <span class="hljs-number">0x362ABFCE</span>, <span class="hljs-number">0xDDC6C837</span>,<br>     <span class="hljs-number">0xD79A3234</span>, <span class="hljs-number">0x92638212</span>, <span class="hljs-number">0x670EFA8E</span>, <span class="hljs-number">0x406000E0</span>],<br>    [<span class="hljs-number">0x3A39CE37</span>, <span class="hljs-number">0xD3FAF5CF</span>, <span class="hljs-number">0xABC27737</span>, <span class="hljs-number">0x5AC52D1B</span>,<br>     <span class="hljs-number">0x5CB0679E</span>, <span class="hljs-number">0x4FA33742</span>, <span class="hljs-number">0xD3822740</span>, <span class="hljs-number">0x99BC9BBE</span>,<br>     <span class="hljs-number">0xD5118E9D</span>, <span class="hljs-number">0xBF0F7315</span>, <span class="hljs-number">0xD62D1C7E</span>, <span class="hljs-number">0xC700C47B</span>,<br>     <span class="hljs-number">0xB78C1B6B</span>, <span class="hljs-number">0x21A19045</span>, <span class="hljs-number">0xB26EB1BE</span>, <span class="hljs-number">0x6A366EB4</span>,<br>     <span class="hljs-number">0x5748AB2F</span>, <span class="hljs-number">0xBC946E79</span>, <span class="hljs-number">0xC6A376D2</span>, <span class="hljs-number">0x6549C2C8</span>,<br>     <span class="hljs-number">0x530FF8EE</span>, <span class="hljs-number">0x468DDE7D</span>, <span class="hljs-number">0xD5730A1D</span>, <span class="hljs-number">0x4CD04DC6</span>,<br>     <span class="hljs-number">0x2939BBDB</span>, <span class="hljs-number">0xA9BA4650</span>, <span class="hljs-number">0xAC9526E8</span>, <span class="hljs-number">0xBE5EE304</span>,<br>     <span class="hljs-number">0xA1FAD5F0</span>, <span class="hljs-number">0x6A2D519A</span>, <span class="hljs-number">0x63EF8CE2</span>, <span class="hljs-number">0x9A86EE22</span>,<br>     <span class="hljs-number">0xC089C2B8</span>, <span class="hljs-number">0x43242EF6</span>, <span class="hljs-number">0xA51E03AA</span>, <span class="hljs-number">0x9CF2D0A4</span>,<br>     <span class="hljs-number">0x83C061BA</span>, <span class="hljs-number">0x9BE96A4D</span>, <span class="hljs-number">0x8FE51550</span>, <span class="hljs-number">0xBA645BD6</span>,<br>     <span class="hljs-number">0x2826A2F9</span>, <span class="hljs-number">0xA73A3AE1</span>, <span class="hljs-number">0x4BA99586</span>, <span class="hljs-number">0xEF5562E9</span>,<br>     <span class="hljs-number">0xC72FEFD3</span>, <span class="hljs-number">0xF752F7DA</span>, <span class="hljs-number">0x3F046F69</span>, <span class="hljs-number">0x77FA0A59</span>,<br>     <span class="hljs-number">0x80E4A915</span>, <span class="hljs-number">0x87B08601</span>, <span class="hljs-number">0x9B09E6AD</span>, <span class="hljs-number">0x3B3EE593</span>,<br>     <span class="hljs-number">0xE990FD5A</span>, <span class="hljs-number">0x9E34D797</span>, <span class="hljs-number">0x2CF0B7D9</span>, <span class="hljs-number">0x022B8B51</span>,<br>     <span class="hljs-number">0x96D5AC3A</span>, <span class="hljs-number">0x017DA67D</span>, <span class="hljs-number">0xD1CF3ED6</span>, <span class="hljs-number">0x7C7D2D28</span>,<br>     <span class="hljs-number">0x1F9F25CF</span>, <span class="hljs-number">0xADF2B89B</span>, <span class="hljs-number">0x5AD6B472</span>, <span class="hljs-number">0x5A88F54C</span>,<br>     <span class="hljs-number">0xE029AC71</span>, <span class="hljs-number">0xE019A5E6</span>, <span class="hljs-number">0x47B0ACFD</span>, <span class="hljs-number">0xED93FA9B</span>,<br>     <span class="hljs-number">0xE8D3C48D</span>, <span class="hljs-number">0x283B57CC</span>, <span class="hljs-number">0xF8D56629</span>, <span class="hljs-number">0x79132E28</span>,<br>     <span class="hljs-number">0x785F0191</span>, <span class="hljs-number">0xED756055</span>, <span class="hljs-number">0xF7960E44</span>, <span class="hljs-number">0xE3D35E8C</span>,<br>     <span class="hljs-number">0x15056DD4</span>, <span class="hljs-number">0x88F46DBA</span>, <span class="hljs-number">0x03A16125</span>, <span class="hljs-number">0x0564F0BD</span>,<br>     <span class="hljs-number">0xC3EB9E15</span>, <span class="hljs-number">0x3C9057A2</span>, <span class="hljs-number">0x97271AEC</span>, <span class="hljs-number">0xA93A072A</span>,<br>     <span class="hljs-number">0x1B3F6D9B</span>, <span class="hljs-number">0x1E6321F5</span>, <span class="hljs-number">0xF59C66FB</span>, <span class="hljs-number">0x26DCF319</span>,<br>     <span class="hljs-number">0x7533D928</span>, <span class="hljs-number">0xB155FDF5</span>, <span class="hljs-number">0x03563482</span>, <span class="hljs-number">0x8ABA3CBB</span>,<br>     <span class="hljs-number">0x28517711</span>, <span class="hljs-number">0xC20AD9F8</span>, <span class="hljs-number">0xABCC5167</span>, <span class="hljs-number">0xCCAD925F</span>,<br>     <span class="hljs-number">0x4DE81751</span>, <span class="hljs-number">0x3830DC8E</span>, <span class="hljs-number">0x379D5862</span>, <span class="hljs-number">0x9320F991</span>,<br>     <span class="hljs-number">0xEA7A90C2</span>, <span class="hljs-number">0xFB3E7BCE</span>, <span class="hljs-number">0x5121CE64</span>, <span class="hljs-number">0x774FBE32</span>,<br>     <span class="hljs-number">0xA8B6E37E</span>, <span class="hljs-number">0xC3293D46</span>, <span class="hljs-number">0x48DE5369</span>, <span class="hljs-number">0x6413E680</span>,<br>     <span class="hljs-number">0xA2AE0810</span>, <span class="hljs-number">0xDD6DB224</span>, <span class="hljs-number">0x69852DFD</span>, <span class="hljs-number">0x09072166</span>,<br>     <span class="hljs-number">0xB39A460A</span>, <span class="hljs-number">0x6445C0DD</span>, <span class="hljs-number">0x586CDECF</span>, <span class="hljs-number">0x1C20C8AE</span>,<br>     <span class="hljs-number">0x5BBEF7DD</span>, <span class="hljs-number">0x1B588D40</span>, <span class="hljs-number">0xCCD2017F</span>, <span class="hljs-number">0x6BB4E3BB</span>,<br>     <span class="hljs-number">0xDDA26A7E</span>, <span class="hljs-number">0x3A59FF45</span>, <span class="hljs-number">0x3E350A44</span>, <span class="hljs-number">0xBCB4CDD5</span>,<br>     <span class="hljs-number">0x72EACEA8</span>, <span class="hljs-number">0xFA6484BB</span>, <span class="hljs-number">0x8D6612AE</span>, <span class="hljs-number">0xBF3C6F47</span>,<br>     <span class="hljs-number">0xD29BE463</span>, <span class="hljs-number">0x542F5D9E</span>, <span class="hljs-number">0xAEC2771B</span>, <span class="hljs-number">0xF64E6370</span>,<br>     <span class="hljs-number">0x740E0D8D</span>, <span class="hljs-number">0xE75B1357</span>, <span class="hljs-number">0xF8721671</span>, <span class="hljs-number">0xAF537D5D</span>,<br>     <span class="hljs-number">0x4040CB08</span>, <span class="hljs-number">0x4EB4E2CC</span>, <span class="hljs-number">0x34D2466A</span>, <span class="hljs-number">0x0115AF84</span>,<br>     <span class="hljs-number">0xE1B00428</span>, <span class="hljs-number">0x95983A1D</span>, <span class="hljs-number">0x06B89FB4</span>, <span class="hljs-number">0xCE6EA048</span>,<br>     <span class="hljs-number">0x6F3F3B82</span>, <span class="hljs-number">0x3520AB82</span>, <span class="hljs-number">0x011A1D4B</span>, <span class="hljs-number">0x277227F8</span>,<br>     <span class="hljs-number">0x611560B1</span>, <span class="hljs-number">0xE7933FDC</span>, <span class="hljs-number">0xBB3A792B</span>, <span class="hljs-number">0x344525BD</span>,<br>     <span class="hljs-number">0xA08839E1</span>, <span class="hljs-number">0x51CE794B</span>, <span class="hljs-number">0x2F32C9B7</span>, <span class="hljs-number">0xA01FBAC9</span>,<br>     <span class="hljs-number">0xE01CC87E</span>, <span class="hljs-number">0xBCC7D1F6</span>, <span class="hljs-number">0xCF0111C3</span>, <span class="hljs-number">0xA1E8AAC7</span>,<br>     <span class="hljs-number">0x1A908749</span>, <span class="hljs-number">0xD44FBD9A</span>, <span class="hljs-number">0xD0DADECB</span>, <span class="hljs-number">0xD50ADA38</span>,<br>     <span class="hljs-number">0x0339C32A</span>, <span class="hljs-number">0xC6913667</span>, <span class="hljs-number">0x8DF9317C</span>, <span class="hljs-number">0xE0B12B4F</span>,<br>     <span class="hljs-number">0xF79E59B7</span>, <span class="hljs-number">0x43F5BB3A</span>, <span class="hljs-number">0xF2D519FF</span>, <span class="hljs-number">0x27D9459C</span>,<br>     <span class="hljs-number">0xBF97222C</span>, <span class="hljs-number">0x15E6FC2A</span>, <span class="hljs-number">0x0F91FC71</span>, <span class="hljs-number">0x9B941525</span>,<br>     <span class="hljs-number">0xFAE59361</span>, <span class="hljs-number">0xCEB69CEB</span>, <span class="hljs-number">0xC2A86459</span>, <span class="hljs-number">0x12BAA8D1</span>,<br>     <span class="hljs-number">0xB6C1075E</span>, <span class="hljs-number">0xE3056A0C</span>, <span class="hljs-number">0x10D25065</span>, <span class="hljs-number">0xCB03A442</span>,<br>     <span class="hljs-number">0xE0EC6E0E</span>, <span class="hljs-number">0x1698DB3B</span>, <span class="hljs-number">0x4C98A0BE</span>, <span class="hljs-number">0x3278E964</span>,<br>     <span class="hljs-number">0x9F1F9532</span>, <span class="hljs-number">0xE0D392DF</span>, <span class="hljs-number">0xD3A0342B</span>, <span class="hljs-number">0x8971F21E</span>,<br>     <span class="hljs-number">0x1B0A7441</span>, <span class="hljs-number">0x4BA3348C</span>, <span class="hljs-number">0xC5BE7120</span>, <span class="hljs-number">0xC37632D8</span>,<br>     <span class="hljs-number">0xDF359F8D</span>, <span class="hljs-number">0x9B992F2E</span>, <span class="hljs-number">0xE60B6F47</span>, <span class="hljs-number">0x0FE3F11D</span>,<br>     <span class="hljs-number">0xE54CDA54</span>, <span class="hljs-number">0x1EDAD891</span>, <span class="hljs-number">0xCE6279CF</span>, <span class="hljs-number">0xCD3E7E6F</span>,<br>     <span class="hljs-number">0x1618B166</span>, <span class="hljs-number">0xFD2C1D05</span>, <span class="hljs-number">0x848FD2C5</span>, <span class="hljs-number">0xF6FB2299</span>,<br>     <span class="hljs-number">0xF523F357</span>, <span class="hljs-number">0xA6327623</span>, <span class="hljs-number">0x93A83531</span>, <span class="hljs-number">0x56CCCD02</span>,<br>     <span class="hljs-number">0xACF08162</span>, <span class="hljs-number">0x5A75EBB5</span>, <span class="hljs-number">0x6E163697</span>, <span class="hljs-number">0x88D273CC</span>,<br>     <span class="hljs-number">0xDE966292</span>, <span class="hljs-number">0x81B949D0</span>, <span class="hljs-number">0x4C50901B</span>, <span class="hljs-number">0x71C65614</span>,<br>     <span class="hljs-number">0xE6C6C7BD</span>, <span class="hljs-number">0x327A140A</span>, <span class="hljs-number">0x45E1D006</span>, <span class="hljs-number">0xC3F27B9A</span>,<br>     <span class="hljs-number">0xC9AA53FD</span>, <span class="hljs-number">0x62A80F00</span>, <span class="hljs-number">0xBB25BFE2</span>, <span class="hljs-number">0x35BDD2F6</span>,<br>     <span class="hljs-number">0x71126905</span>, <span class="hljs-number">0xB2040222</span>, <span class="hljs-number">0xB6CBCF7C</span>, <span class="hljs-number">0xCD769C2B</span>,<br>     <span class="hljs-number">0x53113EC0</span>, <span class="hljs-number">0x1640E3D3</span>, <span class="hljs-number">0x38ABBD60</span>, <span class="hljs-number">0x2547ADF0</span>,<br>     <span class="hljs-number">0xBA38209C</span>, <span class="hljs-number">0xF746CE76</span>, <span class="hljs-number">0x77AFA1C5</span>, <span class="hljs-number">0x20756060</span>,<br>     <span class="hljs-number">0x85CBFE4E</span>, <span class="hljs-number">0x8AE88DD8</span>, <span class="hljs-number">0x7AAAF9B0</span>, <span class="hljs-number">0x4CF9AA7E</span>,<br>     <span class="hljs-number">0x1948C25C</span>, <span class="hljs-number">0x02FB8A8C</span>, <span class="hljs-number">0x01C36AE4</span>, <span class="hljs-number">0xD6EBE1F9</span>,<br>     <span class="hljs-number">0x90D4F869</span>, <span class="hljs-number">0xA65CDEA0</span>, <span class="hljs-number">0x3F09252D</span>, <span class="hljs-number">0xC208E69F</span>,<br>     <span class="hljs-number">0xB74E6132</span>, <span class="hljs-number">0xCE77E25B</span>, <span class="hljs-number">0x578FDFE3</span>, <span class="hljs-number">0x3AC372E6</span>]]<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Loading a Binary</title>
    <link href="/2023/05/26/Loading%20a%20Binary/"/>
    <url>/2023/05/26/Loading%20a%20Binary/</url>
    
    <content type="html"><![CDATA[<p><a href="https://docs.angr.io/en/latest/core-concepts/loading.html">Loading a Binary</a></p><span id="more"></span><p>angr是通过CLE模块来装载一个二进制文件，也就是说CLE的接口也可以用于angr。</p><h2 id="The-Loader"><a href="#The-Loader" class="headerlink" title="The Loader"></a>The Loader</h2><p>目前我们可以用以下几行代码装载一个二进制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr, monkeyhex<br>proj = angr.Project(<span class="hljs-string">&#x27;examples/fauxware/fauxware&#x27;</span>)<br>proj.loader<br>&lt;Loaded fauxware, maps [<span class="hljs-number">0x400000</span>:<span class="hljs-number">0x5008000</span>]&gt;<br></code></pre></td></tr></table></figure><h3 id="Loaded-Objects"><a href="#Loaded-Objects" class="headerlink" title="Loaded Objects"></a>Loaded Objects</h3><p>前面提到Angr使用CLE来装载二进制文件，而CLE装载器即<code>cle.Loader</code>装载了这个二进制文件的所有objects，并且把他们映射到一个内存地址。每一个不同类型的binary objec都可以由<code>cle.Backend</code>处理，比如<code>cle.ELF</code>就是用来装载ELF文件。</p><h4 id="loader-all-objects"><a href="#loader-all-objects" class="headerlink" title="loader.all_objects"></a>loader.all_objects</h4><p>可以通过<code>loader.all_objects</code>来获得CLE装载所有objects的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># All loaded objects</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>proj.loader.all_objects<br>[&lt;ELF Object fauxware, maps [<span class="hljs-number">0x400000</span>:<span class="hljs-number">0x60105f</span>]&gt;,<br> &lt;ELF Object libc-<span class="hljs-number">2.23</span>.so, maps [<span class="hljs-number">0x1000000</span>:<span class="hljs-number">0x13c999f</span>]&gt;,<br> &lt;ELF Object ld-<span class="hljs-number">2.23</span>.so, maps [<span class="hljs-number">0x2000000</span>:<span class="hljs-number">0x2227167</span>]&gt;,<br> &lt;ELFTLSObject Object cle<span class="hljs-comment">##tls, maps [0x3000000:0x3015010]&gt;,</span><br> &lt;ExternObject Object cle<span class="hljs-comment">##externs, maps [0x4000000:0x4008000]&gt;,</span><br> &lt;KernelObject Object cle<span class="hljs-comment">##kernel, maps [0x5000000:0x5008000]&gt;]</span><br><br><span class="hljs-comment"># main object 也就是需要我们关注的那个object</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>proj.loader.main_object<br>&lt;ELF Object fauxware, maps [<span class="hljs-number">0x400000</span>:<span class="hljs-number">0x60105f</span>]&gt;<br><br><span class="hljs-comment"># 从名字到地址的映射</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>proj.loader.shared_objects<br>&#123; <span class="hljs-string">&#x27;fauxware&#x27;</span>: &lt;ELF Object fauxware, maps [<span class="hljs-number">0x400000</span>:<span class="hljs-number">0x60105f</span>]&gt;,<br>  <span class="hljs-string">&#x27;libc.so.6&#x27;</span>: &lt;ELF Object libc-<span class="hljs-number">2.23</span>.so, maps [<span class="hljs-number">0x1000000</span>:<span class="hljs-number">0x13c999f</span>]&gt;,<br>  <span class="hljs-string">&#x27;ld-linux-x86-64.so.2&#x27;</span>: &lt;ELF Object ld-<span class="hljs-number">2.23</span>.so, maps [<span class="hljs-number">0x2000000</span>:<span class="hljs-number">0x2227167</span>]&gt; &#125;<br><br><span class="hljs-comment"># 从ELF装载的所有文件</span><br><span class="hljs-comment"># 如果是PE程序 使用all_pe_objects</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>proj.loader.all_elf_objects<br>[&lt;ELF Object fauxware, maps [<span class="hljs-number">0x400000</span>:<span class="hljs-number">0x60105f</span>]&gt;,<br> &lt;ELF Object libc-<span class="hljs-number">2.23</span>.so, maps [<span class="hljs-number">0x1000000</span>:<span class="hljs-number">0x13c999f</span>]&gt;,<br> &lt;ELF Object ld-<span class="hljs-number">2.23</span>.so, maps [<span class="hljs-number">0x2000000</span>:<span class="hljs-number">0x2227167</span>]&gt;]<br><br><span class="hljs-comment"># 处理外部导入</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>proj.loader.extern_object<br>&lt;ExternObject Object cle<span class="hljs-comment">##externs, maps [0x4000000:0x4008000]&gt;</span><br><br><span class="hljs-comment"># 此object提供系统调用地址</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>proj.loader.kernel_object<br>&lt;KernelObject Object cle<span class="hljs-comment">##kernel, maps [0x5000000:0x5008000]&gt;</span><br><br><span class="hljs-comment"># 通过地址找object</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>proj.loader.find_object_containing(<span class="hljs-number">0x400000</span>)<br>&lt;ELF Object fauxware, maps [<span class="hljs-number">0x400000</span>:<span class="hljs-number">0x60105f</span>]&gt;<br></code></pre></td></tr></table></figure><h4 id="与object交互"><a href="#与object交互" class="headerlink" title="与object交互"></a>与object交互</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">obj = proj.loader.main_object<br><br><span class="hljs-comment"># 入口点</span><br>obj.entry<br><span class="hljs-number">0x400580</span><br><br><span class="hljs-comment"># 起始 终止</span><br>obj.min_addr, obj.max_addr<br>(<span class="hljs-number">0x400000</span>, <span class="hljs-number">0x60105f</span>)<br><br><span class="hljs-comment"># segments</span><br>obj.segments<br>&lt;Regions: [&lt;ELFSegment memsize=<span class="hljs-number">0xa74</span>, filesize=<span class="hljs-number">0xa74</span>, vaddr=<span class="hljs-number">0x400000</span>, flags=<span class="hljs-number">0x5</span>, offset=<span class="hljs-number">0x0</span>&gt;,<br>           &lt;ELFSegment memsize=<span class="hljs-number">0x238</span>, filesize=<span class="hljs-number">0x228</span>, vaddr=<span class="hljs-number">0x600e28</span>, flags=<span class="hljs-number">0x6</span>, offset=<span class="hljs-number">0xe28</span>&gt;]&gt;<br><span class="hljs-comment"># sections</span><br>obj.sections<br>&lt;Regions: [&lt;Unnamed | offset <span class="hljs-number">0x0</span>, vaddr <span class="hljs-number">0x0</span>, size <span class="hljs-number">0x0</span>&gt;,<br>           &lt;.interp | offset <span class="hljs-number">0x238</span>, vaddr <span class="hljs-number">0x400238</span>, size <span class="hljs-number">0x1c</span>&gt;,<br>           &lt;.note.ABI-tag | offset <span class="hljs-number">0x254</span>, vaddr <span class="hljs-number">0x400254</span>, size <span class="hljs-number">0x20</span>&gt;,<br>            ...etc<br><br><span class="hljs-comment"># 利用地址去找segment 或者 section</span><br>obj.find_segment_containing(obj.entry)<br>&lt;ELFSegment memsize=<span class="hljs-number">0xa74</span>, filesize=<span class="hljs-number">0xa74</span>, vaddr=<span class="hljs-number">0x400000</span>, flags=<span class="hljs-number">0x5</span>, offset=<span class="hljs-number">0x0</span>&gt;<br>obj.find_section_containing(obj.entry)<br>&lt;.text | offset <span class="hljs-number">0x580</span>, vaddr <span class="hljs-number">0x400580</span>, size <span class="hljs-number">0x338</span>&gt;<br><br><span class="hljs-comment"># plt表找符号</span><br>addr = obj.plt[<span class="hljs-string">&#x27;strcmp&#x27;</span>]<br>addr<br><span class="hljs-number">0x400550</span><br>obj.reverse_plt[addr]<br><span class="hljs-string">&#x27;strcmp&#x27;</span><br><br><span class="hljs-comment"># Show the prelinked base of the object and the location it was actually mapped into memory by CLE</span><br>obj.linked_base<br><span class="hljs-number">0x400000</span><br>obj.mapped_base<br><span class="hljs-number">0x400000</span><br></code></pre></td></tr></table></figure><h3 id="Symbols-and-Relocations"><a href="#Symbols-and-Relocations" class="headerlink" title="Symbols and Relocations"></a>Symbols and Relocations</h3><p>symbol是可执行文件的重要概念，完成从名字到地址的映射</p><p>可以利用<code>loader.find_symbol</code>寻找特定symbol,它的参数可以是名字，也可以是地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">strcmp = proj.loader.find_symbol(<span class="hljs-string">&#x27;strcmp&#x27;</span>)<br>strcmp<br>&lt;Symbol <span class="hljs-string">&quot;strcmp&quot;</span> <span class="hljs-keyword">in</span> libc.so<span class="hljs-number">.6</span> at <span class="hljs-number">0x1089cd0</span>&gt;<br></code></pre></td></tr></table></figure><p>symbol有三种形式地址</p><p><code>.rebased_addr</code> 是全局地址空间的地址</p><p><code>.linked_addr</code> 预链接地址</p><p><code>.relative_addr</code> 即RVA</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">strcmp.name<br><span class="hljs-string">&#x27;strcmp&#x27;</span><br><br>strcmp.owner<br>&lt;ELF Object libc-<span class="hljs-number">2.23</span>.so, maps [<span class="hljs-number">0x1000000</span>:<span class="hljs-number">0x13c999f</span>]&gt;<br><br>strcmp.rebased_addr<br><span class="hljs-number">0x1089cd0</span><br>strcmp.linked_addr<br><span class="hljs-number">0x89cd0</span><br>strcmp.relative_addr<br><span class="hljs-number">0x89cd0</span><br></code></pre></td></tr></table></figure><h2 id="Loading-Options"><a href="#Loading-Options" class="headerlink" title="Loading Options"></a>Loading Options</h2><p>可以给angr.Project传一些参数，以此来约束加载二进制文件的行为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>auto_load_libs  决定是否加载动态链接库，默认开启<br><span class="hljs-number">2.</span>skip_libs       跳过这些依赖库<br><span class="hljs-number">3.</span>ld_path         寻找动态链接库的路径<br><span class="hljs-number">4.</span>backend         后端，比如 blob<br><span class="hljs-number">5.</span>base_addr       基址<br><span class="hljs-number">6.</span>entry_point     入口点<br><span class="hljs-number">7.</span>arch            架构<br></code></pre></td></tr></table></figure><h3 id="Symbolic-Function-Summaries"><a href="#Symbolic-Function-Summaries" class="headerlink" title="Symbolic Function Summaries"></a>Symbolic Function Summaries</h3><p>Project会将外部的call转化为自己的符号执行，angr已经把一整套的外部库函数给模拟为SimProcedures了，</p><p>可以在<code>angr.SIM_PROCEDURES</code>字典访问，键值是库的名字，对象是这个库的函数名字</p><p>如果没有这个外部函数的SimProcedueres:</p><p><code>auto_load_libs</code> is <code>True</code> (default), 执行原来的函数</p><p><code>auto_load_libs</code> is <code>False</code>, 也是模拟执行，但返回一个无约束的状态</p><p><code>use_sim_procedures</code>，这个是<code>angr.Project</code>的参数，如果是False，只会模拟执行此symbols.默认是True</p><p>Hook</p><p><code>proj.hook(addr, hook)</code>, where <code>hook</code> is a SimProcedure instance. You can manage your project’s hooks with <code>.is_hooked</code>, <code>.unhook</code>, and <code>.hooked_by</code>, which should hopefully not require explanation.</p><p>可以指定length参数，来决定hook后跳多少个bytes指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">stub_func = angr.SIM_PROCEDURES[<span class="hljs-string">&#x27;stubs&#x27;</span>][<span class="hljs-string">&#x27;ReturnUnconstrained&#x27;</span>] <span class="hljs-comment"># this is a CLASS</span><br>proj.hook(<span class="hljs-number">0x10000</span>, stub_func())  <span class="hljs-comment"># hook with an instance of the class</span><br><br>proj.is_hooked(<span class="hljs-number">0x10000</span>)            <span class="hljs-comment"># these functions should be pretty self-explanitory</span><br><span class="hljs-literal">True</span><br>proj.hooked_by(<span class="hljs-number">0x10000</span>)<br>&lt;ReturnUnconstrained&gt;<br><br>proj.unhook(<span class="hljs-number">0x10000</span>)<br><br><span class="hljs-meta">@proj.hook(<span class="hljs-params"><span class="hljs-number">0x20000</span>, length=<span class="hljs-number">5</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_hook</span>(<span class="hljs-params">state</span>):<br>    state.regs.rax = <span class="hljs-number">1</span><br><br>proj.is_hooked(<span class="hljs-number">0x20000</span>)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>angr这样描述hook</p><blockquote><p>Furthermore, you can use <code>proj.hook_symbol(name, hook)</code>, providing the name of a symbol as the first argument, to hook the address where the symbol lives. One very important usage of this is to extend the behavior of angr’s built-in library SimProcedures. Since these library functions are just classes, you can subclass them, overriding pieces of their behavior, and then use your subclass in a hook.</p></blockquote><p>也即我们可以用<code>proj.hook_symbol(name,hook)</code>来替换angr内置的函数，以我们的方式实现</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>angr</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>angr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>miniLCTF2023 maze_aot</title>
    <link href="/2023/05/25/miniLCTF2023%20maze_aot/"/>
    <url>/2023/05/25/miniLCTF2023%20maze_aot/</url>
    
    <content type="html"><![CDATA[<p>一道题学会angr和IDApython,甚至BFS（：</p><span id="more"></span><p>题目流程很简单，输入一个8个十六进制数，依次根据最低位选择一条路径走，走到会终点即可得到flag</p><p>这里是<a href="https://github.com/XDSEC/miniLCTF_2023/tree/main/Challenges/maze_aot">题目</a></p><h2 id="IDApython"><a href="#IDApython" class="headerlink" title="IDApython"></a>IDApython</h2><p>观察迷宫的流程图，会发现是很有规律的，每一个block都有两个successor，根据输入决定前往哪一个successor。还要注意一点，就是会有直接jmp块，需要做个小处理。通过IDApython 提取处迷宫的结构，再用BFS算法去走即可。</p><h3 id="提取迷宫"><a href="#提取迷宫" class="headerlink" title="提取迷宫"></a>提取迷宫</h3><p>大致分为三部分，第一部分是计算每个block的successor，存储为字典形式，这里不区分是普通跳转还是直接jmp跳转</p><p>第二部分是记录直接跳转块</p><p>第三部分是计算普通跳转是通过什么方式去跳，即是jz还是jnz，也是存储为字典形式</p><p>note：在提取迷宫的时候，最好将地址全部转为十进制的整型，否则后面比较会有各种问题（在这卡了好久）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python">start_ea = <span class="hljs-number">0x1500</span><br>end_ea = <span class="hljs-number">0x23D9</span><br><br>func = idaapi.get_func(start_ea)<br>cfg = idaapi.FlowChart(func)<br><br>Maze = <span class="hljs-built_in">dict</span>()<br>JmpMethod = <span class="hljs-built_in">dict</span>()<br>DirJmp = <span class="hljs-built_in">list</span>()<br><span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> cfg:<br>    BlockStart = block.start_ea<br>    BlockEnd = block.end_ea<br>    <br>    <span class="hljs-comment"># 初始化一下</span><br>    Maze[BlockStart] = <span class="hljs-built_in">list</span>()<br><br>    <span class="hljs-comment"># 记录每一个块可以去哪</span><br>    <span class="hljs-keyword">for</span> succ <span class="hljs-keyword">in</span> block.succs():<br>        <span class="hljs-comment"># 如果不是直接跳转块，那么直接获取successor的起始地址</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> GetDisasm(succ.start_ea).startswith(<span class="hljs-string">&#x27;jmp&#x27;</span>):<br>            Maze[BlockStart].append(succ.start_ea)<br>        <span class="hljs-comment"># 如果是直接跳转块 那么就获取该汇编语句jmp的地址，并将字符型地址转为整数型存储</span><br>        <span class="hljs-keyword">else</span>:<br>            Maze[BlockStart].append(<span class="hljs-built_in">int</span>(GetDisasm(succ.start_ea)[-<span class="hljs-number">4</span>::],base=<span class="hljs-number">16</span>))<br>    <br>    <span class="hljs-comment"># 记录直接跳转块</span><br>    <span class="hljs-keyword">if</span> GetDisasm(BlockStart).startswith(<span class="hljs-string">&#x27;jmp&#x27;</span>):<br>        DirJmp.append(BlockStart)<br>        <br>    <span class="hljs-comment"># 记录普通跳转块</span><br>    <span class="hljs-keyword">elif</span> BlockStart!=start_ea <span class="hljs-keyword">and</span> BlockStart!=end_ea:<span class="hljs-comment">#这两个不等号是用来掐头去尾，否则下面Dst转化就会有问题</span><br>        JmpMethod[BlockStart] = <span class="hljs-built_in">list</span>()<br>        <span class="hljs-comment">#  这里有一个细节 就是一个block的结束地址 并不是这个block最后一条语句的地址 而是它successor的起始地址</span><br>        <span class="hljs-comment">#  所以这里就获取结束地址的前一条语句 来得到block的最后一条语句</span><br>        <span class="hljs-comment">#  prev_head功能是获取前一条语句 print_insn_mnem是获取操作指令</span><br>        Dst = <span class="hljs-built_in">int</span>(GetDisasm(prev_head(BlockEnd))[-<span class="hljs-number">4</span>::],base=<span class="hljs-number">16</span>)<br>        JmpMethod[BlockStart].append(print_insn_mnem(prev_head(BlockEnd)))<br>        JmpMethod[BlockStart].append(Dst)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Maze:&quot;</span>)<br><span class="hljs-built_in">print</span>(Maze)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;***************************************************************&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;DirJmp:&quot;</span>)<br><span class="hljs-built_in">print</span>(DirJmp)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;***************************************************************&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;JmpMethod:&quot;</span>)<br><span class="hljs-built_in">print</span>(JmpMethod)<br>    <br></code></pre></td></tr></table></figure><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><p>得到迷宫后，就可以用BFS走，DFS应该是走不出来的，因为可能有环的存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 接上文一起</span><br><span class="hljs-keyword">import</span> queue<br><br>start = <span class="hljs-number">0x1500</span><br>end = <span class="hljs-number">0x23d9</span><br>q = queue.Queue()<br>q.put(<span class="hljs-number">0x1500</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maze_walk</span>():<br>    visited = <span class="hljs-built_in">set</span>()<br>    father = &#123;<span class="hljs-number">0x1500</span>: <span class="hljs-literal">None</span>&#125; <span class="hljs-comment">#用于回溯</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty():<br>        curr = q.get() <span class="hljs-comment"># 取的同时也会弹出</span><br>        nxs = Maze[curr]<br>        <span class="hljs-keyword">for</span> dirc <span class="hljs-keyword">in</span> nxs:<br>            <span class="hljs-keyword">if</span> dirc <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> visited:<br>                visited.add(dirc)<br>                father[dirc] = curr<br>                q.put(dirc)<br><br>            <span class="hljs-keyword">if</span> dirc == end:<br>                p = [dirc]<br>                <span class="hljs-keyword">while</span> father[dirc] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    dirc = father[dirc]<br>                    p.append(dirc)<br><br>                <span class="hljs-keyword">return</span> p[::-<span class="hljs-number">1</span>] <span class="hljs-comment"># 反转得到由起点-&gt;终点路径</span><br><br><br>path = maze_walk()<br>p = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> path:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> DirJmp: <span class="hljs-comment">#如果是jmp跳 那么不理他 下一个</span><br>        p.append(i)<br>p = p[<span class="hljs-number">1</span>:] <span class="hljs-comment">#除去第一个点即0x1500</span><br><br><br>ans = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(p) - <span class="hljs-number">1</span>): <span class="hljs-comment"># 终点不算</span><br>    <span class="hljs-keyword">if</span> JmpMethod[p[i]][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;jnz&#x27;</span> <span class="hljs-keyword">and</span> JmpMethod[p[i]][<span class="hljs-number">1</span>] == p[i + <span class="hljs-number">1</span>]:<br>        ans += <span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">if</span> JmpMethod[p[i]][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;jz&#x27;</span> <span class="hljs-keyword">and</span> JmpMethod[p[i]][<span class="hljs-number">1</span>] == p[i + <span class="hljs-number">1</span>]:<br>        ans += <span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">if</span> JmpMethod[p[i]][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;jnz&#x27;</span> <span class="hljs-keyword">and</span> JmpMethod[p[i]][<span class="hljs-number">1</span>] != p[i + <span class="hljs-number">1</span>]:<br>        ans += <span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">if</span> JmpMethod[p[i]][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;jz&#x27;</span> <span class="hljs-keyword">and</span> JmpMethod[p[i]][<span class="hljs-number">1</span>] != p[i + <span class="hljs-number">1</span>]:<br>        ans += <span class="hljs-string">&#x27;1&#x27;</span><br><br><span class="hljs-comment"># 再反转得到 因为迷宫从输入的最低位开始走的，所以最右边才是起始</span><br>ans = <span class="hljs-built_in">int</span>(ans[::-<span class="hljs-number">1</span>], <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(ans))<br><span class="hljs-comment">#  893bddd9aa12789e</span><br></code></pre></td></tr></table></figure><h2 id="Angr"><a href="#Angr" class="headerlink" title="Angr"></a>Angr</h2><p>主要思路就是模拟迷宫的走法，自定义一个ExplorationTechnique,避免路径爆炸的问题，毕竟 2^64次方还是很大的，里面的各种技术细节可以参考下之前的文章（就是因为这题，才写了这些文章 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><span class="hljs-keyword">from</span> angr <span class="hljs-keyword">import</span> SimState<br><span class="hljs-comment"># 继承ExplorationTechnique类，并重载一些方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Walk</span>(angr.ExplorationTechnique):<br>    <span class="hljs-string">&quot;&quot;&quot;大体思路就是BFS&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,MazeRange:<span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">int</span> ,<span class="hljs-built_in">int</span>],MazeFinal:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        MazeRange:整个迷宫范围，也就是起始地址到结束地址，注意是整个迷宫，不是起始到终点的范围</span><br><span class="hljs-string">        MazeFinal:迷宫终点</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        self._MazeRange = MazeRange<br>        self._MazeFinal = MazeFinal<br>        self._Vistited = <span class="hljs-built_in">set</span>() <span class="hljs-comment">#用于判断是否访问过</span><br>       <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">self,simgr:angr.SimulationManager</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        定义并初始化两个stash</span><br><span class="hljs-string">        初始化_Vistited</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        simgr.stashes[<span class="hljs-string">&#x27;visited&#x27;</span>] =[]<br>        simgr.stashes[<span class="hljs-string">&#x27;found&#x27;</span>] =[]<br>        self._Vistited.add(simgr.active[<span class="hljs-number">0</span>].addr)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isInMaze</span>(<span class="hljs-params">self,state:angr.SimState</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">return</span> self._MazeRange[<span class="hljs-number">0</span>] &lt;= state.addr &lt; self._MazeRange[<span class="hljs-number">1</span>]<br>    <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">StateSplitter</span>(<span class="hljs-params">self,states:<span class="hljs-built_in">list</span>[angr.SimState]</span>) -&gt; <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">list</span>[angr.SimState],<span class="hljs-built_in">list</span>[angr.SimState]]:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        此函数用于分拣State，如果访问过就不要让这个State加入下一次的循环了</span><br><span class="hljs-string">        类似于BFS那个核心要点</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>            _keep =[]<br>            _split =[]<br>            <span class="hljs-keyword">for</span> state <span class="hljs-keyword">in</span> states:<br>                <span class="hljs-keyword">if</span> self.isInMaze(state): <span class="hljs-comment">#判断是否在迷宫范围内是因为走迷宫的时候会call &#x27;step&#x27; 函数，那个我们不处理</span><br>                    <span class="hljs-keyword">if</span> state.addr <span class="hljs-keyword">in</span> self._Vistited:<br>                        _split.append(state)<br>                    <span class="hljs-keyword">else</span>:<br>                        self._Vistited.add(state.addr)<br>                        _keep.append(state)<br>                <span class="hljs-keyword">else</span>:<br>                    _keep.append(state) <span class="hljs-comment"># &#x27;step&#x27;或者其他非迷宫内部的state我们都要执行</span><br><br>            <span class="hljs-keyword">return</span> _keep,_split<span class="hljs-comment"># 这里的返回顺序不能改，前面的是保留的，后面的是舍弃的</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isEnd</span>(<span class="hljs-params">self,state:SimState</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>            <span class="hljs-keyword">return</span> state.addr == self._MazeFinal <span class="hljs-comment"># 判断是否到终点了</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">step</span>(<span class="hljs-params">self,simgr:angr.SimulationManager,stash :<span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;active&#x27;</span>,**kwargs</span>) -&gt; angr.SimulationManager:<br>        <span class="hljs-comment"># 模拟执行</span><br>        simgr.step(stash=stash,**kwargs)<br><br>        <span class="hljs-comment"># 筛选用于下一次执行的state</span><br>        simgr.split(stash_splitter = self.StateSplitter,from_stash = <span class="hljs-string">&#x27;active&#x27;</span>,to_stash = <span class="hljs-string">&#x27;visited&#x27;</span>)<br><br>        <span class="hljs-comment"># 将到终点的state存下来</span><br>        simgr.move(from_stash = <span class="hljs-string">&#x27;active&#x27;</span>,to_stash = <span class="hljs-string">&#x27;found&#x27;</span>,filter_func = self.isEnd)<br><br>        <span class="hljs-keyword">return</span> simgr<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">complete</span>(<span class="hljs-params">self,simgr:angr.SimulationManager</span>):<br>        <span class="hljs-comment"># 定义找到终点就结束</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(simgr.found)<br>    <br><br><span class="hljs-comment"># 装载 设定基址为0</span><br>proj = angr.Project(<span class="hljs-string">&quot;./maze&quot;</span>,auto_load_libs = <span class="hljs-literal">False</span>,main_opts=&#123;<span class="hljs-string">&#x27;base_addr&#x27;</span>: <span class="hljs-number">0</span>&#125;)<br><br><span class="hljs-comment"># 找到这几个对象</span><br>SymMazeWalk = proj.loader.find_symbol(<span class="hljs-string">&quot;maze_walk&quot;</span>)<br>SymMazeFinal = proj.loader.find_symbol(<span class="hljs-string">&quot;maze_final&quot;</span>)<br><br>SymKey = proj.loader.find_symbol(<span class="hljs-string">&quot;key&quot;</span>)<br>SymSteps = proj.loader.find_symbol(<span class="hljs-string">&quot;steps&quot;</span>)<br><br>KeyValue = claripy.BVS(<span class="hljs-string">&quot;SymKey&quot;</span>,<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 从 maze_walk 开始</span><br>State = proj.factory.call_state(SymMazeWalk.rebased_addr,prototype = <span class="hljs-string">&#x27;void f()&#x27;</span>)<br>State.options.add(angr.sim_options.ZERO_FILL_UNCONSTRAINED_REGISTERS)<br><br><span class="hljs-comment"># 因为我们跳过了main函数，没有执行输入 所以要自己把输入给存进内存</span><br>State.memory.store(SymKey.rebased_addr,KeyValue)<br>State.memory.store(SymSteps.rebased_addr,KeyValue)<br><br><span class="hljs-comment"># 实例化我们的Walk</span><br>tech = Walk(MazeRange=(SymMazeWalk.rebased_addr,SymMazeWalk.rebased_addr + SymMazeWalk.size),<br>            MazeFinal=SymMazeFinal.rebased_addr)<br><br><span class="hljs-comment"># 准备执行</span><br>Simgr = proj.factory.simgr(State)<br><span class="hljs-comment"># 使用我们的搜索方式</span><br>Simgr.use_technique(tech)<br><br><span class="hljs-comment"># 开始跑 直到找到可以达终点的state</span><br>Simgr.run()<br><span class="hljs-comment"># 移除我们的搜索方式 准备继续执行</span><br>Simgr.remove_technique(tech)<br><br><span class="hljs-comment"># 从我们找到那个state开始执行</span><br>SolveState = proj.factory.simgr(Simgr.found[<span class="hljs-number">0</span>])<br>SolveState.run()<br><span class="hljs-comment"># 执行到最后得到输出 即为flag</span><br><span class="hljs-built_in">print</span>(SolveState.deadended[<span class="hljs-number">0</span>].posix.dumps(<span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># miniLctf&#123;YOU_AR3_$0_GOOD_4T_SOLV1NG_MAZE&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>recurrence</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>angr</tag>
      
      <tag>idapython</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ExplorationTechnique</title>
    <link href="/2023/05/24/ExplorationTechniques/"/>
    <url>/2023/05/24/ExplorationTechniques/</url>
    
    <content type="html"><![CDATA[<p>About <a href="https://docs.angr.io/en/latest/_modules/angr/exploration_techniques.html#ExplorationTechnique">ExplorationTechnique</a></p><span id="more"></span><p>首先，这也是一个类。先来看看angr对这个类的说明</p><blockquote><p><em>An technique is a set of hooks for a simulation manager that assists in the implementation of new techniques in symbolic exploration.</em>      </p><p><em>Any number of these methods may be overridden by a subclass.</em> <em>To use an exploration technique, call <code>simgr.use_technique</code> with an *instance* of the technique.</em></p></blockquote><p>就是说这个technique是一系列hook的集合，可以更好帮助我们符号执行。而且这个类里面的方法都可以使用子类重写，用一个实例来调用<code>simgr.use_technique</code> </p><p>其实这个类就是帮我们把符号执行所必须的几个步骤给我们打包起来，然后让我们重载里面的步骤，新生成一个子类，然后按照这子类里面规定的方法去符号执行</p><p>这是整个类的定义以及相关成员函数的说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ExplorationTechnique</span>:<br><br>    <span class="hljs-comment"># 主要hook函数</span><br>    _hook_list = (<span class="hljs-string">&quot;step&quot;</span>, <span class="hljs-string">&quot;filter&quot;</span>, <span class="hljs-string">&quot;selector&quot;</span>, <span class="hljs-string">&quot;step_state&quot;</span>, <span class="hljs-string">&quot;successors&quot;</span>)<br><br>    <span class="hljs-comment"># 得到被重写的hook函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_get_hooks</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> &#123;name: <span class="hljs-built_in">getattr</span>(self, name) <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> self._hook_list <span class="hljs-keyword">if</span> self._is_overriden(name)&#125;<br>    <br><span class="hljs-comment"># 判断哪些函数被重写</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_is_overriden</span>(<span class="hljs-params">self, name</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(self, name).__code__ <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">getattr</span>(ExplorationTechnique, name).__code__<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&quot;project&quot;</span>):<br>            self.project: angr.project.Project = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 这确实就是一个空函数，专门提供给使用者来初始化自己所要的</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">self, simgr</span>):<br>        <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">step</span>(<span class="hljs-params">self, simgr, stash=<span class="hljs-string">&quot;active&quot;</span>, **kwargs</span>): <br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">         用来hook step函数，最后应该调用simgr.step以便真正执行</span><br><span class="hljs-string">         原本的step是往下执行一步，去到后继block</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        simgr.step(stash=stash, **kwargs)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">filter</span>(<span class="hljs-params">self, simgr, state, **kwargs</span>):  <br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">          决定该state要被移去哪一个stash</span><br><span class="hljs-string">          </span><br><span class="hljs-string">          如果说这个state要被filter的话，就把这个state要被移去的stash名字返回</span><br><span class="hljs-string">          如果想在filter之前对state做一些改变，就返回一个stash的元组，并修改state</span><br><span class="hljs-string">          </span><br><span class="hljs-string">          这和step里的filter_fun起到的作用一样的</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> simgr.<span class="hljs-built_in">filter</span>(state, **kwargs)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">selector</span>(<span class="hljs-params">self, simgr, state, **kwargs</span>):  <br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        决定该state是否要参与进这个step round，也就是如果这个state要进入的话，就返</span><br><span class="hljs-string">        回True否则返回False</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        这个step里的selector_fun起到的作用是一样的</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> simgr.selector(state, **kwargs)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">step_state</span>(<span class="hljs-params">self, simgr, state, **kwargs</span>):  <br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        决定该state的successor应该放去哪个块。结果应该是一个stash到successor列表的字典映射</span><br><span class="hljs-string">        如[&quot;active:[succ1,succ2]&quot;]</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        note:该函数的优先级高于filter filter是作用于当前返回的state</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> simgr.step_state(state, **kwargs)<br><br><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">successors</span>(<span class="hljs-params">self, simgr, state, **kwargs</span>):  <br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        在进入一个state时调用，返回一个SimSuccssors对象</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> simgr.successors(state, **kwargs)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">complete</span>(<span class="hljs-params">self, simgr</span>):  <br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        返回当前simgr是否到达 &quot;completed&quot; state</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        该方法不是hook的对象，也不应该直接调用此方法，而是应该自己决定返回True或者False</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>setup</code> 初始化</p><p><code>step</code> hook步入</p><p><code>filter</code>决定该state放去哪 即丢去哪</p><p><code>selector</code> 决定该state是否执行 </p><p><code>step_state</code> 决定successors放去哪个stash</p><p><code>successors</code> 在进入一个state时调用</p><p><code>complete</code> 是否全部完成</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>angr</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>angr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Factory SimManger State</title>
    <link href="/2023/05/24/Factory%20SimManger%20State/"/>
    <url>/2023/05/24/Factory%20SimManger%20State/</url>
    
    <content type="html"><![CDATA[<p><a href="https://docs.angr.io/en/latest/_modules/angr/factory.html">facntory</a> <a href="https://docs.angr.io/en/latest/_modules/angr/sim_manager.html#SimulationManager">SimManger</a> State</p><span id="more"></span><p>一般使用angr时，都会以以下几句开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br>proj = angr.Project(<span class="hljs-string">&#x27;examples/fauxware/fauxware&#x27;</span>, auto_load_libs=<span class="hljs-literal">False</span>)<br>state = proj.factory.entry_state()<br>simgr = proj.factory.simgr(state)<br></code></pre></td></tr></table></figure><p>现在就来看看<code>factory</code>都究竟是个啥</p><p>首先factory是一个类，但是它更像是一个工具类，帮助我们完成一些事情，我们就可以简单调用里面的方法。比如我们想要初始化一个入口函数的<code>state</code>,那么我们就可以调用<code>factory</code>里面的<code>entry_state()</code>,就不用自己再去关心那细节。</p><p>现在就来看看里面还有哪些方法</p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><h3 id="blank-state-self-kwargs"><a href="#blank-state-self-kwargs" class="headerlink" title="blank_state(self, **kwargs)"></a>blank_state(self, **kwargs)</h3><p>调用此方法，会返回一个几乎没有初始化的state对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">blank_state</span>(<span class="hljs-params">self,**kwargs</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns a mostly-uninitialized state object. All parameters are optional.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        :param addr:            State 开始的地址</span><br><span class="hljs-string">        :param initial_prefix:  如果提供，所有的符号寄存器都会有一个以此为前缀字符串的符号值</span><br><span class="hljs-string">        :param fs:              A dictionary of file names with associated preset SimFile objects.</span><br><span class="hljs-string">        :param concrete_fs:     bool describing whether the host filesystem should be consulted when opening files.</span><br><span class="hljs-string">        :param chroot:          A path to use as a fake root directory, Behaves similarly to a real chroot. Used only when concrete_fs is set to True.</span><br><span class="hljs-string">        :param kwargs:          Any additional keyword args will be passed to the SimState constructor.</span><br><span class="hljs-string">        :return:                返回一个空 state</span><br><span class="hljs-string">        :rtype:                 返回类型 SimState</span><br><span class="hljs-string"> &quot;&quot;&quot;</span><br> <span class="hljs-keyword">return</span> self.project.simos.state_blank<br></code></pre></td></tr></table></figure><h3 id="entry-state-self-kwargs"><a href="#entry-state-self-kwargs" class="headerlink" title="entry_state(self, **kwargs)"></a>entry_state(self, **kwargs)</h3><p>调用此方法，返回一个起始地址的<code>state</code></p><h3 id="full-init-state-self-kwargs"><a href="#full-init-state-self-kwargs" class="headerlink" title="full_init_state(self, **kwargs)"></a>full_init_state(self, **kwargs)</h3><blockquote><p><em>Very much like :meth:<code>entry_state()</code>, except that instead of starting execution at the program entry point,</em>        <em>execution begins at a special SimProcedure that plays the role of the dynamic loader, calling each of the</em>        <em>initializer functions that should be called before execution reaches the entry point.</em>         <em>It can take any of the arguments that can be provided to <code>entry_state</code>, except for <code>addr</code>.</em></p></blockquote><p>意思是，这个方法拥有以上的所有参数除了addr，因为这个方法是先于符号执行的，它的作用是初始化，调用哪些所有的初始化函数</p><h3 id="call-state-self-addr-args-kwargs"><a href="#call-state-self-addr-args-kwargs" class="headerlink" title="call_state(self, addr, *args, **kwargs)"></a>call_state(self, addr, *args, **kwargs)</h3><p>很显然是一个创建call到某个函数的state，它的参数</p><blockquote><p><em>Returns a state object initialized to the start of a given function, as if it were called with given parameters.</em>         </p><p><em>:param addr:            The address the state should start at instead of the entry point.</em>        </p><p><em>:param args:            Any additional positional arguments will be used as arguments to the function call.</em> </p></blockquote><p>返回一个以给定函数起初地址的<code>state</code>，换句话说提供<code>addr</code>,它将以此创建一个<code>state</code>,而不再是entry point。它也可以通过<code>args</code>来传递所call的函数参数</p><h2 id="Simulation-Manager"><a href="#Simulation-Manager" class="headerlink" title="Simulation Manager"></a>Simulation Manager</h2><h3 id="simgr-simulation-manager-self-thing-Optional-Union-List-SimState-SimState-x3D-None-kwargs"><a href="#simgr-simulation-manager-self-thing-Optional-Union-List-SimState-SimState-x3D-None-kwargs" class="headerlink" title="simgr simulation_manager( self, thing: Optional[Union[List[SimState], SimState]] &#x3D; None,**kwargs)"></a>simgr simulation_manager( self, <strong>thing</strong>: Optional[Union[List[SimState], SimState]] &#x3D; None,**kwargs)</h3><blockquote><p><em>Constructs a new simulation manager.</em>         </p><p><em>:param thing: What to put in the new SimulationManager’s active stash (either a SimState   or a list of</em>  <em>SimStates).</em> </p><p><em>:param kwargs:  Any additional keyword arguments will be passed to the SimulationManager                        constructor</em>        </p><p><em>:returns:               The new SimulationManager</em>        </p><p><em>:rtype:                 angr.sim_manager.SimulationManager</em> </p></blockquote><p>这个方法也很常用，但是它不再是创建和返回state对象，而是利用state对象创建一个simulation manager对象并返回。它的参数就是接受一个state列表或者单独一个state，并把他们放进stash的active里面。如果什么参数也不传，那么它就默认以entry_point为state创建。</p><p>那么这个<code>simulation manager</code>对象是个啥呢？</p><h3 id="SimulationManager"><a href="#SimulationManager" class="headerlink" title="SimulationManager"></a>SimulationManager</h3><p>angr在[文档](<a href="https://docs.angr.io/en/latest/_modules/angr/sim_manager.html#SimulationManager">angr.sim_manager - angr documentation</a>)里面这样评论<em>The Simulation Manager is the future future.</em></p><p>SimulationManager 也是angr里面的一个类。这个类的功能就是帮助我们根据state的stash来管理state，可以往下step，可以过滤filter，也可以融合merge。可以通过属性值来直接获取stash，比如<code>.active</code>,也可以用一些前缀比如<code>mp_</code>,那么就可以<code>mp_active</code>,同理<code>one_</code>.</p><p>这是它的一些成员</p><blockquote><p><em>:param project:           A Project instance.</em>    </p><p><em>:type project:              angr.project.Project</em>   </p><p> <em>:param stashes:</em>           一个字典用于存储stash   </p><p><em>:param active_states:   Active states to seed the “active” stash with.</em>    </p><p><em>:param hierarchy:</em>         一个StateHierarchy对象，用于追踪state之间关系</p><p> <em>:param resilience:</em>        收集error的集合    </p><p><em>:param save_unsat:</em>       如果为True，则保留unsat的state，而不是直接丢掉 </p><p><em>:param auto_drop:</em>        存放直接丢弃的stash的名字</p><p><em>:param completion_mode:</em>     描述exploretion techniques的函数</p><p> <em>:param techniques:</em> 需要预先设定exploretion tech的列表    </p><p>……</p></blockquote><p>当然里面也有很多的方法，最重要的是<code>step</code> ,<code>explore</code>,<code>use_technique</code>三个方法</p><p>看看它的构造函数，通过初始化函数就能这些成员有一个更直观的了解</p><h4 id="init"><a href="#init" class="headerlink" title="__init__"></a>__init__</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        project,</span><br><span class="hljs-params">        active_states=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        stashes=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        hierarchy=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        resilience=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        save_unsat=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">        auto_drop=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        errored=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        completion_mode=<span class="hljs-built_in">any</span>,</span><br><span class="hljs-params">        techniques=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        suggestions=<span class="hljs-literal">True</span>,</span><br><span class="hljs-params">        **kwargs,</span><br><span class="hljs-params">    </span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>        self._project = project<br>        self.completion_mode = completion_mode<br>        self._errored = []<br>        self._lock = PicklableLock()<br><span class="hljs-comment">#  这里就可以放入自己的stash</span><br>        <span class="hljs-keyword">if</span> stashes <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            stashes = self._create_integral_stashes()<br>        self._stashes: DefaultDict[<span class="hljs-built_in">str</span>, <span class="hljs-type">List</span>[<span class="hljs-string">&quot;SimState&quot;</span>]] = stashes<br>        self._hierarchy = StateHierarchy() <span class="hljs-keyword">if</span> hierarchy <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> hierarchy<br>        self._save_unsat = save_unsat<br>        self._auto_drop = &#123;<br>            SimulationManager.DROP,<br>        &#125;<br>        self._techniques = []<br><br>        <span class="hljs-keyword">if</span> resilience <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self._resilience = (AngrError, SimError, claripy.ClaripyError)<br>        <span class="hljs-keyword">elif</span> resilience <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span>:<br>            self._resilience = (<br>                AngrError,<br>                SimError,<br>                claripy.ClaripyError,<br>                KeyError,<br>                IndexError,<br>                TypeError,<br>                ValueError,<br>                ArithmeticError,<br>                MemoryError,<br>            )<br>        <span class="hljs-keyword">elif</span> resilience <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>            self._resilience = ()<br>        <span class="hljs-keyword">else</span>:<br>            self._resilience = <span class="hljs-built_in">tuple</span>(resilience)<br><br>        <span class="hljs-keyword">if</span> suggestions:<br>            self.use_technique(Suggestions())<br><br>        <span class="hljs-comment"># 8&lt;----------------- Compatibility layer -----------------</span><br><br>        <span class="hljs-keyword">if</span> auto_drop <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> kwargs.pop(<span class="hljs-string">&quot;save_unconstrained&quot;</span>, <span class="hljs-literal">True</span>):<br>            self._auto_drop |= &#123;<span class="hljs-string">&quot;unconstrained&quot;</span>&#125;<br><br>        <span class="hljs-keyword">if</span> kwargs.pop(<span class="hljs-string">&quot;veritesting&quot;</span>, <span class="hljs-literal">False</span>):<br>            self.use_technique(Veritesting(**kwargs.get(<span class="hljs-string">&quot;veritesting_options&quot;</span>, &#123;&#125;)))<br>        kwargs.pop(<span class="hljs-string">&quot;veritesting_options&quot;</span>, &#123;&#125;)<br><br>        threads = kwargs.pop(<span class="hljs-string">&quot;threads&quot;</span>, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> threads <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            self.use_technique(Threading(threads))<br><br>        <span class="hljs-keyword">if</span> kwargs:<br>            <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;Unexpected keyword arguments: &quot;</span> + <span class="hljs-string">&quot; &quot;</span>.join(kwargs))<br>        <span class="hljs-comment"># ------------------ Compatibility layer ----------------&gt;8</span><br><br>        <span class="hljs-keyword">if</span> auto_drop:<br>            self._auto_drop |= <span class="hljs-built_in">set</span>(auto_drop)<br><br>        <span class="hljs-keyword">if</span> errored <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            self._errored.extend(errored)<br><br>        <span class="hljs-keyword">if</span> active_states:<br>            self._store_states(<span class="hljs-string">&quot;active&quot;</span>, active_states)<br><br>        <span class="hljs-keyword">if</span> techniques:<br>            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> techniques:<br>                self.use_technique(t)<br></code></pre></td></tr></table></figure><h4 id="step"><a href="#step" class="headerlink" title="step"></a>step</h4><p>看看它的参数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">step</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        stash=<span class="hljs-string">&quot;active&quot;</span>,</span><br><span class="hljs-params">        target_stash=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        n=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        selector_func=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        step_func=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        error_list=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        successor_func=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        until=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        filter_func=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">        **run_args,</span><br><span class="hljs-params">    </span>):<br>    <br></code></pre></td></tr></table></figure><blockquote><p><em>stash</em> : 需要step的stash名字，默认是active</p><p><em>target_stash</em> :  将结果放入哪个stash</p><p><em>n</em> :    如果<code>until</code>是NULL的话，那么会一直执行n步</p><p><em><strong>selector_fun</strong></em> : 接收一个以state为参数、返回类型为布尔的函数，如果返回为True，那么执行该                                                                                               state，否则保持原样</p><p><em><strong>step_fun</strong></em> :   接收一个以SimulationManager为参数并返回SimulantionManager的函数，每一次调用<code>step()</code>时，都会调用该函数，但该函数里面不应该有<code>step(</code>)</p><p><em>error_list</em> :一个list来存储<code>ErroredState</code></p><p><em>successor_fun</em> :接收一个以state为参数并返回它后继的函数</p><p>until：  接收一个以SimulationManger为参数并返回布尔值的函数，一直执行到返回为True</p><p><em>filter_func</em> ： 接收一个以state为参数并返回该state要移去哪个stash名字的函数</p></blockquote><p>现在的angr中<code>n</code>和<code>until</code>已经移植到<code>run()</code>中，用法相同</p><h4 id="use-technique"><a href="#use-technique" class="headerlink" title="use_technique"></a>use_technique</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"> Use an exploration technique with this SimulationManager.</span><br><span class="hljs-string"></span><br><span class="hljs-string"> Techniques can be found in :mod:`angr.exploration_techniques`.</span><br><span class="hljs-string"></span><br><span class="hljs-string">:param tech:    一个ExplorationTechnique对象，用以控制该SimluationManger行为</span><br><span class="hljs-string">:type tech:     ExplorationTechnique           （note：ExplorationTechnique也是angr的一个比较重要的类）</span><br><span class="hljs-string">:return:        The technique that was added, for convenience</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(tech, ExplorationTechnique):<br>            <span class="hljs-keyword">raise</span> SimulationManagerError<br><br>        <span class="hljs-comment"># <span class="hljs-doctag">XXX:</span> as promised</span><br>        tech.project = self._project<br>        tech.setup(self)<br><br>        HookSet.install_hooks(self, **tech._get_hooks())<br>        self._techniques.append(tech)<br>        <span class="hljs-keyword">return</span> tech<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>State是一个模拟状态，里面包含很多值，各种寄存器，内存以及几乎所有可以变得值，它是大多数函数的参数。</p><p>我们想要得到一个state，可以调用factory里的关于state的方法。还可以使用得到的state的对象以及factory.simgr方法得到一个SimManger对象。factory相当于一个工具箱，封装angr内部许多常用方法，方便我们调用，就不需要自己手动操作了。</p><p>当我们拥有一个state的时候，就可以把它丢给SimManger了，我们可以到一个SimManger的对象，这一步相当于把这个state拉伸进内存，得到更多有效信息，就可以开始正式执行了，而且我们还可以设定各种执行方式，是只走一步还是一直走到尽头?中间状态要怎么处理？以什么方式走？等等</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>angr</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>angr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Simulation Managers</title>
    <link href="/2023/05/24/Simulation-Managers/"/>
    <url>/2023/05/24/Simulation-Managers/</url>
    
    <content type="html"><![CDATA[<p><a href="https://docs.angr.io/en/latest/core-concepts/pathgroups.html#simulation-managers">Stepping Stash-Management Simple-Exploration Exploration-Techniques</a></p><span id="more"></span><blockquote><p>The most important control interface in angr is the SimulationManager, which allows you to control symbolic execution over groups of states simultaneously, applying search strategies to explore a program’s state space. Here, you’ll learn how to use it.</p></blockquote><p>概括：angr里面最重要的控制接口就是<code>SimulationManager</code>,可以以此同时控制不同的<code>states</code>符号执行，我们也可以以此来执行我们的搜索策略</p><blockquote><p>Simulation managers let you wrangle multiple states in a slick way. States are organized into “stashes”, which you can step forward, filter, merge, and move around as you wish. This allows you to, for example, step two different stashes of states at different rates, then merge them together. The default stash for most operations is the <code>active</code> stash, which is where your states get put when you initialize a new simulation manager.</p></blockquote><p>概括：我们可以用用<code>Simulation Managers</code>来管理多个<code>states</code>,<code>States</code>又是由<code>stashes</code>组成，这些<code>stashes</code>我们可以步入、过滤、融合甚至移到另一个<code>stashes</code>,对于绝大多数的<code>stashes</code>都是<code>active</code></p><p>note: 这里一直说的<code>stashes</code>其实就是一种状态标志，意味这个block是否还能继续走下去，比如说一个block是<code>active</code>的，那么它就还有后继而且还能继续往下执行。所以当我们初始丢给<code>Simulation Manager</code>的state应该是<code>active</code>的，这样它<code>Simulation Manager</code>才会为我们模拟执行</p><h2 id="Stepping"><a href="#Stepping" class="headerlink" title="Stepping"></a>Stepping</h2><p>一个简单的demo</p><p>我们使用<code>.step()</code>来让当前的state执行一步，去到下一个block。demo中给出了两个block的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br>proj = angr.Project(<span class="hljs-string">&#x27;examples/fauxware/fauxware&#x27;</span>, auto_load_libs=<span class="hljs-literal">False</span>)<br>state = proj.factory.entry_state()<br>simgr = proj.factory.simgr(state)<br>simgr.active<br>[&lt;SimState @ <span class="hljs-number">0x400580</span>&gt;]<br><br>simgr.step()<br>simgr.active<br>[&lt;SimState @ <span class="hljs-number">0x400540</span>&gt;]<br></code></pre></td></tr></table></figure><p>你一定想问，那如果一个state的后继不止有一个呢？答案是<code>.step()</code>都会执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Step until the first symbolic branch</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(simgr.active) == <span class="hljs-number">1</span>:     <span class="hljs-comment">#只有当前处于active的数量为1，才往下执行</span><br><span class="hljs-meta">... </span>   simgr.step()<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>simgr<br>&lt;SimulationManager <span class="hljs-keyword">with</span> <span class="hljs-number">2</span> active&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>simgr.active<br>[&lt;SimState @ <span class="hljs-number">0x400692</span>&gt;, &lt;SimState @ <span class="hljs-number">0x400699</span>&gt;]<br><br><span class="hljs-comment"># Step until everything terminates</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>simgr.run()<br><span class="hljs-meta">&gt;&gt;&gt; </span>simgr<br>&lt;SimulationManager <span class="hljs-keyword">with</span> <span class="hljs-number">3</span> deadended&gt;<br></code></pre></td></tr></table></figure><p>如果我们不关心中间过程，只希望它能一直跑下去，直到再也没有后继块可以执行，那么我们可以用.<code>run()</code></p><p>现在我们使用了<code>.run()</code>得到最终的state，它有三个<code>stash</code>,并且都是<code>deadended</code>状态，也就是跑不动了</p><h2 id="Stash-Management"><a href="#Stash-Management" class="headerlink" title="Stash Management"></a>Stash Management</h2><p>我们可以用<code>.move()</code>来转移状态，它有三个参数<code>from_stash</code>,<code>to_statsh</code>,以及一个可选参数<code>filter_func</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">simgr.move(from_stash=<span class="hljs-string">&#x27;deadended&#x27;</span>, to_stash=<span class="hljs-string">&#x27;authenticated&#x27;</span>, filter_func=<span class="hljs-keyword">lambda</span> s: <span class="hljs-string">b&#x27;Welcome&#x27;</span> <span class="hljs-keyword">in</span> s.posix.dumps(<span class="hljs-number">1</span>))<br>simgr<br>&lt;SimulationManager <span class="hljs-keyword">with</span> <span class="hljs-number">2</span> authenticated, <span class="hljs-number">1</span> deadended&gt;<br></code></pre></td></tr></table></figure><p>这个demo让我们把输出含有<code>Welcome</code>的state转移到<code>authenticated</code>，也就是说<code>authenticated</code>里的state都含有<code>Welcome</code></p><p>每一个<code>stash</code>都是一个列表，我们可以用常规的去索引，也可以用其他方法。如果我们加一个前缀<code>one_</code>那么我们就会访问这个<code>stash</code>的第一个元素，如果用<code>mp_</code>就可以同时访问全部，关于<code>mp_</code>这有一个<a href="https://github.com/zardus/mulpyplexer">说明</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> simgr.deadended + simgr.authenticated:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(s.addr))<br><span class="hljs-number">0x1000030</span><br><span class="hljs-number">0x1000078</span><br><span class="hljs-number">0x1000078</span><br><br>simgr.one_deadended<br>&lt;SimState @ <span class="hljs-number">0x1000030</span>&gt;<br>simgr.mp_authenticated<br>MP([&lt;SimState @ <span class="hljs-number">0x1000078</span>&gt;, &lt;SimState @ <span class="hljs-number">0x1000078</span>&gt;])<br>simgr.mp_authenticated.posix.dumps(<span class="hljs-number">0</span>)<br>MP([<span class="hljs-string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80\x80@\x80@\x00&#x27;</span>])<br></code></pre></td></tr></table></figure><blockquote><p>Of course, <code>step</code>, <code>run</code>, and any other method that operates on a single stash of paths can take a <code>stash</code> argument, specifying which stash to operate on.</p></blockquote><p>也就是所有的<code>step</code>,<code>run</code>方法都可以接受一个<code>stash</code>参数，来决定执行哪一个</p><h3 id="Stash-types"><a href="#Stash-types" class="headerlink" title="Stash types"></a>Stash types</h3><p>You can use stashes for whatever you like, but there are a few stashes that will be used to categorize some special kinds of states. These are:</p><table><thead><tr><th>Stash</th><th>Description</th></tr></thead><tbody><tr><td>active</td><td>可执行的</td></tr><tr><td>deadended</td><td>再也无法执行的，可能是因为无法到达，没有后继等</td></tr><tr><td>pruned</td><td>（不太确定）当使用<code>LAZY_SOLVES</code>时，states不会再检查可满足性，当一个state发现是<code>unsat</code>时，这个states路径上的所有states都会变成<code>pruned</code></td></tr><tr><td>unconstrained</td><td>如果 <code>save_unconstrained</code> 传递给SimelationManager constructor, 那些无约束的就时<code>unconstrained</code></td></tr><tr><td>unsat</td><td>如果 <code>save_unsat</code> 传递给SimelationManager constructor, 那些无解的就时<code>unsat</code>,比如要求输入同时满足即是’AAAA’又是’BBBB’</td></tr></tbody></table><h2 id="Simple-Exploration"><a href="#Simple-Exploration" class="headerlink" title="Simple Exploration"></a>Simple Exploration</h2><p>符号执行很普遍的用法是找到一个可以到达某个地址的states，而忽略其他所有的states，angr提供<code>.explore()</code>来方便执行。</p><p>当我们使用<code>.explore()</code>方法时，它可以接受两个参数<code>find</code>以及<code>avoid</code>。其中<code>find</code>可以是一个地址，一个列表，一个以<code>state</code>为参数返回某些值的函数，当任何一个<code>active</code>符合<code>find</code>的要求，那么它就会被放入<code>found</code>stash里面，同时停止执行，<code>avoid</code>一样，不过是放入<code>avoided</code>stash里面，然后继续符号执行。<code>num_find</code>可以决定找多少个<code>found</code>，简单demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 装载</span><br>proj = angr.Project(<span class="hljs-string">&#x27;examples/CSCI-4968-MBE/challenges/crackme0x00a/crackme0x00a&#x27;</span>)<br><span class="hljs-comment"># 创建对象</span><br>simgr = proj.factory.simgr()<br><span class="hljs-comment"># 开始符号执行 搜索</span><br>simgr.explore(find=<span class="hljs-keyword">lambda</span> s: <span class="hljs-string">b&quot;Congrats&quot;</span> <span class="hljs-keyword">in</span> s.posix.dumps(<span class="hljs-number">1</span>))<br>&lt;SimulationManager <span class="hljs-keyword">with</span> <span class="hljs-number">1</span> active, <span class="hljs-number">1</span> found&gt;<br><span class="hljs-comment"># 找到一个 利用索引的方式得到该state</span><br>s = simgr.found[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 查看该state的输出</span><br><span class="hljs-built_in">print</span>(s.posix.dumps(<span class="hljs-number">1</span>))<br>Enter password: Congrats!<br><span class="hljs-comment"># 查看该state的输入</span><br>flag = s.posix.dumps(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(flag)<br>g00dJ0B!<br></code></pre></td></tr></table></figure><h2 id="Exploration-Techniques"><a href="#Exploration-Techniques" class="headerlink" title="Exploration Techniques"></a>Exploration Techniques</h2><p>angr内置了很多种的搜索算法，但是我们也可以自己写一个搜索算法，并通过<code>simgr.use_technique(tech)</code>调用，这里的<code>tech</code>是<code>ExplorationTechnique</code>子类。后面会再详谈，这里先列出angr内置的一些搜索算法</p><ul><li><em>DFS</em>: 深度优先，只会让一个state为active，把其他的放进<code>deferred</code>stash</li><li><em>Explorer</em>: 实现<code>.explore()</code>,可以使用<code>find</code>,<code>avoid</code>方法</li><li><em>LengthLimiter</em>:最长路径截断</li><li><em>LoopSeer</em>: 如果可能在一个循环里面，放入<code>spining</code>stash,直到其他可达路径都走完</li><li><em>ManualMergepoint</em>: 标记一个地址作为merge点，当一个stata到达此处时将其挂起，当其他state在某个时间内到达这个点时会被merge</li><li><em>Memory</em>：在<code>.step()</code>之间监视内存释放&#x2F;使用情况,如果内存释放&#x2F;使用得少的话，停止探索</li><li><em>Oppologist</em>: 当angr遇到一个不支持的指令的时候，会具体化所有的输入，并使用unicorn引擎来单独模拟这条指令，使得可以继续符号执行</li><li><em>Spiller</em>: 当有太多states处于active状态时，这可以把一些states放进磁盘中，使得内存开销比较小</li><li><em>Threading</em>: 使用多线程并行处理，但由于python全局变量线程锁的原因，这并不会有多大提升。但是如果在angr的native-code依赖（z3，unicorn，libvex）上花太多时间可以考虑这项技术</li><li><em>Tracer</em>：可以动态追踪资源</li><li><em>Veritesting</em>:自动识别有用的可合并点，使用<code>veritesting=True</code>来启用，这会提高搜索效率，但与其他算法配合得并不是很好</li></ul><p>Look at the API documentation for the <a href="https://docs.angr.io/en/latest/api.html#angr.sim_manager.SimulationManager"><code>SimulationManager</code></a> and <a href="https://docs.angr.io/en/latest/api.html#angr.exploration_techniques.ExplorationTechnique"><code>ExplorationTechnique</code></a> classes for more information.</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>angr</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>angr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Core Concept</title>
    <link href="/2023/05/23/Core-Concept/"/>
    <url>/2023/05/23/Core-Concept/</url>
    
    <content type="html"><![CDATA[<p>最基础的angr，<a href="https://docs.angr.io/en/latest/core-concepts/toplevel.html">原文档</a></p><span id="more"></span><h2 id="To-start-proj-angr-Project-39-ELF-path-39"><a href="#To-start-proj-angr-Project-39-ELF-path-39" class="headerlink" title="To start: proj = angr.Project(&#39;/ELF_path&#39;)"></a><em>To start</em>: <code>proj = angr.Project(&#39;/ELF_path&#39;)</code></h2><p>We can do these things with <code>proj</code> :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> Check arch: proj.arch <span class="hljs-comment">#查看架构</span><br><span class="hljs-number">2.</span> Check entry: proj.entry <span class="hljs-comment">#查看程序入口</span><br><span class="hljs-number">3.</span> See Name : proj.filename <span class="hljs-comment">#查看文件名字</span><br></code></pre></td></tr></table></figure><h2 id="To-Load-proj-loader"><a href="#To-Load-proj-loader" class="headerlink" title="To Load: proj.loader"></a><em>To Load</em>: <code>proj.loader</code></h2><p>We can do these things with <code>proj.loader</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> See Shared_objects: proj.loader.shared_objects<br><span class="hljs-number">2.</span> See min_addr: proj.loader.min_addr<br><span class="hljs-number">3.</span> see max_addr: proj.loader.max_addr<br><span class="hljs-number">4.</span> See main_object: proj.loader.main_object <span class="hljs-comment"># 主要对象</span><br><span class="hljs-number">5.</span> Check the binary have an executable stack: proj.loader.main_object.execstack<br><span class="hljs-number">6.</span> Check this binary position-independent : proj.loader.main_object.pic<br></code></pre></td></tr></table></figure><h2 id="The-Factory"><a href="#The-Factory" class="headerlink" title="The Factory"></a><em>The Factory</em></h2><blockquote><p>There are a lot of classes in <code>angr</code>, and most of them require a project to be instantiated. Instead of making you pass around the project everywhere, we provide <code>project.factory</code>, which has several convenient constructors for common objects you’ll want to use frequently.</p></blockquote><p>angr有很多的类，基本上每一个类都需要一个<code>project</code>对象来实例化。angr提供了<code>project.factory</code>这一个接口，可以方便供我们使用</p><h2 id="Block-block-proj-factory-block-proj-entry"><a href="#Block-block-proj-factory-block-proj-entry" class="headerlink" title="Block  block = proj.factory.block(proj.entry)"></a><em>Block</em> <code> block = proj.factory.block(proj.entry)</code></h2><p>angr的基本执行对象是block，上面这行代码可以获得程序起始地址的块</p><p>What can do with <code>block</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> To see <span class="hljs-built_in">all</span> the instructions: block.pp()<br>out:<span class="hljs-number">0x401670</span>:       xor     ebp, ebp<br><span class="hljs-number">0x401672</span>:       mov     r9, rdx<br><span class="hljs-number">0x401675</span>:       pop     rsi<br><span class="hljs-number">0x401676</span>:       mov     rdx, rsp<br><span class="hljs-number">0x401679</span>:       <span class="hljs-keyword">and</span>     rsp, <span class="hljs-number">0xfffffffffffffff0</span><br><span class="hljs-number">0x40167d</span>:       push    rax<br><span class="hljs-number">0x40167e</span>:       push    rsp<br><span class="hljs-number">0x40167f</span>:       lea     r8, [rip + <span class="hljs-number">0x2e2a</span>]<br><span class="hljs-number">0x401686</span>:       lea     rcx, [rip + <span class="hljs-number">0x2db3</span>]<br><span class="hljs-number">0x40168d</span>:       lea     rdi, [rip - <span class="hljs-number">0xd4</span>]<br><span class="hljs-number">0x401694</span>:       call    qword ptr [rip + <span class="hljs-number">0x205866</span>]<br><span class="hljs-number">2.</span>The number of the instructions:block.instructions<br><span class="hljs-number">3.</span>The address of the instructions: block.instrutions_addr<br>out:[<span class="hljs-number">0x401670</span>, <span class="hljs-number">0x401672</span>, <span class="hljs-number">0x401675</span>, <span class="hljs-number">0x401676</span>, <span class="hljs-number">0x401679</span>, <span class="hljs-number">0x40167d</span>, <span class="hljs-number">0x40167e</span>, <span class="hljs-number">0x40167f</span>, <span class="hljs-number">0x401686</span>, <span class="hljs-number">0x40168d</span>, <span class="hljs-number">0x401694</span>]<br></code></pre></td></tr></table></figure><h2 id="State-state-proj-factory-entry-state"><a href="#State-state-proj-factory-entry-state" class="headerlink" title="State: state = proj.factory.entry_state()"></a><em>State</em>: <code>state = proj.factory.entry_state()</code></h2><p>Some Examples:</p><blockquote><p>Here’s another fact about angr - the <code>Project</code> object only represents an “initialization image” for the program. When you’re performing execution with angr, you are working with a specific object representing a <em>simulated program state</em> - a <code>SimState</code>. Let’s grab one right now!</p></blockquote><p>Project只是程序的一个初始框架，真正符号执行的是一个个<code>SimState</code>,现在创建一个state</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">state = proj.factory.entry_state()<br>&lt;SimState @ <span class="hljs-number">0x401670</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p>A SimState contains a program’s memory, registers, filesystem data… any “live data” that can be changed by execution has a home in the state.</p></blockquote><p>一个<code>state</code>包含了很多状态，比如内存、寄存器、各种可能改变的值都会存储在state里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-number">1.</span> state.regs.rip <span class="hljs-comment"># get the current instrucion pointer</span><br>out: &lt;BV64 <span class="hljs-number">0x401670</span>&gt;<br><span class="hljs-number">2.</span> state.regs.rax<br>out: &lt;BV64 <span class="hljs-number">0x1c</span>&gt;<br><span class="hljs-number">3.</span> state.mem[proj.entry].<span class="hljs-built_in">int</span>.resolved  <span class="hljs-comment"># interpret the memory at the entry point as a C int</span><br>out: &lt;BV32 <span class="hljs-number">0x8949ed31</span>&gt;<br></code></pre></td></tr></table></figure><p>About <code>bv</code> and <code>bvv</code></p><p><code>bv</code>就是BitVector，angr存储数据的形式；<code>bvv</code>就是BitVector Value，代表这个位向量的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># bv -&gt; bitvectors to represent CPU data in angr</span><br><span class="hljs-comment"># Note that each bitvector has a .length property describing how wide it is in bits.</span><br><br><span class="hljs-number">1.</span> bv = state.solver.BVV(<span class="hljs-number">0x1234</span>, <span class="hljs-number">32</span>) <span class="hljs-comment"># create a 32-bit-wide bitvector with value 0x1234</span><br>out: &lt;BV32 <span class="hljs-number">0x1234</span>&gt;<br><span class="hljs-number">2.</span> state.solver.<span class="hljs-built_in">eval</span>(bv)                <span class="hljs-comment"># convert to Python int</span><br>out: <span class="hljs-number">0x1234</span><br></code></pre></td></tr></table></figure><p>存储 <code>bitvectors</code> 到 <code>reg</code> or <code>mem</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>state.regs.rsi = state.solver.BVV(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>)<br>  state.regs.rsi<br>out: &lt;BV64 <span class="hljs-number">0x3</span>&gt;<br><br><span class="hljs-number">2.</span>state.mem[<span class="hljs-number">0x1000</span>].long = <span class="hljs-number">4</span><br>state.mem[<span class="hljs-number">0x1000</span>].long.resolved<br>out:&lt;BV64 <span class="hljs-number">0x4</span>&gt;<br></code></pre></td></tr></table></figure><p>About <code>mem</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>Use array[index] notation to specify an address<br><br><span class="hljs-number">2.</span>Use .&lt;<span class="hljs-built_in">type</span>&gt; to specify that the memory should be interpreted <span class="hljs-keyword">as</span> &amp;lt;<span class="hljs-built_in">type</span>&amp;gt; (common values: char, short, <span class="hljs-built_in">int</span>, long, size_t, uint8_t, uint16_t…)<br><br>From there, you can either:<br><br> <span class="hljs-number">1</span>˚ Store a value to it, either a bitvector <span class="hljs-keyword">or</span> a Python <span class="hljs-built_in">int</span><br><br> <span class="hljs-number">2</span>˚ Use .resolved to get the value <span class="hljs-keyword">as</span> a bitvector<br><br> <span class="hljs-number">3</span>˚ Use .concrete to get the value <span class="hljs-keyword">as</span> a Python <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><h2 id="Simulation-Managers"><a href="#Simulation-Managers" class="headerlink" title="Simulation Managers"></a><em>Simulation Managers</em></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> simgr = proj.factory.simulation_manager(state)<br><span class="hljs-comment">#  The constructor can take a state or a list of states.</span><br>out: &lt;SimulationManager <span class="hljs-keyword">with</span> <span class="hljs-number">1</span> active&gt;<br><br><span class="hljs-number">2.</span> simgr.step()<br><span class="hljs-comment"># 这个step会进入block的下个块，如果有分支，那么angr都会进入，后面的文章会再提及</span><br></code></pre></td></tr></table></figure><h2 id="Analyses"><a href="#Analyses" class="headerlink" title="Analyses"></a><em><strong>Analyses</strong></em></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ange has lots of built-in analyses</span><br> proj.analyses.BackwardSlice        proj.analyses.CongruencyCheck      proj.analyses.reload_analyses<br> proj.analyses.BinaryOptimizer      proj.analyses.DDG                  proj.analyses.StaticHooker<br> proj.analyses.BinDiff              proj.analyses.DFG                  proj.analyses.VariableRecovery<br> proj.analyses.BoyScout             proj.analyses.Disassembly          proj.analyses.VariableRecoveryFast<br> proj.analyses.CDG                  proj.analyses.GirlScout            proj.analyses.Veritesting<br> proj.analyses.CFG                  proj.analyses.Identifier           proj.analyses.VFG<br> proj.analyses.CFGEmulated          proj.analyses.LoopFinder           proj.analyses.VSA_DDG<br> proj.analyses.CFGFast              proj.analyses.Reassembler<br></code></pre></td></tr></table></figure><p>for information about these methods, we should check <code>api documention angr.analyses</code></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>angr</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
      <tag>angr</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
