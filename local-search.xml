<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Simulation Managers</title>
    <link href="/2023/05/24/Simulation-Managers/"/>
    <url>/2023/05/24/Simulation-Managers/</url>
    
    <content type="html"><![CDATA[<p>本文是对<a href="https://angr.io/">angr</a>文档的搬运，选了我认为比较重要或者有用的部分，原文档链接<a href="https://docs.angr.io/en/latest/core-concepts/pathgroups.html#simulation-managers">在此</a></p><span id="more"></span><blockquote><p>The most important control interface in angr is the SimulationManager, which allows you to control symbolic execution over groups of states simultaneously, applying search strategies to explore a program’s state space. Here, you’ll learn how to use it.</p></blockquote><p>概括：angr里面最重要的控制接口就是<code>SimulationManager</code>,可以以此同时控制不同的<code>states</code>符号执行，我们也可以以此来执行我们的搜索策略</p><blockquote><p>Simulation managers let you wrangle multiple states in a slick way. States are organized into “stashes”, which you can step forward, filter, merge, and move around as you wish. This allows you to, for example, step two different stashes of states at different rates, then merge them together. The default stash for most operations is the <code>active</code> stash, which is where your states get put when you initialize a new simulation manager.</p></blockquote><p>概括：我们可以用用<code>Simulation Managers</code>来管理多个<code>states</code>,<code>States</code>又是由<code>stashes</code>组成，这些<code>stashes</code>我们可以步入、过滤、融合甚至移到另一个<code>stashes</code>,对于绝大多数的<code>stashes</code>都是<code>active</code></p><p>note: 这里一直说的<code>stashes</code>其实就是一种状态标志，意味这个block是否还能继续走下去，比如说一个block是<code>active</code>的，那么它就还有后继而且还能继续往下执行。所以当我们初始丢给<code>Simulation Manager</code>的state应该是<code>active</code>的，这样它<code>Simulation Manager</code>才会为我们模拟执行</p><h2 id="Stepping"><a href="#Stepping" class="headerlink" title="Stepping"></a>Stepping</h2><p>一个简单的demo</p><p>我们使用<code>.step()</code>来让当前的state执行一步，去到下一个block。demo中给出了两个block的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br>proj = angr.Project(<span class="hljs-string">&#x27;examples/fauxware/fauxware&#x27;</span>, auto_load_libs=<span class="hljs-literal">False</span>)<br>state = proj.factory.entry_state()<br>simgr = proj.factory.simgr(state)<br>simgr.active<br>[&lt;SimState @ <span class="hljs-number">0x400580</span>&gt;]<br><br>simgr.step()<br>simgr.active<br>[&lt;SimState @ <span class="hljs-number">0x400540</span>&gt;]<br></code></pre></td></tr></table></figure><p>你一定想问，那如果一个state的后继不止有一个呢？答案是<code>.step()</code>都会执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Step until the first symbolic branch</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(simgr.active) == <span class="hljs-number">1</span>:     <span class="hljs-comment">#只有当前处于active的数量为1，才往下执行</span><br><span class="hljs-meta">... </span>   simgr.step()<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>simgr<br>&lt;SimulationManager <span class="hljs-keyword">with</span> <span class="hljs-number">2</span> active&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>simgr.active<br>[&lt;SimState @ <span class="hljs-number">0x400692</span>&gt;, &lt;SimState @ <span class="hljs-number">0x400699</span>&gt;]<br><br><span class="hljs-comment"># Step until everything terminates</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>simgr.run()<br><span class="hljs-meta">&gt;&gt;&gt; </span>simgr<br>&lt;SimulationManager <span class="hljs-keyword">with</span> <span class="hljs-number">3</span> deadended&gt;<br></code></pre></td></tr></table></figure><p>如果我们不关心中间过程，只希望它能一直跑下去，直到再也没有后继块可以执行，那么我们可以用.<code>run()</code></p><p>现在我们使用了<code>.run()</code>得到最终的state，它有三个<code>stash</code>,并且都是<code>deadended</code>状态，也就是跑不动了</p><h2 id="Stash-Management"><a href="#Stash-Management" class="headerlink" title="Stash Management"></a>Stash Management</h2><p>我们可以用<code>.move()</code>来转移状态，它有三个参数<code>from_stash</code>,<code>to_statsh</code>,以及一个可选参数<code>filter_func</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">simgr.move(from_stash=<span class="hljs-string">&#x27;deadended&#x27;</span>, to_stash=<span class="hljs-string">&#x27;authenticated&#x27;</span>, filter_func=<span class="hljs-keyword">lambda</span> s: <span class="hljs-string">b&#x27;Welcome&#x27;</span> <span class="hljs-keyword">in</span> s.posix.dumps(<span class="hljs-number">1</span>))<br>simgr<br>&lt;SimulationManager <span class="hljs-keyword">with</span> <span class="hljs-number">2</span> authenticated, <span class="hljs-number">1</span> deadended&gt;<br></code></pre></td></tr></table></figure><p>这个demo让我们把输出含有<code>Welcome</code>的state转移到<code>authenticated</code>，也就是说<code>authenticated</code>里的state都含有<code>Welcome</code></p><p>每一个<code>stash</code>都是一个列表，我们可以用常规的去索引，也可以用其他方法。如果我们加一个前缀<code>one_</code>那么我们就会访问这个<code>stash</code>的第一个元素，如果用<code>mp_</code>就可以同时访问全部，关于<code>mp_</code>这有一个<a href="https://github.com/zardus/mulpyplexer">说明</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> simgr.deadended + simgr.authenticated:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(s.addr))<br><span class="hljs-number">0x1000030</span><br><span class="hljs-number">0x1000078</span><br><span class="hljs-number">0x1000078</span><br><br>simgr.one_deadended<br>&lt;SimState @ <span class="hljs-number">0x1000030</span>&gt;<br>simgr.mp_authenticated<br>MP([&lt;SimState @ <span class="hljs-number">0x1000078</span>&gt;, &lt;SimState @ <span class="hljs-number">0x1000078</span>&gt;])<br>simgr.mp_authenticated.posix.dumps(<span class="hljs-number">0</span>)<br>MP([<span class="hljs-string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#x27;</span>,<br>    <span class="hljs-string">&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80\x80@\x80@\x00&#x27;</span>])<br></code></pre></td></tr></table></figure><blockquote><p>Of course, <code>step</code>, <code>run</code>, and any other method that operates on a single stash of paths can take a <code>stash</code> argument, specifying which stash to operate on.</p></blockquote><p>也就是所有的<code>step</code>,<code>run</code>方法都可以接受一个<code>stash</code>参数，来决定执行哪一个</p><h3 id="Stash-types"><a href="#Stash-types" class="headerlink" title="Stash types"></a>Stash types</h3><p>You can use stashes for whatever you like, but there are a few stashes that will be used to categorize some special kinds of states. These are:</p><table><thead><tr><th>Stash</th><th>Description</th></tr></thead><tbody><tr><td>active</td><td>可执行的</td></tr><tr><td>deadended</td><td>再也无法执行的，可能是因为无法到达，没有后继等</td></tr><tr><td>pruned</td><td>（不太确定）当使用<code>LAZY_SOLVES</code>时，states不会再检查可满足性，当一个state发现是<code>unsat</code>时，这个states路径上的所有states都会变成<code>pruned</code></td></tr><tr><td>unconstrained</td><td>如果 <code>save_unconstrained</code> 传递给SimelationManager constructor, 那些无约束的就时<code>unconstrained</code></td></tr><tr><td>unsat</td><td>如果 <code>save_unsat</code> 传递给SimelationManager constructor, 那些无解的就时<code>unsat</code>,比如要求输入同时满足即是’AAAA’又是’BBBB’</td></tr></tbody></table><h2 id="Simple-Exploration"><a href="#Simple-Exploration" class="headerlink" title="Simple Exploration"></a>Simple Exploration</h2><p>符号执行很普遍的用法是找到一个可以到达某个地址的states，而忽略其他所有的states，angr提供<code>.explore()</code>来方便执行。</p><p>当我们使用<code>.explore()</code>方法时，它可以接受两个参数<code>find</code>以及<code>avoid</code>。其中<code>find</code>可以是一个地址，一个列表，一个以<code>state</code>为参数返回某些值的函数，当任何一个<code>active</code>符合<code>find</code>的要求，那么它就会被放入<code>found</code>stash里面，同时停止执行，<code>avoid</code>一样，不过是放入<code>avoided</code>stash里面，然后继续符号执行。<code>num_find</code>可以决定找多少个<code>found</code>，简单demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 装载</span><br>proj = angr.Project(<span class="hljs-string">&#x27;examples/CSCI-4968-MBE/challenges/crackme0x00a/crackme0x00a&#x27;</span>)<br><span class="hljs-comment"># 创建对象</span><br>simgr = proj.factory.simgr()<br><span class="hljs-comment"># 开始符号执行 搜索</span><br>simgr.explore(find=<span class="hljs-keyword">lambda</span> s: <span class="hljs-string">b&quot;Congrats&quot;</span> <span class="hljs-keyword">in</span> s.posix.dumps(<span class="hljs-number">1</span>))<br>&lt;SimulationManager <span class="hljs-keyword">with</span> <span class="hljs-number">1</span> active, <span class="hljs-number">1</span> found&gt;<br><span class="hljs-comment"># 找到一个 利用索引的方式得到该state</span><br>s = simgr.found[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 查看该state的输出</span><br><span class="hljs-built_in">print</span>(s.posix.dumps(<span class="hljs-number">1</span>))<br>Enter password: Congrats!<br><span class="hljs-comment"># 查看该state的输入</span><br>flag = s.posix.dumps(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(flag)<br>g00dJ0B!<br></code></pre></td></tr></table></figure><h2 id="Exploration-Techniques"><a href="#Exploration-Techniques" class="headerlink" title="Exploration Techniques"></a>Exploration Techniques</h2><p>angr内置了很多种的搜索算法，但是我们也可以自己写一个搜索算法，并通过<code>simgr.use_technique(tech)</code>调用，这里的<code>tech</code>是<code>ExplorationTechnique</code>子类。后面会再详谈，这里先列出angr内置的一些搜索算法</p><ul><li><em>DFS</em>: Depth first search, as mentioned earlier. Keeps only one state active at once, putting the rest in the <code>deferred</code> stash until it deadends or errors.</li><li><em>Explorer</em>: This technique implements the <code>.explore()</code> functionality, allowing you to search for and avoid addresses.</li><li><em>LengthLimiter</em>: Puts a cap on the maximum length of the path a state goes through.</li><li><em>LoopSeer</em>: Uses a reasonable approximation of loop counting to discard states that appear to be going through a loop too many times, putting them in a <code>spinning</code> stash and pulling them out again if we run out of otherwise viable states.</li><li><em>ManualMergepoint</em>: Marks an address in the program as a merge point, so states that reach that address will be briefly held, and any other states that reach that same point within a timeout will be merged together.</li><li><em>MemoryWatcher</em>: Monitors how much memory is free&#x2F;available on the system between simgr steps and stops exploration if it gets too low.</li><li><em>Oppologist</em>: The “operation apologist” is an especially fun gadget - if this technique is enabled and angr encounters an unsupported instruction, for example a bizzare and foreign floating point SIMD op, it will concretize all the inputs to that instruction and emulate the single instruction using the unicorn engine, allowing execution to continue.</li><li><em>Spiller</em>: When there are too many states active, this technique can dump some of them to disk in order to keep memory consumption low.</li><li><em>Threading</em>: Adds thread-level parallelism to the stepping process. This doesn’t help much because of Python’s global interpreter locks, but if you have a program whose analysis spends a lot of time in angr’s native-code dependencies (unicorn, z3, libvex) you can seem some gains.</li><li><em>Tracer</em>: An exploration technique that causes execution to follow a dynamic trace recorded from some other source. The <a href="https://github.com/angr/tracer">dynamic tracer repository</a> has some tools to generate those traces.</li><li><em>Veritesting</em>: An implementation of a [CMU paper](<a href="https://users.ece.cmu.edu/~dbrumley/pdf/Avgerinos">https://users.ece.cmu.edu/~dbrumley/pdf/Avgerinos</a> et al._2014_Enhancing Symbolic Execution with Veritesting.pdf) on automatically identifying useful merge points. This is so useful, you can enable it automatically with <code>veritesting=True</code> in the SimulationManager constructor! Note that it frequenly doesn’t play nice with other techniques due to the invasive way it implements static symbolic execution.</li></ul><p>Look at the API documentation for the <a href="https://docs.angr.io/en/latest/api.html#angr.sim_manager.SimulationManager"><code>SimulationManager</code></a> and <a href="https://docs.angr.io/en/latest/api.html#angr.exploration_techniques.ExplorationTechnique"><code>ExplorationTechnique</code></a> classes for more information.</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>angr</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Core Concept</title>
    <link href="/2023/05/23/Core-Concept/"/>
    <url>/2023/05/23/Core-Concept/</url>
    
    <content type="html"><![CDATA[<p>本文是对<a href="https://angr.io/">angr</a>文档的搬运，选了我认为比较重要或者有用的部分，原文档链接<a href="https://docs.angr.io/en/latest/core-concepts/toplevel.html">在此</a></p><span id="more"></span><h2 id="To-start-proj-angr-Project-39-ELF-path-39"><a href="#To-start-proj-angr-Project-39-ELF-path-39" class="headerlink" title="To start: proj = angr.Project(&#39;/ELF_path&#39;)"></a><em>To start</em>: <code>proj = angr.Project(&#39;/ELF_path&#39;)</code></h2><p>We can do these things with <code>proj</code> :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> Check arch: proj.arch <span class="hljs-comment">#查看架构</span><br><span class="hljs-number">2.</span> Check entry: proj.entry <span class="hljs-comment">#查看程序入口</span><br><span class="hljs-number">3.</span> See Name : proj.filename <span class="hljs-comment">#查看文件名字</span><br></code></pre></td></tr></table></figure><h2 id="To-Load-proj-loader"><a href="#To-Load-proj-loader" class="headerlink" title="To Load: proj.loader"></a><em>To Load</em>: <code>proj.loader</code></h2><p>We can do these things with <code>proj.loader</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> See Shared_objects: proj.loader.shared_objects<br><span class="hljs-number">2.</span> See min_addr: proj.loader.min_addr<br><span class="hljs-number">3.</span> see max_addr: proj.loader.max_addr<br><span class="hljs-number">4.</span> See main_object: proj.loader.main_object <span class="hljs-comment"># 主要对象</span><br><span class="hljs-number">5.</span> Check the binary have an executable stack: proj.loader.main_object.execstack<br><span class="hljs-number">6.</span> Check this binary position-independent : proj.loader.main_object.pic<br></code></pre></td></tr></table></figure><h2 id="The-Factory"><a href="#The-Factory" class="headerlink" title="The Factory"></a><em>The Factory</em></h2><blockquote><p>There are a lot of classes in <code>angr</code>, and most of them require a project to be instantiated. Instead of making you pass around the project everywhere, we provide <code>project.factory</code>, which has several convenient constructors for common objects you’ll want to use frequently.</p></blockquote><p>angr有很多的类，基本上每一个类都需要一个<code>project</code>对象来实例化。angr提供了<code>project.factory</code>这一个接口，可以方便供我们使用</p><h2 id="Block-block-proj-factory-block-proj-entry"><a href="#Block-block-proj-factory-block-proj-entry" class="headerlink" title="Block  block = proj.factory.block(proj.entry)"></a><em>Block</em> <code> block = proj.factory.block(proj.entry)</code></h2><p>angr的基本执行对象是block，上面这行代码可以获得程序起始地址的块</p><p>What can do with <code>block</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> To see <span class="hljs-built_in">all</span> the instructions: block.pp()<br>out:<span class="hljs-number">0x401670</span>:       xor     ebp, ebp<br><span class="hljs-number">0x401672</span>:       mov     r9, rdx<br><span class="hljs-number">0x401675</span>:       pop     rsi<br><span class="hljs-number">0x401676</span>:       mov     rdx, rsp<br><span class="hljs-number">0x401679</span>:       <span class="hljs-keyword">and</span>     rsp, <span class="hljs-number">0xfffffffffffffff0</span><br><span class="hljs-number">0x40167d</span>:       push    rax<br><span class="hljs-number">0x40167e</span>:       push    rsp<br><span class="hljs-number">0x40167f</span>:       lea     r8, [rip + <span class="hljs-number">0x2e2a</span>]<br><span class="hljs-number">0x401686</span>:       lea     rcx, [rip + <span class="hljs-number">0x2db3</span>]<br><span class="hljs-number">0x40168d</span>:       lea     rdi, [rip - <span class="hljs-number">0xd4</span>]<br><span class="hljs-number">0x401694</span>:       call    qword ptr [rip + <span class="hljs-number">0x205866</span>]<br><span class="hljs-number">2.</span>The number of the instructions:block.instructions<br><span class="hljs-number">3.</span>The address of the instructions: block.instrutions_addr<br>out:[<span class="hljs-number">0x401670</span>, <span class="hljs-number">0x401672</span>, <span class="hljs-number">0x401675</span>, <span class="hljs-number">0x401676</span>, <span class="hljs-number">0x401679</span>, <span class="hljs-number">0x40167d</span>, <span class="hljs-number">0x40167e</span>, <span class="hljs-number">0x40167f</span>, <span class="hljs-number">0x401686</span>, <span class="hljs-number">0x40168d</span>, <span class="hljs-number">0x401694</span>]<br></code></pre></td></tr></table></figure><h2 id="state-state-proj-factory-entry-state"><a href="#state-state-proj-factory-entry-state" class="headerlink" title="state: state = proj.factory.entry_state()"></a><em>state</em>: <code>state = proj.factory.entry_state()</code></h2><p>Some Examples:</p><blockquote><p>A SimState contains a program’s memory, registers, filesystem data… any “live data” that can be changed by execution has a home in the state.</p></blockquote><p>一个<code>state</code>包含了很多状态，比如内存、寄存器、各种可能改变的值都会存储在state里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-number">1.</span> state.regs.rip <span class="hljs-comment"># get the current instrucion pointer</span><br>out: &lt;BV64 <span class="hljs-number">0x401670</span>&gt;<br><span class="hljs-number">2.</span> state.regs.rax<br>out: &lt;BV64 <span class="hljs-number">0x1c</span>&gt;<br><span class="hljs-number">3.</span> state.mem[proj.entry].<span class="hljs-built_in">int</span>.resolved  <span class="hljs-comment"># interpret the memory at the entry point as a C int</span><br>out: &lt;BV32 <span class="hljs-number">0x8949ed31</span>&gt;<br></code></pre></td></tr></table></figure><p>About <code>bv</code> and <code>bvv</code></p><p><code>bv</code>就是BitVector，angr存储数据的形式；<code>bvv</code>就是BitVector Value，代表这个位向量的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># bv -&gt; bitvectors to represent CPU data in angr</span><br><span class="hljs-comment"># Note that each bitvector has a .length property describing how wide it is in bits.</span><br><br><span class="hljs-number">1.</span> bv = state.solver.BVV(<span class="hljs-number">0x1234</span>, <span class="hljs-number">32</span>) <span class="hljs-comment"># create a 32-bit-wide bitvector with value 0x1234</span><br>out: &lt;BV32 <span class="hljs-number">0x1234</span>&gt;<br><span class="hljs-number">2.</span> state.solver.<span class="hljs-built_in">eval</span>(bv)                <span class="hljs-comment"># convert to Python int</span><br>out: <span class="hljs-number">0x1234</span><br></code></pre></td></tr></table></figure><p>存储 <code>bitvectors</code> 到 <code>reg</code> or <code>mem</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>state.regs.rsi = state.solver.BVV(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>)<br>  state.regs.rsi<br>out: &lt;BV64 <span class="hljs-number">0x3</span>&gt;<br><br><span class="hljs-number">2.</span>state.mem[<span class="hljs-number">0x1000</span>].long = <span class="hljs-number">4</span><br>state.mem[<span class="hljs-number">0x1000</span>].long.resolved<br>out:&lt;BV64 <span class="hljs-number">0x4</span>&gt;<br></code></pre></td></tr></table></figure><p>About <code>mem</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>Use array[index] notation to specify an address<br><br><span class="hljs-number">2.</span>Use .&lt;<span class="hljs-built_in">type</span>&gt; to specify that the memory should be interpreted <span class="hljs-keyword">as</span> &amp;lt;<span class="hljs-built_in">type</span>&amp;gt; (common values: char, short, <span class="hljs-built_in">int</span>, long, size_t, uint8_t, uint16_t…)<br><br>From there, you can either:<br><br> <span class="hljs-number">1</span>˚ Store a value to it, either a bitvector <span class="hljs-keyword">or</span> a Python <span class="hljs-built_in">int</span><br><br> <span class="hljs-number">2</span>˚ Use .resolved to get the value <span class="hljs-keyword">as</span> a bitvector<br><br> <span class="hljs-number">3</span>˚ Use .concrete to get the value <span class="hljs-keyword">as</span> a Python <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><h2 id="Simulation-Managers"><a href="#Simulation-Managers" class="headerlink" title="Simulation Managers"></a><em>Simulation Managers</em></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> simgr = proj.factory.simulation_manager(state)<br><span class="hljs-comment">#  The constructor can take a state or a list of states.</span><br>out: &lt;SimulationManager <span class="hljs-keyword">with</span> <span class="hljs-number">1</span> active&gt;<br><br><span class="hljs-number">2.</span> simgr.step()<br><span class="hljs-comment"># 这个step会进入block的下个块，如果有分支，那么angr都会进入，后面的文章会再提及</span><br></code></pre></td></tr></table></figure><h2 id="Analyses"><a href="#Analyses" class="headerlink" title="Analyses"></a><em><strong>Analyses</strong></em></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ange has lots of built-in analyses</span><br> proj.analyses.BackwardSlice        proj.analyses.CongruencyCheck      proj.analyses.reload_analyses<br> proj.analyses.BinaryOptimizer      proj.analyses.DDG                  proj.analyses.StaticHooker<br> proj.analyses.BinDiff              proj.analyses.DFG                  proj.analyses.VariableRecovery<br> proj.analyses.BoyScout             proj.analyses.Disassembly          proj.analyses.VariableRecoveryFast<br> proj.analyses.CDG                  proj.analyses.GirlScout            proj.analyses.Veritesting<br> proj.analyses.CFG                  proj.analyses.Identifier           proj.analyses.VFG<br> proj.analyses.CFGEmulated          proj.analyses.LoopFinder           proj.analyses.VSA_DDG<br> proj.analyses.CFGFast              proj.analyses.Reassembler<br></code></pre></td></tr></table></figure><p>for information about these methods, we should check <code>api documention angr.analyses</code></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>angr</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
