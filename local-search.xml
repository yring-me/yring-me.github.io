<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>To start</title>
    <link href="/2023/05/23/angr/"/>
    <url>/2023/05/23/angr/</url>
    
    <content type="html"><![CDATA[<h3 id="To-start-proj-angr-Project-39-ELF-path-39"><a href="#To-start-proj-angr-Project-39-ELF-path-39" class="headerlink" title="To start: proj = angr.Project(&#39;/ELF_path&#39;)"></a>To start: <code>proj = angr.Project(&#39;/ELF_path&#39;)</code></h3><p>We can do these things with <code>proj</code> :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> Check arch: proj.arch <span class="hljs-comment">#查看架构</span><br><span class="hljs-number">2.</span> Check entry: proj.entry <span class="hljs-comment">#查看程序入口</span><br><span class="hljs-number">3.</span> See Name : proj.filename <span class="hljs-comment">#查看文件名字</span><br></code></pre></td></tr></table></figure><h3 id="To-Load-proj-loader"><a href="#To-Load-proj-loader" class="headerlink" title="To Load: proj.loader"></a>To Load: <code>proj.loader</code></h3><p>We can do these things with <code>proj.loader</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> See Shared_objects: proj.loader.shared_objects<br><span class="hljs-number">2.</span> See min_addr: proj.loader.min_addr<br><span class="hljs-number">3.</span> see max_addr: proj.loader.max_addr<br><span class="hljs-number">4.</span> See main_object: proj.loader.main_object <span class="hljs-comment"># 主要对象</span><br><span class="hljs-number">5.</span> Check the binary have an executable stack: proj.loader.main_object.execstack<br><span class="hljs-number">6.</span> Check this binary position-independent : proj.loader.main_object.pic<br></code></pre></td></tr></table></figure><h2 id="The-Factory"><a href="#The-Factory" class="headerlink" title="The Factory"></a>The Factory</h2><blockquote><p>There are a lot of classes in <code>angr</code>, and most of them require a project to be instantiated. Instead of making you pass around the project everywhere, we provide <code>project.factory</code>, which has several convenient constructors for common objects you’ll want to use frequently.</p></blockquote><p>angr有很多的类，基本上每一个类都需要一个<code>project</code>对象来实例化。angr提供了<code>project.factory</code>这一个接口，可以方便供我们使用</p><h2 id="Block-block-proj-factory-block-proj-entry"><a href="#Block-block-proj-factory-block-proj-entry" class="headerlink" title="Block  block = proj.factory.block(proj.entry)"></a><em>Block</em> <code> block = proj.factory.block(proj.entry)</code></h2><p>angr的基本执行对象是block，上面这行代码可以获得程序起始地址的块</p><p>What can do with <code>block</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> To see <span class="hljs-built_in">all</span> the instructions: block.pp()<br>out:<span class="hljs-number">0x401670</span>:       xor     ebp, ebp<br><span class="hljs-number">0x401672</span>:       mov     r9, rdx<br><span class="hljs-number">0x401675</span>:       pop     rsi<br><span class="hljs-number">0x401676</span>:       mov     rdx, rsp<br><span class="hljs-number">0x401679</span>:       <span class="hljs-keyword">and</span>     rsp, <span class="hljs-number">0xfffffffffffffff0</span><br><span class="hljs-number">0x40167d</span>:       push    rax<br><span class="hljs-number">0x40167e</span>:       push    rsp<br><span class="hljs-number">0x40167f</span>:       lea     r8, [rip + <span class="hljs-number">0x2e2a</span>]<br><span class="hljs-number">0x401686</span>:       lea     rcx, [rip + <span class="hljs-number">0x2db3</span>]<br><span class="hljs-number">0x40168d</span>:       lea     rdi, [rip - <span class="hljs-number">0xd4</span>]<br><span class="hljs-number">0x401694</span>:       call    qword ptr [rip + <span class="hljs-number">0x205866</span>]<br><span class="hljs-number">2.</span>The number of the instructions:block.instructions<br><span class="hljs-number">3.</span>The address of the instructions: block.instrutions_addr<br>out:[<span class="hljs-number">0x401670</span>, <span class="hljs-number">0x401672</span>, <span class="hljs-number">0x401675</span>, <span class="hljs-number">0x401676</span>, <span class="hljs-number">0x401679</span>, <span class="hljs-number">0x40167d</span>, <span class="hljs-number">0x40167e</span>, <span class="hljs-number">0x40167f</span>, <span class="hljs-number">0x401686</span>, <span class="hljs-number">0x40168d</span>, <span class="hljs-number">0x401694</span>]<br></code></pre></td></tr></table></figure><h2 id="state-state-proj-factory-entry-state"><a href="#state-state-proj-factory-entry-state" class="headerlink" title="state: state = proj.factory.entry_state()"></a><em>state</em>: <code>state = proj.factory.entry_state()</code></h2><p>Some Examples:</p><blockquote><p>A SimState contains a program’s memory, registers, filesystem data… any “live data” that can be changed by execution has a home in the state.</p></blockquote><p>一个<code>state</code>包含了很多状态，比如内存、寄存器、各种可能改变的值都会存储在state里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-number">1.</span> state.regs.rip <span class="hljs-comment"># get the current instrucion pointer</span><br>out: &lt;BV64 <span class="hljs-number">0x401670</span>&gt;<br><span class="hljs-number">2.</span> state.regs.rax<br>out: &lt;BV64 <span class="hljs-number">0x1c</span>&gt;<br><span class="hljs-number">3.</span> state.mem[proj.entry].<span class="hljs-built_in">int</span>.resolved  <span class="hljs-comment"># interpret the memory at the entry point as a C int</span><br>out: &lt;BV32 <span class="hljs-number">0x8949ed31</span>&gt;<br></code></pre></td></tr></table></figure><p>About <code>bv</code> and <code>bvv</code></p><p><code>bv</code>就是BitVector，angr存储数据的形式；<code>bvv</code>就是BitVector Value，代表这个位向量的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># bv -&gt; bitvectors to represent CPU data in angr</span><br><span class="hljs-comment"># Note that each bitvector has a .length property describing how wide it is in bits.</span><br><br><span class="hljs-number">1.</span> bv = state.solver.BVV(<span class="hljs-number">0x1234</span>, <span class="hljs-number">32</span>) <span class="hljs-comment"># create a 32-bit-wide bitvector with value 0x1234</span><br>out: &lt;BV32 <span class="hljs-number">0x1234</span>&gt;<br><span class="hljs-number">2.</span> state.solver.<span class="hljs-built_in">eval</span>(bv)                <span class="hljs-comment"># convert to Python int</span><br>out: <span class="hljs-number">0x1234</span><br></code></pre></td></tr></table></figure><p>存储 <code>bitvectors</code> 到 <code>reg</code> or <code>mem</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>state.regs.rsi = state.solver.BVV(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>)<br>  state.regs.rsi<br>out: &lt;BV64 <span class="hljs-number">0x3</span>&gt;<br><br><span class="hljs-number">2.</span>state.mem[<span class="hljs-number">0x1000</span>].long = <span class="hljs-number">4</span><br>state.mem[<span class="hljs-number">0x1000</span>].long.resolved<br>out:&lt;BV64 <span class="hljs-number">0x4</span>&gt;<br></code></pre></td></tr></table></figure><p>About <code>mem</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span>Use array[index] notation to specify an address<br><br><span class="hljs-number">2.</span>Use .&lt;<span class="hljs-built_in">type</span>&gt; to specify that the memory should be interpreted <span class="hljs-keyword">as</span> &amp;lt;<span class="hljs-built_in">type</span>&amp;gt; (common values: char, short, <span class="hljs-built_in">int</span>, long, size_t, uint8_t, uint16_t…)<br><br>From there, you can either:<br><br> <span class="hljs-number">1</span>˚ Store a value to it, either a bitvector <span class="hljs-keyword">or</span> a Python <span class="hljs-built_in">int</span><br><br> <span class="hljs-number">2</span>˚ Use .resolved to get the value <span class="hljs-keyword">as</span> a bitvector<br><br> <span class="hljs-number">3</span>˚ Use .concrete to get the value <span class="hljs-keyword">as</span> a Python <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><h2 id="Simulation-Managers"><a href="#Simulation-Managers" class="headerlink" title="*** Simulation Managers***"></a>*** Simulation Managers***</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> simgr = proj.factory.simulation_manager(state)<br><span class="hljs-comment">#  The constructor can take a state or a list of states.</span><br>out: &lt;SimulationManager <span class="hljs-keyword">with</span> <span class="hljs-number">1</span> active&gt;<br><br><span class="hljs-number">2.</span> simgr.step()<br><span class="hljs-comment"># 这个step会进入block的下个块，如果有分支，angr则都会进入，后面的文章会再提及</span><br></code></pre></td></tr></table></figure><h2 id="Analyses"><a href="#Analyses" class="headerlink" title="Analyses"></a><em><strong>Analyses</strong></em></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ange has lots of built-in analyses</span><br> proj.analyses.BackwardSlice        proj.analyses.CongruencyCheck      proj.analyses.reload_analyses<br> proj.analyses.BinaryOptimizer      proj.analyses.DDG                  proj.analyses.StaticHooker<br> proj.analyses.BinDiff              proj.analyses.DFG                  proj.analyses.VariableRecovery<br> proj.analyses.BoyScout             proj.analyses.Disassembly          proj.analyses.VariableRecoveryFast<br> proj.analyses.CDG                  proj.analyses.GirlScout            proj.analyses.Veritesting<br> proj.analyses.CFG                  proj.analyses.Identifier           proj.analyses.VFG<br> proj.analyses.CFGEmulated          proj.analyses.LoopFinder           proj.analyses.VSA_DDG<br> proj.analyses.CFGFast              proj.analyses.Reassembler<br></code></pre></td></tr></table></figure><p>for information about these methods, we should check <code>api documention angr.analyses</code></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>angr</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
